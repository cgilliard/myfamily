@abc::def::ghi;
@xyz::*;

MyClass {
	i32 x;
	u64 y;
	OtherClass z;

	// this function is static and the parameters are not applicable.
	MyClass build(i32 x, u64 y) {
		MyClass {
			x,
			y
		}
	}
	
	// @ indicates that this is not a static method and the parameters @x and @y may be accesed.
	@display() {
		println!("{}:{}", @x, @y)!;
	}	

	// @mut is a mutable non static method. We can set @x here for example.
	// the @mut will be implied and thus optional, but is required for incomplete functions
	@mut u64 set_x(i32 x) {
		@x = x;
		@y
	}

	// this function is implicitly @mut
	i32 set_y(u64 y) {
		@y = y;
		@x
	}

	// this is implicitly void @mut because both function calls are mut and the @ variable is used.
	set_both(i32 x, u64 y) {
		@set_x(x);
		@set_y(y);
	}

	// also static
	i32 main() {
		mut mc = MyClass::build(1, 2);
		mc.x + mc.y as i32
	}

	// use of optional static keyword
	static i32 x(i32 y) {
		0
	}
} 
