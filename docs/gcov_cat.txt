        -:    0:Source:alloc.c
        -:    0:Graph:alloc.gcno
        -:    0:Data:alloc.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/osdef.h>
        -:   18:#include <base/print_util.h>
        -:   19:
        -:   20:_Thread_local ResourceStats THREAD_LOCAL_RESOURCE_STATS = {0, 0, 0, 0, 0};
        -:   21:
        2:   22:unsigned int page_aligned_size(unsigned int size) {
        2:   23:	size_t slabs_page_size = getpagesize();
        2:   24:	size_t aligned_size =
        2:   25:		((size_t)size + slabs_page_size - 1) & ~(slabs_page_size - 1);
        2:   26:	if (aligned_size >= UINT32_MAX) {
    #####:   27:		SetErr(Overflow);
    #####:   28:		return UINT32_MAX;
        -:   29:	}
        2:   30:	return aligned_size;
        -:   31:}
        -:   32:
        1:   33:Alloc alloc(unsigned int size) {
        1:   34:	unsigned int aligned_size = page_aligned_size(size);
        1:   35:	if (aligned_size >= UINT32_MAX) {
    #####:   36:		SetErr(Overflow);
    #####:   37:		Alloc ret = {};
    #####:   38:		return ret;
        -:   39:	}
        1:   40:	void *ret = mmap(NULL, aligned_size, PROT_READ | PROT_WRITE,
        -:   41:					 MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
        1:   42:	if (ret) {
        1:   43:		THREAD_LOCAL_RESOURCE_STATS.alloc_sum += 1;
        -:   44:	} else {
    #####:   45:		SetErr(AllocErr);
        -:   46:	}
        -:   47:
        1:   48:	Alloc aret = {.ptr = ret, .size = aligned_size};
        1:   49:	return aret;
        -:   50:}
        -:   51:
        1:   52:void release(Alloc ptr) {
        -:   53:	int code;
        1:   54:	if ((code = munmap(ptr.ptr, ptr.size))) {
    #####:   55:		panic("munmap error = %i\n", code);
        -:   56:	}
        1:   57:	THREAD_LOCAL_RESOURCE_STATS.release_sum += 1;
        1:   58:}
        -:   59:
       10:   60:int64 alloc_sum() {
       10:   61:	return THREAD_LOCAL_RESOURCE_STATS.alloc_sum;
        -:   62:}
    #####:   63:int64 resize_sum() {
    #####:   64:	return THREAD_LOCAL_RESOURCE_STATS.resize_sum;
        -:   65:}
       10:   66:int64 release_sum() {
       10:   67:	return THREAD_LOCAL_RESOURCE_STATS.release_sum;
        -:   68:}
        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/osdef.h>
        -:   17:
    #####:   18:byte *get_dimmed() {
    #####:   19:	if (getenv("NO_COLOR") != NULL) {
    #####:   20:		return "";
        -:   21:	} else {
    #####:   22:		return "\x1b[2m";
        -:   23:	}
        -:   24:}
        -:   25:
    #####:   26:byte *get_red() {
    #####:   27:	if (getenv("NO_COLOR") != NULL) {
    #####:   28:		return "";
        -:   29:	} else {
    #####:   30:		return "\x1b[31m";
        -:   31:	}
        -:   32:}
        -:   33:
    #####:   34:byte *get_bright_red() {
    #####:   35:	if (getenv("NO_COLOR") != NULL) {
    #####:   36:		return "";
        -:   37:	} else {
    #####:   38:		return "\x1b[91m";
        -:   39:	}
        -:   40:}
        -:   41:
        2:   42:byte *get_green() {
        2:   43:	if (getenv("NO_COLOR") != NULL) {
    #####:   44:		return "";
        -:   45:	} else {
        2:   46:		return "\x1b[32m";
        -:   47:	}
        -:   48:}
        -:   49:
    #####:   50:byte *get_yellow() {
    #####:   51:	if (getenv("NO_COLOR") != NULL) {
    #####:   52:		return "";
        -:   53:	} else {
    #####:   54:		return "\x1b[33m";
        -:   55:	}
        -:   56:}
        -:   57:
    #####:   58:byte *get_cyan() {
    #####:   59:	if (getenv("NO_COLOR") != NULL) {
    #####:   60:		return "";
        -:   61:	} else {
    #####:   62:		return "\x1b[36m";
        -:   63:	}
        -:   64:}
        -:   65:
    #####:   66:byte *get_magenta() {
    #####:   67:	if (getenv("NO_COLOR") != NULL) {
    #####:   68:		return "";
        -:   69:	} else {
    #####:   70:		return "\x1b[35m";
        -:   71:	}
        -:   72:}
        -:   73:
        2:   74:byte *get_blue() {
        2:   75:	if (getenv("NO_COLOR") != NULL) {
    #####:   76:		return "";
        -:   77:	} else {
        2:   78:		return "\x1b[34m";
        -:   79:	}
        -:   80:}
        -:   81:
        4:   82:byte *get_reset() {
        4:   83:	if (getenv("NO_COLOR") != NULL) {
    #####:   84:		return "";
        -:   85:	} else {
        4:   86:		return "\x1b[0m";
        -:   87:	}
        -:   88:}
        -:    0:Source:fam_err.c
        -:    0:Graph:fam_err.gcno
        -:    0:Data:fam_err.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:// #include <base/macro_util.h>
        -:   17:// #include <base/os.h>
        -:   18://  #include <base/print_util.h>
        -:   19://  #include <base/string.h>
        -:   20:
        -:   21:_Thread_local byte fam_err_last[ERR_LEN + 1] = {""};
        -:   22:
        -:   23:_Thread_local int64 fam_err = NoErrors;
        -:   24://_Thread_local Backtrace thread_local_bt__;
        -:   25:
    #####:   26:const byte *get_err() {
        -:   27:	// return strncpy(fam_err_last, FamErrText[fam_err], ERR_LEN);
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
    #####:   31:void print_err(const byte *text) {
        -:   32:	// println("{}: {}", FamErrText[fam_err], text);
        -:   33:	// backtrace_print(&thread_local_bt__);
    #####:   34:}
        -:   35:
        -:   36:// void do_backtrace_generate(Backtrace *bt) {
        -:   37:// if (env("CBACKTRACE") != NULL) {
        -:   38://  backtrace_generate(bt);
        -:   39://	}
        -:   40://}
        -:    0:Source:lock.c
        -:    0:Graph:lock.gcno
        -:    0:Data:lock.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/lock.h>
        -:   16:#include <base/macros.h>
        -:   17:#include <base/print_util.h>
        -:   18:
        -:   19:_Thread_local bool _lock_is_write__ = false;
        -:   20:
    #####:   21:Lock lock_create() {
    #####:   22:	return 0;
        -:   23:}
        2:   24:void lock_read(Lock *lock) {
        2:   25:	_lock_is_write__ = false;
        -:   26:	unsigned long long state;
        -:   27:	unsigned long long state_update;
        -:   28:	do {
        -:   29:		// get current state set the write_pending bit to false
        2:   30:		state = ALOAD(lock) & ~0x80000000ULL;
        -:   31:		// increment the read counter and add 1 to the sequence number (upper 32
        -:   32:		// bits)
        2:   33:		state_update = (state + 0x100000000ULL) + 1ULL;
        -:   34:		// while our target state (no change including sequence number and
        -:   35:		// write_pending != false, we spin)
        2:   36:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   37:}
        2:   38:void lock_write(Lock *lock) {
        2:   39:	_lock_is_write__ = true;
        -:   40:	unsigned long long state;
        -:   41:	unsigned long long state_update;
        -:   42:
        -:   43:	// first step, set write bit true indicating a writer is waiting
        -:   44:	// this lock should be obtained soon after the previous writer
        -:   45:	// is complete indicating to readers our desire to write
        -:   46:	// this avoids write starvation
        -:   47:	do {
        2:   48:		state = ALOAD(lock) & ~0x80000000ULL;
        2:   49:		state_update = (state + 0x100000000ULL) | 0x80000000ULL;
        2:   50:	} while (!CAS(lock, &state, state_update));
        -:   51:
        -:   52:	// second step, obtain total lock before proceeding
        -:   53:	do {
        -:   54:		// get current state. We will wait for the read count to go to 0.
        2:   55:		state = ALOAD(lock) & 0xFFFFFFFF80000000ULL;
        -:   56:		// set the updated value to set the write bit true and read count to 0,
        -:   57:		// increment the sequence number
        2:   58:		state_update = (state + 0x100000000ULL) & 0xFFFFFFFF80000000ULL;
        2:   59:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   60:}
        -:   61:
        4:   62:void lock_unlock(Lock *lock) {
        -:   63:	unsigned long long state;
        -:   64:	unsigned long long state_update;
        -:   65:	// check thread local write variable
        4:   66:	if (_lock_is_write__) {
        -:   67:		// writer
        -:   68:		do {
        -:   69:			// get current state
        2:   70:			state = ALOAD(lock);
        -:   71:			// unset the write bit and increment the sequence number
        2:   72:			state_update = (state + 0x100000000ULL) & ~0x80000000ULL;
        2:   73:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   74:	} else {
        -:   75:		// reader
        -:   76:		do {
        -:   77:			// get current state
        2:   78:			state = ALOAD(lock);
       2*:   79:			if ((state & 0x7FFFFFFF) == 0) panic("underflow!");
        -:   80:			// subtract 1 from the read count and increment the sequence number
        2:   81:			state_update = (state + 0x100000000ULL) - 1ULL;
        2:   82:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   83:	}
        4:   84:}
        -:   85:
        2:   86:void lock_guard_cleanup(LockGuard *l) {
        2:   87:	lock_unlock(l);
        2:   88:}
        -:   89:
        1:   90:LockGuard lock_guard_read(Lock l) {
        1:   91:	lock_read(&l);
        1:   92:	return l;
        -:   93:}
        1:   94:LockGuard lock_guard_write(Lock l) {
        1:   95:	lock_write(&l);
        1:   96:	return l;
        -:   97:}
        -:    0:Source:memmap.c
        -:    0:Graph:memmap.gcno
        -:    0:Data:memmap.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/lock.h>
        -:   17:#include <base/memmap.h>
        -:   18:#include <base/osdef.h>
        -:   19:#include <base/print_util.h>
        -:   20:
        -:   21:typedef struct MemMapImpl {
        -:   22:	byte **data[MEM_MAP_NUM_CHUNKS];
        -:   23:	unsigned long long *bitmap[MEM_MAP_NUM_CHUNKS];
        -:   24:	unsigned int chunks;
        -:   25:	unsigned int size;
        -:   26:	unsigned int chunk_size;
        -:   27:	Lock lock;
        -:   28:} MemMapImpl;
        -:   29:
       14:   30:void __attribute__((constructor)) __memmap_check_sizes() {
        -:   31:	if (sizeof(MemMapImpl) != sizeof(MemMap))
        -:   32:		panic("sizeof(MemMapImpl) (%i) != sizeof(MemMap) (%i)",
        -:   33:			  sizeof(MemMapImpl), sizeof(MemMap));
       14:   34:}
        -:   35:
    20000:   36:void *memmap_data(const MemMap *mm, Ptr ptr) {
    20000:   37:	const MemMapImpl *impl = (const MemMapImpl *)mm;
    20000:   38:	byte *block = impl->data[ptr >> 19][ptr >> 6];
    20000:   39:	return (byte *)(block + ((ptr & 0x3F) * impl->size));
        -:   40:}
        1:   41:int memmap_init(MemMap *mm, unsigned int size) {
        1:   42:	MemMapImpl *impl = (MemMapImpl *)mm;
        1:   43:	impl->size = size;
        1:   44:	impl->chunks = 0;
        1:   45:	impl->chunk_size = 128;
        1:   46:	impl->lock = INIT_LOCK;
        -:   47:
        1:   48:	memset(impl->bitmap, '\0',
        -:   49:		   MEM_MAP_NUM_CHUNKS * sizeof(unsigned long long *));
        1:   50:	memset(impl->data, '\0', MEM_MAP_NUM_CHUNKS * sizeof(byte **));
        1:   51:	return 0;
        -:   52:}
        -:   53:
   786574:   54:int memmap_allocate_bitmap(MemMapImpl *impl, int i) {
   786574:   55:	if (impl->bitmap[i] == NULL) {
        1:   56:		impl->bitmap[i] = malloc(MEM_MAP_CHUNK_SIZE);
        1:   57:		if (impl->bitmap[i] == NULL) {
    #####:   58:			SetErr(AllocErr);
    #####:   59:			return -1;
        -:   60:		}
        1:   61:		memset(impl->bitmap[i], '\0', MEM_MAP_CHUNK_SIZE);
        -:   62:		// set null to allocated so we don't assign it
        1:   63:		if (i == 0) impl->bitmap[i][0] = 0x1;
        -:   64:	}
   786574:   65:	return 0;
        -:   66:}
        -:   67:
    10004:   68:int memmap_check_data(MemMapImpl *impl, int i, int j, int k) {
        -:   69:	byte **data;
    10004:   70:	bool mallocked = false;
    10004:   71:	byte **nulldata = NULL;
        -:   72:
        -:   73:	do {
   10004*:   74:		if (mallocked) free(data);
    10004:   75:		data = ALOAD(&impl->data[i]);
    10004:   76:		if (data == NULL) {
        1:   77:			int page_size = getpagesize();
        1:   78:			int slots_per_page = page_size / impl->size;
       1*:   79:			if (slots_per_page == 0) slots_per_page = 1;
        1:   80:			int alloc_size = sizeof(byte *) * (UINT32_MAX / (impl->size * 8)) /
        -:   81:							 slots_per_page;
        1:   82:			data = malloc(alloc_size);
        1:   83:			if (data == NULL) {
    #####:   84:				SetErr(AllocErr);
    #####:   85:				return -1;
        -:   86:			}
        1:   87:			memset(data, '\0', alloc_size);
        1:   88:			mallocked = true;
        -:   89:		} else
    10003:   90:			break;
        1:   91:	} while (!CAS(&impl->data[i], &nulldata, data));
        -:   92:
        -:   93:	// now check our block
        -:   94:	byte *block;
    10004:   95:	byte *nullblock = NULL;
    10004:   96:	mallocked = false;
        -:   97:	do {
    10004:   98:		if (mallocked) {
    #####:   99:			size_t page_size = getpagesize();
    #####:  100:			size_t aligned_size =
    #####:  101:				((size_t)impl->size + page_size - 1) & ~(page_size - 1);
    #####:  102:			munmap(block, aligned_size);
        -:  103:		}
    10004:  104:		block = ALOAD(impl->data[i] + j);
    10004:  105:		if (block == NULL) {
      157:  106:			size_t page_size = getpagesize();
      157:  107:			int slots_per_page = page_size / impl->size;
     157*:  108:			if (slots_per_page == 0) slots_per_page = 1;
      157:  109:			int alloc_size = sizeof(byte *) * (UINT32_MAX / (impl->size * 8)) /
        -:  110:							 slots_per_page;
        -:  111:
      157:  112:			size_t aligned_size =
      157:  113:				((size_t)impl->size + page_size - 1) & ~(page_size - 1);
      157:  114:			block = mmap(NULL, aligned_size, PROT_READ | PROT_WRITE,
        -:  115:						 MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      157:  116:			if (block == NULL) {
    #####:  117:				SetErr(AllocErr);
    #####:  118:				return -1;
        -:  119:			}
      157:  120:			mallocked = true;
        -:  121:		} else
     9847:  122:			break;
      157:  123:	} while (!CAS(impl->data[i] + j, &nullblock, block));
        -:  124:
    10004:  125:	return 0;
        -:  126:}
        -:  127:
    10004:  128:Ptr memmap_allocate(MemMap *mm) {
        -:  129:	int i, j, k;
        -:  130:	unsigned long long *itt, nitt, v;
        -:  131:	MemMapImpl *impl;
        -:  132:
    10004:  133:	i = j = k = 0;
    10004:  134:	impl = (MemMapImpl *)mm;
        -:  135:
        -:  136:	do {
        -:  137:		loop {
  786574*:  138:			if (memmap_allocate_bitmap(impl, i)) return null;
   786574:  139:			itt = (impl->bitmap[i] + j);
   786574:  140:			if ((v = ALOAD(itt)) != ((unsigned long long)0) - 1) break;
   776570:  141:			if (++j >= MEM_MAP_NUM_CHUNKS) {
    #####:  142:				j = 0;
    #####:  143:				i++;
        -:  144:			}
        -:  145:		}
    10004:  146:		k = 0;
   324707:  147:		while ((v & (0x1ULL << k)) != 0) k++;
    10004:  148:		nitt = v | (0x1ULL << k);
   10004*:  149:		if (memmap_check_data(impl, i, j, k)) return null;
    10004:  150:	} while (!CAS(itt, &v, nitt));
    10004:  151:	return ((i << 19) | (j << 6) | k);
        -:  152:}
        -:  153:
        3:  154:void memmap_free(MemMap *mm, Ptr ptr) {
       3*:  155:	if (ptr == null) panic("attempt to free null!");
        3:  156:	MemMapImpl *impl = (MemMapImpl *)mm;
        -:  157:	unsigned long long nv, *v, vo;
        -:  158:	do {
        3:  159:		v = impl->bitmap[ptr >> 19] + (ptr >> 6);
        3:  160:		vo = ALOAD((unsigned long long *)(v));
       3*:  161:		if ((vo & (0x1ULL << (ptr & 0x3F))) == 0) panic("double free attempt!");
        3:  162:		nv = vo & ~(0x1ULL << (ptr & 0x3F));
        3:  163:	} while (!CAS(&*v, &vo, nv));
        3:  164:}
        -:    0:Source:orbtree.c
        -:    0:Graph:orbtree.gcno
        -:    0:Data:orbtree.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/orbtree.h>
        -:   16:
    #####:   17:OrbTree orbtree_create(int (*search)(const OrbTreeNode *root, const void *value,
        -:   18:									 OrbTreeNodePair *retval)) {
    #####:   19:	return NULL;
        -:   20:}
        -:   21:
    #####:   22:OrbTreeNode *orbtree_get(const OrbTree *ptr, const void *value) {
    #####:   23:	return NULL;
        -:   24:}
    #####:   25:OrbTreeNode *orbtree_put(OrbTree *ptr, OrbTreeNode *value) {
    #####:   26:	return NULL;
        -:   27:}
        -:   28:
    #####:   29:OrbTreeNode *orbtree_remove(const OrbTree *ptr, const void *value) {
    #####:   30:	return NULL;
        -:   31:}
        -:    0:Source:print_util.c
        -:    0:Graph:print_util.gcno
        -:    0:Data:print_util.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:
        -:   18:// currently using stdio, will move to write
        -:   19:#include <stdio.h>
        -:   20:
    #####:   21:void __attribute__((no_return)) panic(const char *fmt, ...) {
        -:   22:	char buf[1024];
        -:   23:	__builtin_va_list args;
    #####:   24:	print("Panic: ");
    #####:   25:	__builtin_va_start(args, fmt);
    #####:   26:	vfprintf(stderr, fmt, args);
        -:   27:	// vsnprintf(buf, 1024, fmt, args);
    #####:   28:	__builtin_va_end(args);
    #####:   29:	fprintf(stderr, "\n");
        -:   30:
    #####:   31:	exit(-1);
        -:   32:}
        -:   33:
        2:   34:int println(const char *fmt, ...) {
        -:   35:	__builtin_va_list args;
        2:   36:	__builtin_va_start(args, fmt);
        2:   37:	vfprintf(stderr, fmt, args);
        2:   38:	__builtin_va_end(args);
        2:   39:	fprintf(stderr, "\n");
        2:   40:	return 0;
        -:   41:}
        -:   42:
    #####:   43:int print(const char *fmt, ...) {
        -:   44:	__builtin_va_list args;
    #####:   45:	__builtin_va_start(args, fmt);
    #####:   46:	vfprintf(stderr, fmt, args);
    #####:   47:	__builtin_va_end(args);
    #####:   48:	return 0;
        -:   49:}
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/lock.h>
        -:   18:#include <base/macros.h>
        -:   19:#include <base/osdef.h>
        -:   20:#include <base/print_util.h>
        -:   21:#include <base/slabs.h>
        -:   22:
        -:   23:typedef struct SlabImpl {
        -:   24:	struct SlabImpl *next;
        -:   25:	byte data[];
        -:   26:} SlabImpl;
        -:   27:
 83886081:   28:byte *slab_get(Slab s) {
 83886081:   29:	return s->data;
        -:   30:}
        -:   31:
        2:   32:unsigned long long *slab_aux(Slab s) {
        2:   33:	return (unsigned long long *)&s->next;
        -:   34:}
        -:   35:
        -:   36:SlabImpl slab_allocated_impl = {.next = NULL};
        -:   37:Slab slab_allocated_reqd = &slab_allocated_impl;
        -:   38:#define SLAB_ALLOCATED slab_allocated_reqd
        -:   39:
      110:   40:Slab slab_allocator_grow(SlabAllocator *sa) {
      110:   41:	if (AADD(&sa->total_slabs, 1) > sa->max_total_slabs) {
    #####:   42:		ASUB(&sa->total_slabs, 1);
    #####:   43:		SetErr(CapacityExceeded);
    #####:   44:		return NULL;
        -:   45:	}
      110:   46:	Slab ret = malloc(sizeof(SlabImpl) + sa->slab_size);
      110:   47:	if (ret == NULL) {
    #####:   48:		SetErr(AllocErr);
    #####:   49:		ASUB(&sa->total_slabs, 1);
    #####:   50:		return NULL;
        -:   51:	}
      110:   52:	if (sa->free_check) ret->next = SLAB_ALLOCATED;
      110:   53:	return ret;
        -:   54:}
        -:   55:
        3:   56:void slab_allocator_cleanup(SlabAllocator *sa) {
        3:   57:	Slab itt = sa->head;
      112:   58:	while (itt) {
      109:   59:		Slab to_delete = itt;
      109:   60:		itt = itt->next;
      109:   61:		free(to_delete);
        -:   62:	}
        3:   63:}
        -:   64:
        -:   65:// initialize slab allocator as a michael-scott queue with specified slab_size
        4:   66:int slab_allocator_init(SlabAllocator *sa, unsigned int slab_size,
        -:   67:						unsigned long long max_free_slabs,
        -:   68:						unsigned long long max_total_slabs, bool free_check) {
        4:   69:	Slab s = malloc(sizeof(SlabImpl) + slab_size);
        4:   70:	if (s == NULL) {
    #####:   71:		SetErr(AllocErr);
    #####:   72:		return -1;
        -:   73:	}
        4:   74:	ASTORE(&sa->free_size, 1);
        4:   75:	ASTORE(&sa->total_slabs, 1);
        4:   76:	sa->slab_size = slab_size;
        4:   77:	sa->max_free_slabs = max_free_slabs;
        4:   78:	sa->max_total_slabs = max_total_slabs;
        4:   79:	sa->free_check = free_check;
        4:   80:	s->next = NULL;
        4:   81:	sa->head = sa->tail = s;
        4:   82:	return 0;
        -:   83:}
        -:   84:
        -:   85:// allocate is dequeue. If null "grow" by mallocing a slab.
 41943151:   86:Slab slab_allocator_allocate(SlabAllocator *sa) {
        -:   87:	Slab head, tail, next, ret;
        -:   88:	loop {
 41943151:   89:		head = sa->head;
 41943151:   90:		tail = sa->tail;
 41943151:   91:		next = head->next;
 41943151:   92:		if (head == sa->head) {
 41943151:   93:			if (head == tail) {
      110:   94:				if (next == NULL) {
      110:   95:					ret = slab_allocator_grow(sa);
      110:   96:					return ret;
        -:   97:				}
    #####:   98:				CAS_SEQ(&sa->tail, &tail, next);
        -:   99:			} else {
 41943041:  100:				ret = head;
 41943041:  101:				if (CAS_SEQ(&sa->head, &head, next)) break;
        -:  102:			}
        -:  103:		}
        -:  104:	}
        -:  105:
 41943041:  106:	ASUB(&sa->free_size, 1);
 41943041:  107:	if (sa->free_check) ASTORE(&ret->next, SLAB_ALLOCATED);
 41943041:  108:	return ret;
        -:  109:}
        -:  110:
        -:  111:// free is enqueue.
 41943148:  112:void slab_allocator_free(SlabAllocator *sa, Slab slab) {
 41943148:  113:	if (sa->free_check && !CAS(&slab->next, &SLAB_ALLOCATED, NULL))
    #####:  114:		panic("Double free attempt! %p %p", &slab->next, &SLAB_ALLOCATED);
 41943148:  115:	else if (!sa->free_check)
        2:  116:		slab->next = NULL;
 41943148:  117:	if (AADD(&sa->free_size, 1) > sa->max_free_slabs) {
    #####:  118:		free(slab);
    #####:  119:		ASUB(&sa->total_slabs, 1);
    #####:  120:		return;
        -:  121:	}
        -:  122:
        -:  123:	Slab tail, next;
        -:  124:
        -:  125:	loop {
 41943148:  126:		tail = sa->tail;
 41943148:  127:		next = tail->next;
 41943148:  128:		if (tail == sa->tail) {
 41943148:  129:			if (next == NULL) {
 41943148:  130:				if (CAS_SEQ(&tail->next, &next, slab)) {
 41943148:  131:					CAS_SEQ(&sa->tail, &tail, slab);
 41943148:  132:					break;
        -:  133:				}
        -:  134:			} else {
    #####:  135:				CAS_SEQ(&sa->tail, &tail, next);
        -:  136:			}
        -:  137:		}
        -:  138:	}
        -:  139:}
        -:  140:
 10485764:  141:unsigned long long slab_allocator_free_size(SlabAllocator *sa) {
 10485764:  142:	return ALOAD(&sa->free_size);
        -:  143:}
 10485764:  144:unsigned long long slab_allocator_total_slabs(SlabAllocator *sa) {
 10485764:  145:	return ALOAD(&sa->total_slabs);
        -:  146:}
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/types.h>
        -:   18:
       14:   19:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   20:#if !defined(__x86_64__) && !defined(_M_X64) && !defined(__aarch64__)
        -:   21:	panic("Supported architectures: __x86_64__, _M_X64, and __aarch64__");
        -:   22:#endif	// arch
        -:   23:
        -:   24:	// check size_t
        -:   25:	if (__SIZEOF_SIZE_T__ != 8) panic("size_t must be 8 bytes. Invalid arch!");
        -:   26:	// check primitive types
        -:   27:	if (sizeof(byte) != 1) panic("byte must be 1 byte. Invalid arch!");
        -:   28:
        -:   29:	if (sizeof(int64) != 8) panic("must be 8 bytes. Invalid arch!");
        -:   30:
        -:   31:	if (sizeof(int) != 4) panic("int must be 4 bytes. Invalid arch!");
        -:   32:
        -:   33:	if (sizeof(float64) != 8) panic("float64 must be 8 bytes. Invalid arch!");
        -:   34:
        -:   35:	if (sizeof(bool) != 1) panic("bool must be 1 byte. Invalid arch!");
        -:   36:
        -:   37:	// little endian check
       14:   38:	int test = 0x1;
       14:   39:	if (*(byte *)&test != 0x1) {
    #####:   40:		panic("Big endian is not supported!");
        -:   41:	}
       14:   42:}
        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:3
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <main/main.h>
        -:   16:
    #####:   17:int real_main(int argc, char **argv) {
    #####:   18:	return 0;
        -:   19:}
