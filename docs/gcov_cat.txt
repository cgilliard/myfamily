        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:3
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <args/args.h>
        -:   16:#include <assert.h>
        -:   17:#include <base/misc.h>
        -:   18:#include <base/path.h>
        -:   19:#include <crypto/sha3.h>
        -:   20:#include <limits.h>
        -:   21:#include <main/main.h>
        -:   22:#include <stdio.h>
        -:   23:#include <string.h>
        -:   24:
        -:   25:bool __is_debug_real_main_res_mkdir = false;
        -:   26:
       16:   27:void write_to_disk(const char *dir, const char *file_name, const unsigned char *data, u64 size) {
        -:   28:	char path[PATH_MAX + 1];
       16:   29:	snprintf(path, sizeof(path), "%s/%s", dir, file_name);
       16:   30:	Path ensure_parent;
       16:   31:	path_for(&ensure_parent, path);
       16:   32:	const char *pfile_name = path_file_name(&ensure_parent);
        -:   33:	char pfile_name_copy[PATH_MAX + 1];
       16:   34:	strcpy(pfile_name_copy, pfile_name);
       16:   35:	path_pop(&ensure_parent);
       16:   36:	path_canonicalize(&ensure_parent);
       16:   37:	path_mkdir(&ensure_parent, 0700, true);
       16:   38:	path_push(&ensure_parent, pfile_name_copy);
       16:   39:	MYFILE *f = myfopen(&ensure_parent, "wb");
       16:   40:	if (f) {
       15:   41:		myfwrite(data, 1, size, f);
       15:   42:		myfclose(f);
        -:   43:	} else {
        1:   44:		exit_error("Could not open file for writing");
        -:   45:	}
       16:   46:}
        -:   47:
        4:   48:bool check_build_id(const char *config_dir) {
        4:   49:	Path bid_file;
        4:   50:	path_for(&bid_file, config_dir);
        4:   51:	path_push(&bid_file, "build_id");
        4:   52:	path_canonicalize(&bid_file);
        -:   53:	// check build id
        4:   54:	MYFILE *fp = myfopen(&bid_file, "r");
        4:   55:	if (!fp) {
        1:   56:		exit_error("could not open the build file");
        1:   57:		return false;
        -:   58:	}
        -:   59:	char bid_file_contents[1024];
        3:   60:	size_t rlen = read_all(bid_file_contents, 1, 100, fp);
        3:   61:	bid_file_contents[rlen] = 0;
        3:   62:	myfclose(fp);
        3:   63:	return !strcmp(bid_file_contents, get_build_id());
        -:   64:}
        -:   65:
        6:   66:void setup_config_dir(const char *config_dir) {
        6:   67:	Path cd;
        6:   68:	path_for(&cd, config_dir);
        6:   69:	path_canonicalize(&cd);
        6:   70:	if (path_exists(&cd)) {
        2:   71:		if (check_build_id(config_dir))
        1:   72:			return;
        1:   73:		remove_directory(&cd, false);
        -:   74:	}
        5:   75:	fprintf(stderr, "Installing config directory at %s. Build id = %s.\n", config_dir,
        -:   76:			get_build_id());
        -:   77:
        5:   78:	if (!path_mkdir(&cd, 0700, false)) {
        1:   79:		exit_error("Could not create config directory at path [%s].", path_to_string(&cd));
        1:   80:		return;
        -:   81:	}
        -:   82:
        4:   83:	Path rd;
        4:   84:	path_copy(&rd, &cd);
        4:   85:	path_push(&rd, "resources");
        -:   86:
        4:   87:	if (__is_debug_real_main_res_mkdir || !path_mkdir(&rd, 0700, true)) {
        1:   88:		exit_error("Could not create resources directory at path [%s].", path_to_string(&rd));
        1:   89:		return;
        -:   90:	}
        -:   91:
       15:   92:	BUILD_RESOURCE_DIR(path_to_string(&rd), fam);
        3:   93:	WRITE_BUILD_ID(config_dir);
        -:   94:}
        -:   95:
        1:   96:void build_args(Args *args, int argc, char **argv) {
        1:   97:	SubCommand sc1;
       1*:   98:	assert(!sub_command_build(&sc1, "sc1", "sc1 help", 1, 2, "<arg doc>"));
        1:   99:	ArgsParam p1;
       1*:  100:	assert(!args_param_build(&p1, "name", "name help here", "n", false, false, "myname"));
        1:  101:	sub_command_add_param(&sc1, &p1);
        -:  102:
        1:  103:	ArgsParam p2;
        1:  104:	args_param_build(&p2, "name2", "name2 help here", "x", true, false, NULL);
        -:  105:
        1:  106:	args_build(args, "prog", "ver1.0", "me", 2, 3, "Darwin arm64");
        1:  107:	args_add_param(args, &p2);
        1:  108:	args_add_sub_command(args, &sc1);
        1:  109:}
        -:  110:
        1:  111:int real_main(int argc, char **argv) {
        1:  112:	Args args;
        1:  113:	build_args(&args, argc, argv);
        -:  114:
        1:  115:	setup_config_dir(DEFAULT_CONFIG_DIR);
        1:  116:	return 0;
        -:  117:}
        -:    0:Source:args.c
        -:    0:Graph:args.gcno
        -:    0:Data:args.gcda
        -:    0:Runs:20
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <args/args.h>
        -:   16:#include <base/colors.h>
        -:   17:#include <base/misc.h>
        -:   18:#include <base/resources.h>
        -:   19:#include <errno.h>
        -:   20:#include <stdarg.h>
        -:   21:#include <stdio.h>
        -:   22:#include <stdlib.h>
        -:   23:#include <string.h>
        -:   24:
       54:   25:bool args_param_copy(ArgsParam *dst, const ArgsParam *src) {
       54:   26:	dst->help = mymalloc(strlen(src->help) + 1);
       54:   27:	if (dst->help == NULL)
        1:   28:		return false;
        -:   29:
       53:   30:	if (src->default_value) {
       40:   31:		dst->default_value = mymalloc(strlen(src->default_value) + 1);
       40:   32:		if (dst->default_value == NULL) {
        1:   33:			myfree(dst->help);
        1:   34:			return false;
        -:   35:		}
        -:   36:	}
        -:   37:
       52:   38:	strcpy(dst->name, src->name);
       52:   39:	strcpy(dst->help, src->help);
       52:   40:	strcpy(dst->short_name, src->short_name);
       52:   41:	dst->takes_value = src->takes_value;
       52:   42:	dst->multiple = src->multiple;
       52:   43:	if (src->default_value)
       39:   44:		strcpy(dst->default_value, src->default_value);
        -:   45:	else
       13:   46:		dst->default_value = NULL;
        -:   47:
       52:   48:	return true;
        -:   49:}
        -:   50:
       72:   51:void args_param_cleanup(ArgsParamImpl *ptr) {
       72:   52:	if (ptr->help) {
       71:   53:		myfree(ptr->help);
       71:   54:		ptr->help = NULL;
        -:   55:	}
       72:   56:	if (ptr->default_value) {
       52:   57:		myfree(ptr->default_value);
       52:   58:		ptr->default_value = NULL;
        -:   59:	}
       72:   60:}
        -:   61:
       32:   62:int args_param_build(ArgsParam *ptr, const char *name, const char *help, const char *short_name,
        -:   63:					 const bool takes_value, const bool multiple, const char *default_value) {
       32:   64:	if (ptr == NULL || name == NULL || help == NULL || short_name == NULL) {
        1:   65:		print_error("Input may not be NULL");
        1:   66:		errno = EINVAL;
        1:   67:		return -1;
        -:   68:	}
        -:   69:
       31:   70:	if (strlen(name) > ARGS_MAX_ARGUMENT_NAME_LENGTH ||
       30:   71:		strlen(short_name) > ARGS_MAX_ARGUMENT_NAME_LENGTH) {
        1:   72:		print_error("Input too long");
        1:   73:		errno = EINVAL;
        1:   74:		return -1;
        -:   75:	}
        -:   76:
       30:   77:	u64 help_len = strlen(help);
       30:   78:	u64 default_value_len = 0;
       30:   79:	if (default_value)
       20:   80:		default_value_len = strlen(default_value);
        -:   81:
       30:   82:	ptr->help = mymalloc(sizeof(char) * (help_len + 1));
       30:   83:	if (default_value)
       20:   84:		ptr->default_value = mymalloc(sizeof(char) * (default_value_len + 1));
        -:   85:
       30:   86:	if (ptr->help == NULL || (ptr->default_value == NULL && default_value)) {
        1:   87:		print_error("Input may not be NULL");
        1:   88:		args_param_cleanup(ptr);
        1:   89:		return -1;
        -:   90:	}
        -:   91:
       29:   92:	strcpy(ptr->name, name);
       29:   93:	strcpy(ptr->short_name, short_name);
       29:   94:	strcpy(ptr->help, help);
       29:   95:	if (default_value)
       19:   96:		strcpy(ptr->default_value, default_value);
        -:   97:	else
       10:   98:		ptr->default_value = NULL;
       29:   99:	ptr->takes_value = takes_value;
       29:  100:	ptr->multiple = multiple;
        -:  101:
       29:  102:	return 0;
        -:  103:}
        -:  104:
       49:  105:bool sub_command_copy(SubCommand *dst, const SubCommand *src) {
       49:  106:	if (src->help == NULL)
        2:  107:		return false;
       47:  108:	dst->help = mymalloc(strlen(src->help) + 1);
       47:  109:	if (dst->help == NULL)
        1:  110:		return false;
        -:  111:
       46:  112:	if (src->arg_doc) {
       45:  113:		dst->arg_doc = mymalloc(strlen(src->arg_doc) + 1);
       45:  114:		if (dst->arg_doc == NULL) {
        1:  115:			myfree(dst->help);
        1:  116:			return false;
        -:  117:		}
        -:  118:	}
        -:  119:
       45:  120:	if (src->param_count == 0) {
       32:  121:		dst->param_count = 0;
       32:  122:		dst->is_specified = NULL;
       32:  123:		dst->params = NULL;
        -:  124:	} else {
       13:  125:		dst->params = mymalloc(sizeof(ArgsParam) * src->param_count);
       13:  126:		dst->is_specified = mymalloc(sizeof(bool) * src->param_count);
        -:  127:
       13:  128:		if (dst->params == NULL || dst->is_specified == NULL) {
        2:  129:			if (dst->params)
        1:  130:				myfree(dst->params);
        2:  131:			if (dst->is_specified)
        1:  132:				myfree(dst->is_specified);
        2:  133:			if (dst->help)
        2:  134:				myfree(dst->help);
        2:  135:			if (dst->arg_doc)
        2:  136:				myfree(dst->arg_doc);
        2:  137:			return false;
        -:  138:		}
        -:  139:
       11:  140:		memcpy(dst->is_specified, src->is_specified, sizeof(bool) * src->param_count);
       23:  141:		for (u32 i = 0; i < src->param_count; i++) {
       12:  142:			args_param_copy(&dst->params[i], &src->params[i]);
        -:  143:		}
       11:  144:		dst->param_count = src->param_count;
        -:  145:	}
        -:  146:
       43:  147:	strcpy(dst->name, src->name);
       43:  148:	strcpy(dst->help, src->help);
       43:  149:	if (src->arg_doc)
       42:  150:		strcpy(dst->arg_doc, src->arg_doc);
        -:  151:	else
        1:  152:		dst->arg_doc = NULL;
        -:  153:
       43:  154:	dst->min_args = src->min_args;
       43:  155:	dst->max_args = src->max_args;
        -:  156:
       43:  157:	return true;
        -:  158:}
        -:  159:
       77:  160:void sub_command_cleanup(SubCommandImpl *sc) {
      123:  161:	for (u32 i = 0; i < sc->param_count; i++) {
       46:  162:		args_param_cleanup(&sc->params[i]);
        -:  163:	}
       77:  164:	if (sc->params) {
       34:  165:		myfree(sc->params);
       34:  166:		sc->params = NULL;
        -:  167:	}
       77:  168:	if (sc->help) {
       77:  169:		myfree(sc->help);
       77:  170:		sc->help = NULL;
        -:  171:	}
       77:  172:	if (sc->arg_doc) {
       74:  173:		myfree(sc->arg_doc);
       74:  174:		sc->arg_doc = NULL;
        -:  175:	}
       77:  176:	if (sc->is_specified) {
       34:  177:		myfree(sc->is_specified);
       34:  178:		sc->is_specified = NULL;
        -:  179:	}
       77:  180:}
        -:  181:
       45:  182:int sub_command_build(SubCommand *sc, const char *name, const char *help, const u32 min_args,
        -:  183:					  const u32 max_args, const char *arg_doc) {
       45:  184:	if (sc == NULL || name == NULL || help == NULL || min_args > max_args) {
        2:  185:		errno = EINVAL;
        2:  186:		print_error("Invalid input");
        2:  187:		return -1;
        -:  188:	}
       43:  189:	sc->params = NULL;
       43:  190:	sc->help = NULL;
       43:  191:	sc->arg_doc = NULL;
       43:  192:	sc->is_specified = NULL;
       43:  193:	sc->param_count = 0;
        -:  194:
       43:  195:	if (strlen(name) > ARGS_MAX_SUBCOMMAND_LENGTH || min_args > max_args) {
        1:  196:		print_error("Invalid input");
        1:  197:		errno = EINVAL;
        1:  198:		return -1;
        -:  199:	}
        -:  200:
       42:  201:	if (help) {
       42:  202:		sc->help = mymalloc(sizeof(char) * strlen(help) + 1);
       42:  203:		if (sc->help == NULL) {
        1:  204:			print_error("Could not allocate sufficient memory");
        1:  205:			return -1;
        -:  206:		}
       41:  207:		strcpy(sc->help, help);
        -:  208:	}
        -:  209:
       41:  210:	if (arg_doc) {
       40:  211:		sc->arg_doc = mymalloc(sizeof(char) * strlen(arg_doc) + 1);
       40:  212:		if (sc->arg_doc == NULL) {
        1:  213:			print_error("Could not allocate sufficient memory");
        1:  214:			sub_command_cleanup(sc);
        1:  215:			return -1;
        -:  216:		}
       39:  217:		strcpy(sc->arg_doc, arg_doc);
        -:  218:	}
        -:  219:
       40:  220:	strcpy(sc->name, name);
       40:  221:	sc->min_args = min_args;
       40:  222:	sc->max_args = max_args;
        -:  223:
       40:  224:	return 0;
        -:  225:}
        -:  226:
       44:  227:int sub_command_add_param(SubCommand *sc, const ArgsParam *ap) {
       44:  228:	if (sc->params) {
        -:  229:		// already exists so realloc
        -:  230:		void *tmp;
       13:  231:		tmp = myrealloc(sc->params, sizeof(ArgsParam) * (sc->param_count + 1));
       13:  232:		if (tmp == NULL) {
        1:  233:			print_error("Could not allocate sufficient memory");
        1:  234:			return -1;
        -:  235:		}
       12:  236:		sc->params = tmp;
       12:  237:		tmp = myrealloc(sc->is_specified, sizeof(bool) * (sc->param_count + 1));
       12:  238:		if (tmp == NULL) {
        1:  239:			print_error("Could not allocate sufficient memory");
        1:  240:			return -1;
        -:  241:		}
       11:  242:		sc->is_specified = tmp;
        -:  243:
       11:  244:		args_param_copy(&sc->params[sc->param_count], ap);
       11:  245:		sc->is_specified[sc->param_count] = false;
        -:  246:
       11:  247:		sc->param_count += 1;
        -:  248:	} else {
       31:  249:		sc->params = mymalloc(sizeof(ArgsParam));
       31:  250:		sc->is_specified = mymalloc(sizeof(bool));
        -:  251:
       31:  252:		if (sc->params == NULL || sc->is_specified == NULL) {
        2:  253:			if (sc->params) {
        1:  254:				myfree(sc->params);
        1:  255:				sc->params = NULL;
        -:  256:			}
        2:  257:			if (sc->is_specified) {
        1:  258:				myfree(sc->is_specified);
        1:  259:				sc->is_specified = NULL;
        -:  260:			}
        2:  261:			print_error("Could not allocate sufficient memory");
        2:  262:			return -1;
        -:  263:		}
        -:  264:
       29:  265:		args_param_copy(&sc->params[sc->param_count], ap);
       29:  266:		sc->is_specified[sc->param_count] = false;
       29:  267:		sc->param_count += 1;
        -:  268:	}
       40:  269:	return 0;
        -:  270:}
        -:  271:
       24:  272:void args_cleanup(ArgsImpl *ptr) {
       61:  273:	for (u32 i = 0; i < ptr->subs_count; i++) {
       37:  274:		sub_command_cleanup(&ptr->subs[i]);
        -:  275:	}
       24:  276:	ptr->subs_count = 0;
       24:  277:	if (ptr->subs) {
       24:  278:		myfree(ptr->subs);
       24:  279:		ptr->subs = NULL;
        -:  280:	}
      104:  281:	for (u64 i = 0; i < ptr->argc; i++) {
       80:  282:		myfree(ptr->argv[i]);
        -:  283:	}
       24:  284:	if (ptr->argc) {
       15:  285:		myfree(ptr->argv);
       15:  286:		ptr->argc = 0;
        -:  287:	}
       24:  288:}
        -:  289:
       30:  290:int args_build(Args *args, const char *prog, const char *version, const char *author,
        -:  291:			   const u32 min_args, const u32 max_args, const char *arch) {
       30:  292:	if (prog == NULL || version == NULL || author == NULL) {
        1:  293:		print_error("Input may not be NULL");
        1:  294:		errno = EINVAL;
        1:  295:		return -1;
        -:  296:	}
        -:  297:
       29:  298:	if (strlen(prog) > ARGS_MAX_DETAIL_LENGTH || strlen(version) > ARGS_MAX_DETAIL_LENGTH ||
       28:  299:		strlen(author) > ARGS_MAX_DETAIL_LENGTH) {
        1:  300:		print_error("Input too long");
        1:  301:		errno = EINVAL;
        1:  302:		return -1;
        -:  303:	}
        -:  304:
        -:  305:	// first subcommand is our params (set it up)
       28:  306:	args->subs_count = 0;
       28:  307:	args->subs = NULL;
        -:  308:
        -:  309:	SubCommandImpl sc;
       28:  310:	if (sub_command_build(&sc, "", "", min_args, max_args, "")) {
        1:  311:		args->subs_count = 0;
        1:  312:		args->subs = NULL;
        1:  313:		return -1;
        -:  314:	}
       27:  315:	args_add_sub_command(args, &sc);
       27:  316:	sub_command_cleanup(&sc);
        -:  317:
       27:  318:	strcpy(args->prog, prog);
       27:  319:	strcpy(args->version, version);
       27:  320:	strcpy(args->author, author);
        -:  321:
       27:  322:	if (arch != NULL)
       23:  323:		strcpy(args->arch, arch);
        -:  324:	else
        4:  325:		strcpy(args->arch, "");
        -:  326:
       27:  327:	args->argv = NULL;
       27:  328:	args->argc = 0;
        -:  329:
       27:  330:	return 0;
        -:  331:}
        -:  332:
       27:  333:void args_exit_error(const Args *args, char *format, ...) {
        -:  334:	va_list va_args;
       27:  335:	va_start(va_args, format);
       27:  336:	fprintf(stderr, "%sError%s: ", BRIGHT_RED, RESET);
       27:  337:	vfprintf(stderr, format, va_args);
       27:  338:	fprintf(stderr, "\n\n");
       54:  339:	fprintf(stderr,
        -:  340:			"%sUSAGE%s:\n    %s%s%s [%sOPTIONS%s]\n\nFor more information "
        -:  341:			"try %s--help%s\n",
       27:  342:			DIMMED, RESET, BRIGHT_RED, args->prog, RESET, DIMMED, RESET, GREEN, RESET);
       27:  343:	va_end(va_args);
      27*:  344:	EXIT_ERR_IF_NO_DEBUG(-1);
       27:  345:}
        -:  346:
       30:  347:int args_add_param(Args *args, const ArgsParam *ap) {
       30:  348:	return sub_command_add_param(&args->subs[0], ap);
        -:  349:}
       45:  350:int args_add_sub_command(Args *args, SubCommand *sc) {
       45:  351:	if (args->subs_count == 0) {
       28:  352:		args->subs = mymalloc(sizeof(SubCommand));
       28:  353:		if (args->subs == NULL) {
        1:  354:			print_error("Could not allocate sufficient memory");
        1:  355:			return -1;
        -:  356:		}
        -:  357:	} else {
       17:  358:		void *tmp = myrealloc(args->subs, sizeof(SubCommand) * (args->subs_count + 1));
       17:  359:		if (tmp == NULL) {
        1:  360:			print_error("Could not allocate sufficient memory");
        1:  361:			return -1;
        -:  362:		}
       16:  363:		args->subs = tmp;
        -:  364:	}
        -:  365:
       43:  366:	bool ret = sub_command_copy(&args->subs[args->subs_count], sc);
       43:  367:	if (ret)
       42:  368:		args->subs_count++;
        -:  369:
       43:  370:	if (ret)
       42:  371:		return 0;
        -:  372:	else
        1:  373:		return -1;
        -:  374:}
        -:  375:
       10:  376:u64 args_subi_for(const Args *args, const char *sub) {
       10:  377:	u64 subi = 0;
       20:  378:	for (u64 i = 1; i < args->subs_count; i++) {
       10:  379:		if (!strcmp(sub, args->subs[i].name)) {
        9:  380:			subi = i;
        -:  381:		}
        -:  382:	}
       10:  383:	return subi;
        -:  384:}
        -:  385:
       45:  386:bool args_sub_takes_value(const Args *args, u64 subi, const char *name, bool is_short) {
       77:  387:	for (u64 i = 0; i < args->subs[subi].param_count; i++) {
       67:  388:		if (is_short && !strcmp(name, args->subs[subi].params[i].short_name)) {
       15:  389:			if (args->subs[subi].params[i].takes_value) {
       13:  390:				return true;
        -:  391:			} else
        2:  392:				break;
       52:  393:		} else if (!strcmp(name, args->subs[subi].params[i].name)) {
       20:  394:			if (args->subs[subi].params[i].takes_value) {
       18:  395:				return true;
        -:  396:			} else
        2:  397:				break;
        -:  398:		}
        -:  399:	}
       14:  400:	return false;
        -:  401:}
        -:  402:
       21:  403:bool args_check_option(const Args *args, u64 subi, const char *name, bool is_short,
        -:  404:					   const char *argv) {
       21:  405:	bool found = false;
       37:  406:	for (u64 j = 0; j < args->subs[subi].param_count; j++) {
       32:  407:		bool multi = args->subs[subi].params[j].multiple;
       32:  408:		if (is_short && !strcmp(args->subs[subi].params[j].short_name, name)) {
        7:  409:			found = true;
        7:  410:			if (args->subs[subi].is_specified[j] && !multi) {
        1:  411:				args_exit_error(args, "Option: %s was spsecified more than once ", argv);
        1:  412:				return false;
        -:  413:			}
        6:  414:			args->subs[subi].is_specified[j] = true;
        6:  415:			break;
       25:  416:		} else if (!is_short && !strcmp(args->subs[subi].params[j].name, name)) {
        9:  417:			found = true;
        9:  418:			if (args->subs[subi].is_specified[j] && !multi) {
        1:  419:				args_exit_error(args, "Option: %s was spsecified more than once ", argv);
        1:  420:				return false;
        -:  421:			}
        8:  422:			args->subs[subi].is_specified[j] = true;
        8:  423:			break;
        -:  424:		}
        -:  425:	}
       19:  426:	return found;
        -:  427:}
        -:  428:
       13:  429:void args_check_validity(const Args *args, int argc, const char **argv) {
        -:  430:	// check if there's a sub command and check arg count
       13:  431:	const char *sub = NULL;
       13:  432:	u32 arg_count = 0;
       13:  433:	u64 subi = 0;
       13:  434:	u64 sub_arg = UINT64_MAX;
       61:  435:	for (u64 i = 1; i < argc; i++) {
       48:  436:		u64 len = strlen(argv[i]);
       69:  437:		if (len > 0 && argv[i][0] == '-') {
       21:  438:			char name[len];
        -:  439:			bool is_short;
       21:  440:			bool found = false;
       21:  441:			if (len > 1 && args->argv[i][1] == '-') {
       14:  442:				strcpy(name, args->argv[i] + 2);
       14:  443:				is_short = false;
        -:  444:			} else {
        7:  445:				strcpy(name, args->argv[i] + 1);
        7:  446:				is_short = true;
        -:  447:			}
       21:  448:			if (args_sub_takes_value(args, subi, name, is_short)) {
       14:  449:				i += 1;
        -:  450:			}
        -:  451:		} else {
       27:  452:			if (!sub && args->subs_count > 1) {
       10:  453:				sub = argv[i];
       10:  454:				sub_arg = i;
       10:  455:				subi = args_subi_for(args, sub);
        -:  456:			} else
       17:  457:				arg_count += 1;
        -:  458:		}
        -:  459:	}
        -:  460:
       13:  461:	u64 sub_index = 0;
       13:  462:	if (sub) {
        -:  463:		// there's a sub so validate it
       10:  464:		bool valid = false;
       11:  465:		for (u64 i = 1; i < args->subs_count; i++) {
       10:  466:			if (!strcmp(sub, args->subs[i].name)) {
        9:  467:				valid = true;
        9:  468:				if (arg_count > args->subs[i].max_args || arg_count < args->subs[i].min_args) {
        4:  469:					args_exit_error(args,
        -:  470:									"Incorrect number of "
        -:  471:									"arguments for sub command '%s' "
        -:  472:									"(%i specified). "
        -:  473:									"Number of arguments must be "
        -:  474:									"between %i and %i.",
        4:  475:									args->subs[i].name, arg_count, args->subs[i].min_args,
        4:  476:									args->subs[i].max_args);
        -:  477:				}
        9:  478:				sub_index = i;
        -:  479:
        9:  480:				break;
        -:  481:			}
        -:  482:		}
       10:  483:		if (!valid) {
        1:  484:			args_exit_error(args, "Unknown SubCommand \"%s\"", sub);
        -:  485:		}
        3:  486:	} else if (args->subs_count > 1) {
        1:  487:		args_usage(args, NULL);
        -:  488:	} else {
        -:  489:		// no sub commands so we check the base min/max args.
        -:  490:		// check number of args
       2*:  491:		if (arg_count > args->subs[0].max_args || arg_count < args->subs[0].min_args) {
        2:  492:			args_exit_error(args,
        -:  493:							"Incorrect number of arguments "
        -:  494:							"(%i specified). "
        -:  495:							"Number of arguments must be "
        -:  496:							"between %i and %i.",
        2:  497:							arg_count, args->subs[0].min_args, args->subs[0].max_args);
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	// check options
       60:  502:	for (u64 i = 1; i < argc; i++) {
        -:  503:		u64 subi;
       48:  504:		if (i <= sub_arg) {
       29:  505:			subi = 0;
        -:  506:		} else {
       19:  507:			subi = sub_index;
        -:  508:		}
        -:  509:
       48:  510:		u64 len = strlen(argv[i]);
       48:  511:		if (len > 0 && argv[i][0] == '-') {
        -:  512:			// option to check
       21:  513:			char name[len];
        -:  514:			bool is_short;
       21:  515:			bool found = false;
       21:  516:			if (len > 1 && args->argv[i][1] == '-') {
       14:  517:				strcpy(name, args->argv[i] + 2);
       14:  518:				is_short = false;
        -:  519:			} else {
        7:  520:				strcpy(name, args->argv[i] + 1);
        7:  521:				is_short = true;
        -:  522:			}
        -:  523:
       21:  524:			found = args_check_option(args, subi, name, is_short, argv[i]);
       21:  525:			if (args_sub_takes_value(args, subi, name, is_short)) {
       14:  526:				i += 1;
        -:  527:			}
       21:  528:			if (!found) {
        7:  529:				if (subi == 0) {
        3:  530:					args_exit_error(args, "Unknown option: %s", argv[i]);
        -:  531:				} else {
        4:  532:					args_exit_error(args,
        -:  533:									"Unknown option: %s. Not valid for "
        -:  534:									"SubCommand \"%s\".",
        4:  535:									argv[i], args->subs[subi].name);
        -:  536:				}
        -:  537:			}
        -:  538:		}
        -:  539:	}
       12:  540:}
        -:  541:
        5:  542:void process_lines(Args *args, const char *arg1, char config_file[], size_t fsize) {
        -:  543:
        5:  544:	args->argv = mymalloc(sizeof(char *));
        5:  545:	if (args->argv == NULL) {
        1:  546:		args_exit_error(args, "Could not allocate sufficient memory");
        1:  547:		return;
        -:  548:	}
        -:  549:
        4:  550:	args->argv[0] = mymalloc(sizeof(char) * (strlen(arg1) + 1));
        4:  551:	if (args->argv[0] == NULL) {
        1:  552:		myfree(args->argv);
        1:  553:		args_exit_error(args, "Could not allocate sufficient memory");
        1:  554:		return;
        -:  555:	}
        3:  556:	strcpy(args->argv[0], arg1);
        -:  557:
        3:  558:	args->argc = 1;
        -:  559:
        -:  560:	// Use strtok to split the string into lines
        3:  561:	char *line = strtok(config_file, "\n");
        -:  562:
        8:  563:	while (line != NULL) {
        -:  564:		// allow for comments using '#'.
       41:  565:		for (int i = 0; i < strlen(line); i++) {
       37:  566:			if (line[i] == '#') {
        3:  567:				line[i] = 0;
        3:  568:				break;
        -:  569:			}
        -:  570:		}
        -:  571:		// trim
        7:  572:		char *trimmed = trim_whitespace(line);
        -:  573:
        7:  574:		if (*trimmed == '\0') {
        1:  575:			line = strtok(NULL, "\n"); // Skip empty lines
        1:  576:			continue;
        -:  577:		}
        -:  578:
        6:  579:		void *tmp = myrealloc(args->argv, sizeof(char *) * (args->argc + 1));
        6:  580:		if (tmp == NULL) {
        1:  581:			args_exit_error(args, "Could not allocate sufficient memory");
        1:  582:			return;
        -:  583:		}
        5:  584:		args->argv = tmp;
        5:  585:		args->argv[args->argc] = mymalloc(sizeof(char) * (strlen(trimmed) + 1));
        5:  586:		if (args->argv[args->argc] == NULL) {
        1:  587:			args_exit_error(args, "Could not allocate sufficient memory");
        1:  588:			return;
        -:  589:		}
        4:  590:		strcpy(args->argv[args->argc], trimmed);
        4:  591:		args->argc++;
        -:  592:
        -:  593:		// Get the next line
        4:  594:		line = strtok(NULL, "\n");
        -:  595:	}
        -:  596:}
        -:  597:
        -:  598:// Return 1 on successful file config created
        -:  599:// Return 0 if no file was specified
        -:  600:// Return -1 if an error occurs
       23:  601:int check_file_config(Args *args, const int argc, const char **argv) {
        -:  602:	// if file config is used there must be exactly two arguments fam @config.txt for example
       23:  603:	if (argc != 2)
       14:  604:		return 0;
        -:  605:
        -:  606:	// If the second argument does not start with an '@' symbol it is not a file.
        9:  607:	u64 arg_len = strlen(argv[1]);
        9:  608:	if (arg_len > 0 && argv[1][0] != '@') {
        3:  609:		return 0;
        -:  610:	}
        -:  611:
        -:  612:	// We have a file config process it.
        -:  613:	// get file size
        6:  614:	const char *file_name = argv[1] + 1;
        -:  615:
        6:  616:	Path path;
        6:  617:	path_for(&path, file_name);
        6:  618:	if (!path_exists(&path) || path_is_dir(&path)) {
        1:  619:		args_exit_error(args, "File not found at '%s'", path_to_string(&path));
        1:  620:		return -1;
        -:  621:	}
        5:  622:	u64 fsize = path_file_size(&path);
        -:  623:
        5:  624:	char config_file[fsize + 1];
        5:  625:	MYFILE *fp = myfopen(&path, "r");
        5:  626:	read_all(config_file, 1, fsize, fp);
        5:  627:	config_file[fsize] = 0;
        5:  628:	myfclose(fp);
        -:  629:
        5:  630:	process_lines(args, argv[0], config_file, fsize);
        -:  631:
        5:  632:	return 1;
        -:  633:}
        -:  634:
       24:  635:void args_init(Args *args, const int argc, const char **argv) {
        -:  636:	// check for NULLs (not allowed)
      120:  637:	for (int i = 0; i < argc; i++) {
       97:  638:		if (argv[i] == NULL) {
        1:  639:			args_exit_error(args, "argv may not have NULL value where i < argc");
        1:  640:			return;
        -:  641:		}
        -:  642:	}
        -:  643:	int r;
       23:  644:	if (check_file_config(args, argc, argv)) {
        -:  645:		// if true the file config as been loaded
        6:  646:		return;
        -:  647:	}
        -:  648:
        -:  649:	// scan args for an arg starting with '@'. Not valid here. It must be the first and only param.
        -:  650:	// Report error.
        -:  651:
        -:  652:	// If any args start with '@' it's an error because we already checked for file config
       82:  653:	for (u64 i = 1; i < argc; i++) {
       66:  654:		u64 arg_len = strlen(argv[i]);
       66:  655:		if (arg_len > 0 && argv[i][0] == '@') {
        1:  656:			args_exit_error(args,
        -:  657:							"File speicified with the '@' symbol must be the first argument.");
        1:  658:			return;
        -:  659:		}
        -:  660:	}
        -:  661:
       16:  662:	args->argc = argc;
       16:  663:	args->argv = mymalloc(sizeof(char *) * argc);
       16:  664:	if (args->argv == NULL) {
        1:  665:		args->argc = 0;
        1:  666:		args_exit_error(args, "Could not allocate sufficient memory");
        1:  667:		return;
        -:  668:	}
       91:  669:	for (u64 i = 0; i < argc; i++) {
       77:  670:		args->argv[i] = mymalloc(sizeof(char) * (strlen(argv[i]) + 1));
       77:  671:		if (args->argv[i] == NULL) {
        1:  672:			args->argc = 0;
        1:  673:			myfree(args->argv);
        1:  674:			args_exit_error(args, "Could not allocate sufficient memory");
        1:  675:			return;
        -:  676:		}
       76:  677:		strcpy(args->argv[i], argv[i]);
        -:  678:	}
        -:  679:
       75:  680:	for (u64 i = 1; i < argc; i++) {
       62:  681:		if (!strcmp(argv[i], "--version") || !strcmp(argv[i], "-V")) {
    #####:  682:			args_print_version(args);
        -:  683:		}
       62:  684:		if (!strcmp(argv[i], "--help") || !strcmp(argv[i], "-h")) {
        5:  685:			const char *sub = NULL;
        8:  686:			for (u64 j = 1; j < i; j++) {
        7:  687:				u64 len = strlen(argv[j]);
        7:  688:				if (len > 0) {
        7:  689:					if (argv[j][0] != '-') {
        4:  690:						sub = argv[j];
        4:  691:						break;
        3:  692:					} else {
        3:  693:						char name[len + 1];
        -:  694:						bool is_short;
        3:  695:						if (len > 1 && args->argv[j][1] == '-') {
        2:  696:							strcpy(name, args->argv[j] + 2);
        2:  697:							is_short = false;
        -:  698:						} else {
        1:  699:							strcpy(name, args->argv[j] + 1);
        1:  700:							is_short = true;
        -:  701:						}
        -:  702:
        3:  703:						u64 subi = 0;
        3:  704:						if (args_sub_takes_value(args, subi, name, is_short)) {
        3:  705:							j += 1;
        -:  706:						}
        -:  707:					}
        -:  708:				}
        -:  709:			}
        5:  710:			args_usage(args, sub);
        -:  711:		}
        -:  712:	}
        -:  713:
       13:  714:	args_check_validity(args, argc, argv);
        -:  715:}
        -:  716:
        -:  717:// Returns -2 if an error occurs and sets errno.
        -:  718:// Returns -1 if the value is not present.
        -:  719:// Returns 0 if the value is found (flags or max_value_len == 0)
        -:  720:// Returns the length of the value (takes_value true and max_value_len > 0)
       13:  721:int args_value_of(const Args *args, const char *param_name, char *value_buf,
       13:  722:				  const u64 max_value_len, const u32 index) {
       13:  723:	if (args == NULL || param_name == NULL) {
        1:  724:		errno = EINVAL;
        1:  725:		print_error("Input may not be NULL");
        1:  726:		return -2;
        -:  727:	}
       12:  728:	u64 plen = strlen(param_name);
        -:  729:
       12:  730:	char param_name_buf[plen + 3];
       12:  731:	strcpy(param_name_buf, "--");
       12:  732:	strcat(param_name_buf, param_name);
        -:  733:
       12:  734:	char short_name_buf[plen + 3];
       12:  735:	strcpy(short_name_buf, "-");
       12:  736:	bool found = false;
       12:  737:	char *default_value = NULL;
       12:  738:	bool takes_value = false;
        -:  739:
        -:  740:	// linear search through all elements. Potential to improve here.
       36:  741:	for (u64 i = 0; i < args->subs_count; i++) {
       48:  742:		for (u64 j = 0; j < args->subs[i].param_count; j++) {
       24:  743:			if (!strcmp(args->subs[i].params[j].name, param_name)) {
       17:  744:				found = true;
       17:  745:				strcat(short_name_buf, args->subs[i].params[j].short_name);
       17:  746:				default_value = args->subs[i].params[j].default_value;
       17:  747:				takes_value = args->subs[i].params[j].takes_value;
        -:  748:			}
        -:  749:		}
        -:  750:	}
        -:  751:
       12:  752:	if (!found) {
        1:  753:		print_error("Unknown parameter tested");
        1:  754:		errno = ENOENT;
        1:  755:		return -2;
        -:  756:	}
       11:  757:	u64 itt_index = 0;
       26:  758:	for (u64 i = 1; i < args->argc; i++) {
       23:  759:		if (!strcmp(args->argv[i], param_name_buf) || !strcmp(args->argv[i], short_name_buf)) {
        9:  760:			if (itt_index == index) {
        8:  761:				if (takes_value && i + 1 < args->argc) {
        4:  762:					if (value_buf == NULL) {
        1:  763:						errno = EINVAL;
        1:  764:						print_error("Input may not be NULL");
        1:  765:						return -2;
        -:  766:					}
        3:  767:					return snprintf(value_buf, max_value_len, "%s", args->argv[i + 1]);
        4:  768:				} else if (takes_value && max_value_len > 0) {
        2:  769:					if (value_buf == NULL) {
        1:  770:						errno = EINVAL;
        1:  771:						print_error("Input may not be NULL");
        1:  772:						return -2;
        -:  773:					}
        1:  774:					strcpy(value_buf, "");
        1:  775:					return 0;
        -:  776:				} else {
        2:  777:					return 0;
        -:  778:				}
        -:  779:			} else {
        1:  780:				itt_index += 1;
        -:  781:			}
        -:  782:		}
        -:  783:	}
        -:  784:
        3:  785:	if (default_value != NULL && index == 0) {
        2:  786:		if (value_buf == NULL && max_value_len > 0) {
        1:  787:			errno = EINVAL;
        1:  788:			print_error("Input may not be NULL");
        1:  789:			return -2;
        -:  790:		}
        1:  791:		return snprintf(value_buf, max_value_len, "%s", default_value);
        -:  792:	}
        -:  793:
        1:  794:	return -1;
        -:  795:}
        -:  796:
       14:  797:int args_get_argument(const Args *args, const u32 index, char *value_buf, const u64 max_value_len) {
       14:  798:	if (args == NULL) {
        1:  799:		print_error("Input may not be NULL");
        1:  800:		errno = EINVAL;
        1:  801:		return -2;
        -:  802:	}
       13:  803:	u64 index_itt = 0;
       49:  804:	for (u64 i = 1; i < args->argc; i++) {
       46:  805:		i32 len = strlen(args->argv[i]);
       62:  806:		if (len > 1 && args->argv[i][0] == '-') {
       16:  807:			char name[len];
        -:  808:			bool is_short;
       16:  809:			bool found = false;
       16:  810:			if (len > 1 && args->argv[i][1] == '-') {
       11:  811:				strcpy(name, args->argv[i] + 2);
       11:  812:				is_short = false;
        -:  813:			} else {
        5:  814:				strcpy(name, args->argv[i] + 1);
        5:  815:				is_short = true;
        -:  816:			}
        -:  817:
        -:  818:			// linear search through all elements. Potential to improve here.
       48:  819:			for (u64 k = 0; k < args->subs_count; k++) {
       59:  820:				for (u64 j = 0; j < args->subs[k].param_count; j++) {
       37:  821:					if (is_short && !strcmp(name, args->subs[k].params[j].short_name)) {
        5:  822:						if (args->subs[k].params[j].takes_value) {
        5:  823:							i += 1;
        5:  824:							found = true;
        5:  825:							break;
        -:  826:						}
       32:  827:					} else if (!strcmp(name, args->subs[k].params[j].name)) {
       11:  828:						if (args->subs[k].params[j].takes_value) {
        5:  829:							i += 1;
        5:  830:							found = true;
        5:  831:							break;
        -:  832:						}
        -:  833:					}
        -:  834:				}
        -:  835:			}
        -:  836:		} else {
       30:  837:			if (index_itt == index) {
       10:  838:				if (value_buf == NULL && max_value_len != 0) {
        1:  839:					print_error("Input may not be NULL");
        1:  840:					errno = EINVAL;
        1:  841:					return -2;
        -:  842:				}
        9:  843:				return snprintf(value_buf, max_value_len, "%s", args->argv[i]);
        -:  844:			}
       20:  845:			index_itt += 1;
        -:  846:		}
        -:  847:	}
        3:  848:	return -1;
        -:  849:}
        -:  850:
        1:  851:void args_print_version(const Args *args) {
        1:  852:	const char *prog = args->prog;
        1:  853:	const char *version = args->version;
        1:  854:	const char *arch = args->arch;
        1:  855:	if (strlen(arch) == 0) {
        1:  856:		arch = "";
        -:  857:	}
        1:  858:	fprintf(stderr, "%s%s%s %s%s%s (%s%s%s)\n", BRIGHT_RED, prog, RESET, CYAN, version, RESET,
        -:  859:			YELLOW, arch, RESET);
       1*:  860:	EXIT_ERR_IF_NO_DEBUG(0);
        1:  861:}
        -:  862:
       10:  863:void args_usage(const Args *args, const char *sub_command) {
       10:  864:	bool found = false;
       10:  865:	u64 subs_count = args->subs_count;
       10:  866:	u64 sub_index = 0;
        -:  867:
       10:  868:	if (sub_command) {
       12:  869:		for (u64 i = 1; i < subs_count; i++) {
        6:  870:			char *name = args->subs[i].name;
        6:  871:			if (!strcmp(name, sub_command)) {
        5:  872:				sub_index = i;
        5:  873:				found = true;
        -:  874:			}
        -:  875:		}
        -:  876:	} else // general help displayed
        4:  877:		found = true;
        -:  878:
       10:  879:	if (!found) {
        1:  880:		args_exit_error(args, "Unknown SubCommand \"%s\"", sub_command);
        1:  881:		return;
        -:  882:	}
        -:  883:
        9:  884:	u64 count = args->subs[0].param_count;
        9:  885:	u64 max_len = 0;
       24:  886:	for (u64 i = 0; i < count; i++) {
       15:  887:		bool takes_value = args->subs[0].params[i].takes_value;
       15:  888:		bool multi = args->subs[0].params[i].multiple;
       15:  889:		char *name = args->subs[0].params[i].name;
       15:  890:		char *short_name = args->subs[0].params[i].short_name;
        -:  891:		u64 len;
       15:  892:		if (!takes_value)
        4:  893:			len = snprintf(NULL, 0, "    -%s, --%s", short_name, name);
       11:  894:		else if (multi)
        3:  895:			len = snprintf(NULL, 0, "    -%s, --%s (<%s>, ...)", short_name, name, name);
        -:  896:		else
        8:  897:			len = snprintf(NULL, 0, "    -%s, --%s <%s>", short_name, name, name);
       15:  898:		if (len > max_len)
       11:  899:			max_len = len;
        -:  900:	}
        -:  901:
        9:  902:	max_len += 4;
        -:  903:
        9:  904:	if (max_len < 17)
        2:  905:		max_len = 17;
        -:  906:
        9:  907:	const char *prog = args->prog;
        9:  908:	const char *author = args->author;
        9:  909:	const char *version = args->version;
        -:  910:	char buffer[1025];
        -:  911:	char buffer2[1025];
        -:  912:	u64 i;
      324:  913:	for (i = 0; i < max_len - 13 && i < 1024; i++)
      315:  914:		buffer[i] = ' ';
        9:  915:	buffer[i] = 0;
        -:  916:
      297:  917:	for (i = 0; i < max_len - 16 && i < 1024; i++)
      288:  918:		buffer2[i] = ' ';
        9:  919:	buffer2[i] = 0;
        -:  920:	u64 sub_command_str_len;
        9:  921:	if (sub_command)
        5:  922:		sub_command_str_len = strlen(sub_command);
        -:  923:	else
        4:  924:		sub_command_str_len = 0;
        9:  925:	char sub_command_str[sub_command_str_len + 30];
        9:  926:	char *sub_arg_doc_str = "";
        -:  927:
        9:  928:	if (sub_command) {
        5:  929:		snprintf(sub_command_str, sub_command_str_len + 30, "%s%s%s", BRIGHT_RED, sub_command,
        -:  930:				 RESET);
        5:  931:		sub_arg_doc_str = args->subs[sub_index].arg_doc;
        -:  932:	} else {
        4:  933:		snprintf(sub_command_str, sub_command_str_len + 30, "[%sSUB_COMMAND%s]", DIMMED, RESET);
        -:  934:	}
        -:  935:
        9:  936:	fprintf(stderr,
        -:  937:			"%s%s%s %s%s%s\n%s%s%s\n\n%sUSAGE%s:\n    %s%s%s "
        -:  938:			"[%sCORE_OPTIONS%s] %s [%sSUB_OPTIONS%s] %s\n\n"
        -:  939:			"%sCORE_FLAGS%s:\n"
        -:  940:			"    %s-h%s, %s--help%s%sPrints help information\n"
        -:  941:			"    %s-V%s, %s--version%s%sPrints version "
        -:  942:			"information\n",
        -:  943:			CYAN, prog, RESET, YELLOW, version, RESET, GREEN, author, RESET, DIMMED, RESET,
        -:  944:			BRIGHT_RED, prog, RESET, DIMMED, RESET, sub_command_str, DIMMED, RESET, sub_arg_doc_str,
        -:  945:			DIMMED, RESET, CYAN, RESET, YELLOW, RESET, buffer, CYAN, RESET, YELLOW, RESET, buffer2);
        -:  946:
       24:  947:	for (u64 i = 0; i < count; i++) {
       15:  948:		bool takes_value = args->subs[0].params[i].takes_value;
       15:  949:		if (!takes_value) {
        4:  950:			char *name = args->subs[0].params[i].name;
        4:  951:			char *short_name = args->subs[0].params[i].short_name;
        4:  952:			char *help = args->subs[0].params[i].help;
        4:  953:			u64 len = snprintf(NULL, 0, "    -%s, --%s", short_name, name);
        4:  954:			if (len > max_len)
    #####:  955:				len = max_len;
        -:  956:			u64 i;
      458:  957:			for (i = 0; i < max_len - len && i < 1024; i++)
      454:  958:				buffer[i] = ' ';
        4:  959:			buffer[i] = 0;
        4:  960:			fprintf(stderr, "    %s-%s%s, %s--%s%s %s%s\n", CYAN, short_name, RESET, YELLOW, name,
        -:  961:					RESET, buffer, help);
        -:  962:		}
        -:  963:	}
        -:  964:
        9:  965:	if (count) {
        7:  966:		fprintf(stderr, "\n%sCORE_OPTIONS%s:\n", DIMMED, RESET);
        -:  967:
       22:  968:		for (u64 i = 0; i < count; i++) {
       15:  969:			bool takes_value = args->subs[0].params[i].takes_value;
       15:  970:			if (takes_value) {
       11:  971:				char *name = args->subs[0].params[i].name;
       11:  972:				char *short_name = args->subs[0].params[i].short_name;
       11:  973:				char *help = args->subs[0].params[i].help;
       11:  974:				bool multi = args->subs[0].params[i].multiple;
       11:  975:				char *default_value = args->subs[0].params[i].default_value;
        -:  976:				u64 default_value_str_len;
       11:  977:				if (default_value == NULL) {
        4:  978:					default_value_str_len = 1;
        -:  979:				} else {
        7:  980:					default_value_str_len = strlen(default_value) + 100;
        -:  981:				}
       11:  982:				char default_value_str[default_value_str_len];
       11:  983:				if (default_value == NULL)
        4:  984:					strcpy(default_value_str, "");
        -:  985:				else
        7:  986:					snprintf(default_value_str, default_value_str_len, " (default value: '%s')",
        -:  987:							 default_value);
        -:  988:
       11:  989:				if (multi) {
        3:  990:					u64 len = snprintf(NULL, 0, "    -%s, --%s <%s>, ...", short_name, name, name);
        3:  991:					if (len > max_len)
    #####:  992:						len = max_len;
        -:  993:					u64 i;
       21:  994:					for (i = 0; i < max_len - len && i < 1024; i++)
       18:  995:						buffer[i] = ' ';
        3:  996:					buffer[i] = 0;
        3:  997:					fprintf(stderr,
        -:  998:							"    %s-%s%s, %s--%s%s "
        -:  999:							"<%s>, "
        -: 1000:							"... %s%s%s\n",
        -: 1001:							CYAN, short_name, RESET, YELLOW, name, RESET, name, buffer, help,
        -: 1002:							default_value_str);
        -: 1003:				} else {
        -: 1004:
        8: 1005:					u64 len = snprintf(NULL, 0, "    -%s, --%s <%s>", short_name, name, name);
        8: 1006:					if (len > max_len)
    #####: 1007:						len = max_len;
        -: 1008:					u64 i;
       56: 1009:					for (i = 0; i < max_len - len && i < 1024; i++)
       48: 1010:						buffer[i] = ' ';
        8: 1011:					buffer[i] = 0;
        -: 1012:
        8: 1013:					fprintf(stderr,
        -: 1014:							"    %s-%s%s, %s--%s%s "
        -: 1015:							"<%s> "
        -: 1016:							"%s%s%s\n",
        -: 1017:							CYAN, short_name, RESET, YELLOW, name, RESET, name, buffer, help,
        -: 1018:							default_value_str);
        -: 1019:				}
        -: 1020:			}
        -: 1021:		}
        -: 1022:	}
        -: 1023:
        9: 1024:	if (subs_count > 1 && sub_command == NULL) {
        3: 1025:		fprintf(stderr, "\n%sSUB_COMMANDS%s:\n", DIMMED, RESET);
        6: 1026:		for (u64 i = 1; i < subs_count; i++) {
        -: 1027:
        3: 1028:			char *name = args->subs[i].name;
        3: 1029:			char *help = args->subs[i].help;
        3: 1030:			char *arg_doc = args->subs[i].arg_doc;
        -: 1031:
        3: 1032:			u64 len = strlen(name) + strlen(arg_doc) + 4;
        3: 1033:			if (len > max_len)
    #####: 1034:				len = max_len;
        -: 1035:			char buffer[1025];
        -: 1036:			u64 j;
      130: 1037:			for (j = 0; j < (max_len - len) && j < 1024; j++)
      127: 1038:				buffer[j] = ' ';
        3: 1039:			buffer[j] = 0;
        -: 1040:
        3: 1041:			fprintf(stderr, "    %s%s%s %s%s%s\n", CYAN, name, RESET, arg_doc, buffer, help);
        -: 1042:		}
        -: 1043:	}
        9: 1044:	if (sub_command) {
        5: 1045:		u64 param_index = 0;
       10: 1046:		for (u64 i = 1; i < subs_count; i++) {
        5: 1047:			char *name = args->subs[i].name;
        5: 1048:			if (!strcmp(name, sub_command)) {
        5: 1049:				param_index = i;
        -: 1050:			}
        -: 1051:		}
        -: 1052:
        5: 1053:		if (param_index > 0) {
        5: 1054:			count = args->subs[param_index].param_count;
        5: 1055:			fprintf(stderr, "\n%sSUB_FLAGS%s (%s%s%s):\n", DIMMED, RESET, BRIGHT_RED, sub_command,
        -: 1056:					RESET);
        -: 1057:
        9: 1058:			for (u64 i = 0; i < count; i++) {
        4: 1059:				char *name = args->subs[param_index].params[i].name;
        4: 1060:				char *short_name = args->subs[param_index].params[i].short_name;
        4: 1061:				bool takes_value = args->subs[param_index].params[i].takes_value;
        4: 1062:				char *help = args->subs[param_index].params[i].help;
        -: 1063:
        4: 1064:				if (!takes_value) {
        3: 1065:					u64 len = strlen(name) + 10;
        3: 1066:					if (len > max_len)
    #####: 1067:						len = max_len;
        -: 1068:					char buffer[1025];
        -: 1069:					u64 j;
       32: 1070:					for (j = 0; j < (max_len - len) && j < 1024; j++)
       29: 1071:						buffer[j] = ' ';
        3: 1072:					buffer[j] = 0;
        3: 1073:					fprintf(stderr,
        -: 1074:							"    %s-%s%s, "
        -: 1075:							"%s--%s%s%s %s\n",
        -: 1076:							CYAN, short_name, RESET, YELLOW, name, RESET, buffer, help);
        -: 1077:				}
        -: 1078:			}
        5: 1079:			fprintf(stderr, "\n%sSUB_OPTIONS%s (%s%s%s):\n", DIMMED, RESET, BRIGHT_RED, sub_command,
        -: 1080:					RESET);
        9: 1081:			for (u64 i = 0; i < count; i++) {
        4: 1082:				char *name = args->subs[param_index].params[i].name;
        4: 1083:				char *short_name = args->subs[param_index].params[i].short_name;
        4: 1084:				bool takes_value = args->subs[param_index].params[i].takes_value;
        4: 1085:				char *help = args->subs[param_index].params[i].help;
        4: 1086:				bool multiple = args->subs[param_index].params[i].multiple;
        -: 1087:
        4: 1088:				char *default_value = args->subs[param_index].params[i].default_value;
        -: 1089:				u64 default_value_str_len;
        4: 1090:				if (default_value == NULL) {
        1: 1091:					default_value_str_len = 1;
        -: 1092:				} else {
        3: 1093:					default_value_str_len = strlen(default_value) + 100;
        -: 1094:				}
        4: 1095:				char default_value_str[default_value_str_len];
        4: 1096:				if (default_value == NULL)
        1: 1097:					strcpy(default_value_str, "");
        -: 1098:				else
        3: 1099:					snprintf(default_value_str, default_value_str_len, " (default value: %s)",
        -: 1100:							 default_value);
        -: 1101:
        4: 1102:				if (takes_value) {
        1: 1103:					if (multiple) {
    #####: 1104:						u64 len = 2 * strlen(name) + 19;
        -: 1105:						char buffer[1025];
        -: 1106:						u64 j;
    #####: 1107:						if (len > max_len)
    #####: 1108:							len = max_len;
    #####: 1109:						for (j = 0; j < (max_len - len) && j < 1024; j++)
    #####: 1110:							buffer[j] = ' ';
    #####: 1111:						buffer[j] = ' ';
    #####: 1112:						buffer[j + 1] = 0;
    #####: 1113:						fprintf(stderr,
        -: 1114:								"    %s-%s%s, "
        -: 1115:								"%s--%s%s "
        -: 1116:								"<%s>, ...%s %s"
        -: 1117:								"%s\n",
        -: 1118:								CYAN, short_name, RESET, YELLOW, name, RESET, name, buffer, help,
        -: 1119:								default_value_str);
        -: 1120:					} else {
        1: 1121:						u64 len = 2 * strlen(name) + 13;
        -: 1122:						char buffer[1025];
        -: 1123:						u64 j;
        1: 1124:						if (len > max_len)
        1: 1125:							len = max_len;
       1*: 1126:						for (j = 0; j < (max_len - len) && j < 1024; j++)
    #####: 1127:							buffer[j] = ' ';
        1: 1128:						buffer[j] = 0;
        1: 1129:						fprintf(stderr,
        -: 1130:								"    %s-%s%s, "
        -: 1131:								"%s--%s%s "
        -: 1132:								"<%s>%s "
        -: 1133:								"%s%s\n",
        -: 1134:								CYAN, short_name, RESET, YELLOW, name, RESET, name, buffer, help,
        -: 1135:								default_value_str);
        -: 1136:					}
        -: 1137:				}
        -: 1138:			}
        -: 1139:		}
        -: 1140:	}
        -: 1141:
        9: 1142:	EXIT_ERR_IF_NO_DEBUG(0);
        -: 1143:}
        -:    0:Source:chain_alloc.c
        -:    0:Graph:chain_alloc.gcno
        -:    0:Data:chain_alloc.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/chain_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/panic.h>
        -:   18:#include <base/resources.h>
        -:   19:#include <pthread.h>
        -:   20:#include <stdio.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#define MAX_CHAIN_GUARDS 128
        -:   24:
        -:   25:typedef struct ChainGuardEntry {
        -:   26:	SlabAllocator *sa;
        -:   27:	bool sync;
        -:   28:	pthread_mutex_t lock;
        -:   29:	bool is_locked; // used in case of a panic on cleanup to determine if we're locked
        -:   30:} ChainGuardEntry;
        -:   31:
        -:   32:_Thread_local static ChainGuardEntry chain_guard_entries[MAX_CHAIN_GUARDS];
        -:   33:_Thread_local static u8 chain_guard_sp = 0;
        -:   34:_Thread_local static bool chain_guard_is_init = false;
        -:   35:
        -:   36:SlabAllocator *global_sync_allocator = NULL;
        -:   37:
       25:   38:SlabAllocator *init_default_slab_allocator() {
       25:   39:	SlabAllocatorNc *sa = mymalloc(sizeof(SlabAllocator));
       25:   40:	if (sa == NULL)
        1:   41:		return NULL;
       24:   42:	SlabAllocatorConfig sac;
        -:   43:
        -:   44:	// default slab allocator no_malloc = false, zeroed = false, is_64_bit = false
       24:   45:	if (slab_allocator_config_build(&sac, false, false, false)) {
    #####:   46:		myfree(sa);
    #####:   47:		return NULL;
        -:   48:	}
        -:   49:
       24:   50:	u64 max_slabs = (INT32_MAX / 100) * 100;
     3096:   51:	for (i32 i = 0; i < 128; i++) {
     3072:   52:		SlabType st = {.slab_size = (i + 3) * 8,
        -:   53:					   .slabs_per_resize = 100,
        -:   54:					   .initial_chunks = 0,
        -:   55:					   .max_slabs = max_slabs};
     3072:   56:		if (slab_allocator_config_add_type(&sac, &st)) {
    #####:   57:			myfree(sa);
    #####:   58:			return NULL;
        -:   59:		}
        -:   60:	}
     3096:   61:	for (i32 i = 0; i < 128; i++) {
     3072:   62:		SlabType st = {.slab_size = (128 + 3) * 8 + (i + 1) * 1024,
        -:   63:					   .slabs_per_resize = 100,
        -:   64:					   .initial_chunks = 0,
        -:   65:					   .max_slabs = max_slabs};
     3072:   66:		if (slab_allocator_config_add_type(&sac, &st)) {
    #####:   67:			myfree(sa);
    #####:   68:			return NULL;
        -:   69:		}
        -:   70:	}
        -:   71:
       24:   72:	if (slab_allocator_build(sa, &sac)) {
    #####:   73:		myfree(sa);
    #####:   74:		return NULL;
        -:   75:	}
        -:   76:
       24:   77:	return sa;
        -:   78:}
        -:   79:
       80:   80:static void __attribute__((constructor)) __init_chain_guard_array() {
    10320:   81:	for (int i = 0; i < MAX_CHAIN_GUARDS; i++) {
    10240:   82:		if (pthread_mutex_init(&chain_guard_entries[i].lock, NULL))
    #####:   83:			panic("Could not init pthread_mutex");
        -:   84:	}
       80:   85:}
        -:   86:
       13:   87:SlabAllocator *get_global_sync_allocator() {
       13:   88:	if (global_sync_allocator == NULL)
        5:   89:		global_sync_allocator = init_default_slab_allocator();
       13:   90:	return global_sync_allocator;
        -:   91:}
        -:   92:
       70:   93:u64 alloc_count_global_sync_allocator() {
       70:   94:	if (global_sync_allocator == NULL)
       65:   95:		return 0;
        5:   96:	return slab_allocator_cur_slabs_allocated(global_sync_allocator);
        -:   97:}
        -:   98:
       70:   99:u64 alloc_count_default_slab_allocator() {
       70:  100:	if (!chain_guard_is_init || chain_guard_entries[chain_guard_sp].sa == NULL)
       52:  101:		return 0;
       18:  102:	return slab_allocator_cur_slabs_allocated(chain_guard_entries[chain_guard_sp].sa);
        -:  103:}
        -:  104:
        1:  105:void cleanup_thread_local_slab_allocator() {
        1:  106:	if (chain_guard_entries[chain_guard_sp].sa != NULL) {
        1:  107:		slab_allocator_cleanup(chain_guard_entries[chain_guard_sp].sa);
        1:  108:		myfree(chain_guard_entries[chain_guard_sp].sa);
        -:  109:	}
        1:  110:}
        -:  111:
       70:  112:void cleanup_default_slab_allocator() {
       70:  113:	if (chain_guard_entries[chain_guard_sp].sa != NULL) {
       18:  114:		slab_allocator_cleanup(chain_guard_entries[chain_guard_sp].sa);
       18:  115:		myfree(chain_guard_entries[chain_guard_sp].sa);
        -:  116:	}
       70:  117:	if (global_sync_allocator) {
        5:  118:		slab_allocator_cleanup(global_sync_allocator);
        5:  119:		myfree(global_sync_allocator);
        5:  120:		global_sync_allocator = NULL;
        -:  121:	}
       70:  122:}
        -:  123:
    18289:  124:void chain_guard_cleanup(ChainGuardNc *ptr) {
    18289:  125:	if (ptr->impl) {
       19:  126:		chain_guard_sp--;
        -:  127:	}
    18289:  128:}
        -:  129:
        1:  130:ChainGuard set_thread_local_slab_allocator() {
        1:  131:	if (!chain_guard_is_init) {
        1:  132:		chain_guard_entries[chain_guard_sp].sa = init_default_slab_allocator();
        1:  133:		if (chain_guard_entries[chain_guard_sp].sa == NULL)
    #####:  134:			panic("Could not init default slab allocator");
        1:  135:		chain_guard_is_init = true;
        -:  136:	}
        1:  137:	return set_slab_allocator(chain_guard_entries[0].sa, false);
        -:  138:}
        -:  139:
       19:  140:ChainGuard set_slab_allocator(SlabAllocator *sa, bool sync) {
       19:  141:	if (!chain_guard_is_init) {
        6:  142:		chain_guard_entries[chain_guard_sp].sa = init_default_slab_allocator();
        6:  143:		if (chain_guard_entries[chain_guard_sp].sa == NULL)
    #####:  144:			panic("Could not init default slab allocator");
        6:  145:		chain_guard_is_init = true;
        -:  146:	}
       19:  147:	chain_guard_sp++;
       19:  148:	ChainGuardEntry *entry = &chain_guard_entries[chain_guard_sp];
       19:  149:	entry->sa = sa;
       19:  150:	entry->sync = sync;
       19:  151:	entry->is_locked = false;
       19:  152:	ChainGuardNc ret = {entry};
       19:  153:	return ret;
        -:  154:}
        -:  155:
    10836:  156:int chain_malloc(FatPtr *ptr, u64 size) {
    10836:  157:	if (!chain_guard_is_init) {
       13:  158:		chain_guard_entries[chain_guard_sp].sa = init_default_slab_allocator();
       13:  159:		if (chain_guard_entries[chain_guard_sp].sa == NULL) {
        1:  160:			fam_err = AllocErr;
        1:  161:			return -1;
        -:  162:		}
       12:  163:		chain_guard_is_init = true;
        -:  164:	}
        -:  165:
    10835:  166:	if (ptr == NULL || size == 0) {
    #####:  167:		fam_err = IllegalArgument;
    #####:  168:		return -1;
        -:  169:	}
        -:  170:	int ret;
    10835:  171:	if (chain_guard_entries[chain_guard_sp].sync) {
        7:  172:		pthread_mutex_lock(&chain_guard_entries[chain_guard_sp].lock);
        7:  173:		chain_guard_entries[chain_guard_sp].is_locked = true;
        7:  174:		ret = slab_allocator_allocate(chain_guard_entries[chain_guard_sp].sa, size, ptr);
        7:  175:		chain_guard_entries[chain_guard_sp].is_locked = false;
        7:  176:		pthread_mutex_unlock(&chain_guard_entries[chain_guard_sp].lock);
        -:  177:	} else {
    10828:  178:		ret = slab_allocator_allocate(chain_guard_entries[chain_guard_sp].sa, size, ptr);
        -:  179:	}
    10835:  180:	return ret;
        -:  181:}
        1:  182:int chain_realloc(FatPtr *ptr, u64 size) {
        1:  183:	if (!chain_guard_is_init) {
    #####:  184:		chain_guard_entries[chain_guard_sp].sa = init_default_slab_allocator();
    #####:  185:		if (chain_guard_entries[chain_guard_sp].sa == NULL) {
    #####:  186:			fam_err = AllocErr;
    #####:  187:			return -1;
        -:  188:		}
    #####:  189:		chain_guard_is_init = true;
        -:  190:	}
        -:  191:
        1:  192:	if (ptr == NULL || nil(*ptr) || size == 0) {
    #####:  193:		fam_err = IllegalArgument;
    #####:  194:		return -1;
        -:  195:	}
        -:  196:
        1:  197:	int ret = 0;
        -:  198:
        1:  199:	if (chain_guard_entries[chain_guard_sp].sync) {
    #####:  200:		pthread_mutex_lock(&chain_guard_entries[chain_guard_sp].lock);
    #####:  201:		chain_guard_entries[chain_guard_sp].is_locked = true;
        -:  202:	}
        -:  203:
        1:  204:	FatPtr tmp = null;
        1:  205:	chain_malloc(&tmp, size);
        1:  206:	if (nil(tmp)) {
    #####:  207:		fam_err = AllocErr;
    #####:  208:		ret = -1;
        -:  209:	} else {
        -:  210:
        1:  211:		u64 len = fat_ptr_len(ptr);
        1:  212:		u64 nlen = fat_ptr_len(&tmp);
        1:  213:		if (nlen < len) {
    #####:  214:			len = nlen;
        -:  215:		}
        -:  216:
        1:  217:		memcpy(fat_ptr_data(&tmp), fat_ptr_data(ptr), len);
        -:  218:
        1:  219:		chain_free(ptr);
        1:  220:		*ptr = tmp;
        -:  221:	}
        1:  222:	if (chain_guard_entries[chain_guard_sp].sync) {
    #####:  223:		chain_guard_entries[chain_guard_sp].is_locked = false;
    #####:  224:		pthread_mutex_unlock(&chain_guard_entries[chain_guard_sp].lock);
        -:  225:	}
        1:  226:	return 0;
        -:  227:}
        -:  228:
    10820:  229:void chain_free(FatPtr *ptr) {
    10820:  230:	if (!chain_guard_is_init) {
    #####:  231:		panic("free called when default slab allocator has not been initialized");
        -:  232:	}
    10820:  233:	if (ptr == NULL) {
    #####:  234:		panic("attempt to free a NULL FatPtr");
        -:  235:	}
        -:  236:
    10820:  237:	if (chain_guard_entries[chain_guard_sp].sync) {
        7:  238:		pthread_mutex_lock(&chain_guard_entries[chain_guard_sp].lock);
        7:  239:		chain_guard_entries[chain_guard_sp].is_locked = true;
        7:  240:		slab_allocator_free(chain_guard_entries[chain_guard_sp].sa, ptr);
        7:  241:		chain_guard_entries[chain_guard_sp].is_locked = false;
        7:  242:		pthread_mutex_unlock(&chain_guard_entries[chain_guard_sp].lock);
        -:  243:	} else {
    10813:  244:		slab_allocator_free(chain_guard_entries[chain_guard_sp].sa, ptr);
        -:  245:	}
    10820:  246:}
        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#ifdef __linux__
        -:   19:#define getenv(x) secure_getenv(x)
        -:   20:#endif // __linux__
        -:   21:
      116:   22:char *get_dimmed() {
      116:   23:	if (getenv("NO_COLOR") != NULL) {
        1:   24:		return "";
        -:   25:	} else {
      115:   26:		return "\x1b[2m";
        -:   27:	}
        -:   28:}
        -:   29:
        2:   30:char *get_red() {
        2:   31:	if (getenv("NO_COLOR") != NULL) {
        1:   32:		return "";
        -:   33:	} else {
        1:   34:		return "\x1b[31m";
        -:   35:	}
        -:   36:}
        -:   37:
      110:   38:char *get_bright_red() {
      110:   39:	if (getenv("NO_COLOR") != NULL) {
        1:   40:		return "";
        -:   41:	} else {
      109:   42:		return "\x1b[91m";
        -:   43:	}
        -:   44:}
        -:   45:
       38:   46:char *get_green() {
       38:   47:	if (getenv("NO_COLOR") != NULL) {
        1:   48:		return "";
        -:   49:	} else {
       37:   50:		return "\x1b[32m";
        -:   51:	}
        -:   52:}
        -:   53:
       50:   54:char *get_yellow() {
       50:   55:	if (getenv("NO_COLOR") != NULL) {
        1:   56:		return "";
        -:   57:	} else {
       49:   58:		return "\x1b[33m";
        -:   59:	}
        -:   60:}
        -:   61:
     5788:   62:char *get_cyan() {
     5788:   63:	if (getenv("NO_COLOR") != NULL) {
        1:   64:		return "";
        -:   65:	} else {
     5787:   66:		return "\x1b[36m";
        -:   67:	}
        -:   68:}
        -:   69:
        2:   70:char *get_magenta() {
        2:   71:	if (getenv("NO_COLOR") != NULL) {
        1:   72:		return "";
        -:   73:	} else {
        1:   74:		return "\x1b[35m";
        -:   75:	}
        -:   76:}
        -:   77:
        2:   78:char *get_blue() {
        2:   79:	if (getenv("NO_COLOR") != NULL) {
        1:   80:		return "";
        -:   81:	} else {
        1:   82:		return "\x1b[34m";
        -:   83:	}
        -:   84:}
        -:   85:
     6094:   86:char *get_reset() {
     6094:   87:	if (getenv("NO_COLOR") != NULL) {
        1:   88:		return "";
        -:   89:	} else {
     6093:   90:		return "\x1b[0m";
        -:   91:	}
        -:   92:}
        -:    0:Source:misc.c
        -:    0:Graph:misc.gcno
        -:    0:Data:misc.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/macro_utils.h>
        -:   17:#include <base/misc.h>
        -:   18:#include <base/resources.h>
        -:   19:#include <base/types.h>
        -:   20:#include <ctype.h>
        -:   21:#include <dirent.h>
        -:   22:#include <errno.h>
        -:   23:#include <limits.h>
        -:   24:#include <stdarg.h>
        -:   25:#include <stdio.h>
        -:   26:#include <stdlib.h>
        -:   27:#include <string.h>
        -:   28:#include <sys/stat.h>
        -:   29:#include <unistd.h>
        -:   30:
        -:   31:bool __is_debug_misc_ferror = false;
        -:   32:bool __is_debug_misc_fwrite = false;
        -:   33:bool __is_debug_misc_stat = false;
        -:   34:bool __is_debug_misc_remove_dir = false;
        -:   35:bool __is_debug_misc_unlink = false;
        -:   36:bool __is_debug_misc_no_exit = false;
        -:   37:bool __is_debug_misc_preserve = false;
        -:   38:
      299:   39:char *myfgets(char *str, int n, MYFILE *stream) {
      299:   40:	return fgets(str, n, (FILE *)stream);
        -:   41:}
        -:   42:
       17:   43:u64 myfread(void *buffer, u64 size, u64 count, MYFILE *stream) {
       17:   44:	return fread(buffer, size, count, (FILE *)stream);
        -:   45:}
        -:   46:
       18:   47:u64 myfwrite(const void *buffer, u64 size, u64 count, MYFILE *stream) {
       18:   48:	return fwrite(buffer, size, count, (FILE *)stream);
        -:   49:}
        -:   50:
       11:   51:int myfeof(MYFILE *stream) {
       11:   52:	return feof((FILE *)stream);
        -:   53:}
        -:   54:
        6:   55:int myferror(MYFILE *stream) {
        6:   56:	return ferror((FILE *)stream);
        -:   57:}
        -:   58:
       11:   59:long myftell(MYFILE *stream) {
       11:   60:	return ftell((FILE *)stream);
        -:   61:}
        -:   62:
       15:   63:int myfseek(MYFILE *stream, long pos, int type) {
       15:   64:	return fseek((FILE *)stream, pos, type);
        -:   65:}
        -:   66:
       11:   67:u64 mystrlen(const char *s) {
       11:   68:	int ret = 0;
        -:   69:	loop {
      231:   70:		if (s[ret] == 0)
       11:   71:			return ret;
      220:   72:		ret++;
        -:   73:	}
        -:   74:}
        -:   75:
        6:   76:int myfprintf(MYFILE *fptr, const char *str, ...) {
        -:   77:	va_list args;
        6:   78:	va_start(args, str);
        6:   79:	int ret = vfprintf((FILE *)fptr, str, args);
        6:   80:	va_end(args);
        6:   81:	return ret;
        -:   82:}
        -:   83:
      137:   84:const char *rstrstr(const char *s1, const char *s2) {
      137:   85:	size_t s1len = strlen(s1);
      137:   86:	size_t s2len = strlen(s2);
        -:   87:	const char *s;
        -:   88:
      137:   89:	if (s2len > s1len)
        1:   90:		return NULL;
      753:   91:	for (s = s1 + s1len - s2len; s >= s1; --s)
      750:   92:		if (strncmp(s, s2, s2len) == 0)
      133:   93:			return s;
        3:   94:	return NULL;
        -:   95:}
        -:   96:
       12:   97:u64 read_all(void *buffer, u64 size, u64 count, MYFILE *stream) {
       12:   98:	size_t total_read = 0;
       12:   99:	size_t bytes_to_read = size * count;
        -:  100:	size_t bytes_read;
        -:  101:
       17:  102:	while (total_read < bytes_to_read || __is_debug_misc_ferror) {
       12:  103:		bytes_read = myfread((char *)buffer + total_read, 1, bytes_to_read - total_read, stream);
       12:  104:		if (bytes_read == 0 || __is_debug_misc_ferror) {
        -:  105:			// Check for EOF or error
        2:  106:			if (myferror(stream) || __is_debug_misc_ferror) {
        1:  107:				errno = EIO;
        1:  108:				break; // Error occurred
        -:  109:			}
        -:  110:		}
       11:  111:		total_read += bytes_read;
       11:  112:		if (myfeof(stream))
        6:  113:			break;
        -:  114:	}
        -:  115:
       12:  116:	return total_read;
        -:  117:}
        -:  118:
        6:  119:int copy_file(const Path *dst_path, const Path *src_path) {
        6:  120:	if (dst_path == NULL || src_path == NULL) {
        1:  121:		errno = EINVAL;
        1:  122:		return -1;
        -:  123:	}
        -:  124:	MYFILE *source_file, *dest_file;
        -:  125:	size_t bytes;
        -:  126:
        -:  127:	// Open the source file in binary read mode
        5:  128:	source_file = myfopen(src_path, "rb");
        5:  129:	if (source_file == NULL) {
        1:  130:		errno = EINVAL;
        1:  131:		return -1;
        -:  132:	}
        -:  133:
        -:  134:	// Determine the file size
        4:  135:	myfseek(source_file, 0, SEEK_END);
        4:  136:	long file_size = myftell(source_file);
        4:  137:	myfseek(source_file, 0, SEEK_SET);
        4:  138:	char buffer[file_size];
        -:  139:
        -:  140:	// Open the destination file in binary write mode
        4:  141:	dest_file = myfopen(dst_path, "wb");
        4:  142:	if (dest_file == NULL) {
        1:  143:		errno = ENOENT;
        1:  144:		myfclose(source_file);
        1:  145:		return -1;
        -:  146:	}
        -:  147:
        -:  148:	// Copy the file content
        5:  149:	while ((bytes = myfread(buffer, 1, file_size, source_file)) > 0) {
        3:  150:		if (myferror(source_file) || myfwrite(buffer, 1, bytes, dest_file) != bytes ||
        -:  151:			__is_debug_misc_fwrite) {
        1:  152:			errno = EIO;
        1:  153:			myfclose(source_file);
        1:  154:			myfclose(dest_file);
        1:  155:			return -1;
        -:  156:		}
        -:  157:	}
        -:  158:
        -:  159:	// Close both files
        2:  160:	myfclose(source_file);
        2:  161:	myfclose(dest_file);
        -:  162:
        2:  163:	return 0;
        -:  164:}
        -:  165:
        -:  166:// Function to recursively remove a directory and its contents
      175:  167:int remove_directory(const Path *p, bool preserve_dir) {
      175:  168:	const char *path = path_to_string(p);
        -:  169:	struct dirent *entry;
      175:  170:	DIR *dir = opendir(path);
        -:  171:
      175:  172:	if (dir == NULL) {
       73:  173:		return -1;
        -:  174:	}
        -:  175:
      342:  176:	while ((entry = readdir(dir)) != NULL) {
        -:  177:		char full_path[PATH_MAX];
        -:  178:
        -:  179:		// Skip the special entries "." and ".."
      245:  180:		if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
      196:  181:			continue;
        -:  182:		}
        -:  183:
        -:  184:		// Construct the full path to the file/directory
       49:  185:		snprintf(full_path, sizeof(full_path), "%s/%s", path, entry->d_name);
        -:  186:
        -:  187:		struct stat statbuf;
       49:  188:		if (stat(full_path, &statbuf) == -1 || __is_debug_misc_stat) {
        1:  189:			errno = EIO;
        1:  190:			closedir(dir);
        5:  191:			return -1;
        -:  192:		}
        -:  193:
       48:  194:		if (S_ISDIR(statbuf.st_mode)) {
        -:  195:			// It's a directory, recurse into it
       24:  196:			Path full_path_p;
       24:  197:			path_for(&full_path_p, full_path);
       24:  198:			if (remove_directory(&full_path_p, false) == -1 || __is_debug_misc_remove_dir) {
        3:  199:				closedir(dir);
        3:  200:				return -1;
        -:  201:			}
        -:  202:		} else {
        -:  203:			// It's a file, unlink (delete) it
       24:  204:			if (unlink(full_path) == -1 || __is_debug_misc_unlink) {
        1:  205:				errno = EIO;
        1:  206:				closedir(dir);
        1:  207:				return -1;
        -:  208:			}
        -:  209:		}
        -:  210:	}
        -:  211:
       97:  212:	closedir(dir);
        -:  213:
        -:  214:	// Now the directory is empty, so we can remove it
       97:  215:	if (!preserve_dir) {
       96:  216:		if (rmdir(path) == -1 || __is_debug_misc_preserve) {
        1:  217:			errno = EIO;
        1:  218:			return -1;
        -:  219:		}
        -:  220:	}
        -:  221:
       96:  222:	return 0;
        -:  223:}
        -:  224:
        5:  225:void exit_error(char *format, ...) {
        -:  226:	va_list va_args;
        5:  227:	va_start(va_args, format);
        5:  228:	fprintf(stderr, "%sError%s: ", BRIGHT_RED, RESET);
        5:  229:	vfprintf(stderr, format, va_args);
        5:  230:	fprintf(stderr, "\n");
        5:  231:	va_end(va_args);
       5*:  232:	EXIT_ERR_IF_NO_DEBUG(-1);
        5:  233:}
        -:  234:
       23:  235:void print_error(char *format, ...) {
        -:  236:	va_list va_args;
       23:  237:	va_start(va_args, format);
       23:  238:	fprintf(stderr, "%sError%s: ", BRIGHT_RED, RESET);
       23:  239:	vfprintf(stderr, format, va_args);
       23:  240:	fprintf(stderr, "\n");
       23:  241:	va_end(va_args);
       23:  242:}
        -:  243:
        -:  244:// Helper function to trim leading and trailing whitespace
        7:  245:char *trim_whitespace(char *str) {
        -:  246:	// Trim leading whitespace
       15:  247:	while (isspace((unsigned char)*str))
        8:  248:		str++;
        -:  249:	// Trim trailing whitespace
        7:  250:	char *end = str + strlen(str) - 1;
       15:  251:	while (end > str && isspace((unsigned char)*end))
        8:  252:		end--;
        7:  253:	*(end + 1) = '\0'; // Null-terminate the trimmed string
        7:  254:	return str;		   // Return the trimmed string
        -:  255:}
        -:    0:Source:panic.c
        -:    0:Graph:panic.gcno
        -:    0:Data:panic.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/panic.h>
        -:   16:#include <setjmp.h>
        -:   17:#include <signal.h>
        -:   18:#include <stdarg.h>
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:void exit(int value);
        -:   24:
        -:   25:#define MAX_PANIC_MSG 1024
        -:   26:
        -:   27:_Thread_local jmp_buf return_jmp;
        -:   28:_Thread_local bool jmp_return_set = false;
        -:   29:_Thread_local char panic_buf[MAX_PANIC_MSG];
        -:   30:
    #####:   31:void panic(const char *fmt, ...) {
        -:   32:	va_list args;
        -:   33:
    #####:   34:	fprintf(stderr, "thread panicked: ");
    #####:   35:	va_start(args, fmt);
    #####:   36:	vfprintf(stderr, fmt, args);
    #####:   37:	vsnprintf(panic_buf, MAX_PANIC_MSG, fmt, args);
    #####:   38:	va_end(args);
    #####:   39:	fprintf(stderr, "\n");
        -:   40:
        -:   41:	// If jump return has not been set, we resort to an exit with an error
        -:   42:	// status.
    #####:   43:	if (!jmp_return_set)
    #####:   44:		exit(-1);
    #####:   45:	longjmp(return_jmp, THREAD_PANIC);
        -:   46:}
        -:   47:
    #####:   48:void signal_handler(int signal) {
        -:   49:	// Handle the signal and call the _on_panic function
    #####:   50:	panic("Caught signal: %d", signal);
    #####:   51:}
        -:   52:
    #####:   53:void set_on_panic(panic_handler_t on_panic) {
        -:   54:	struct sigaction sa;
    #####:   55:	memset(&sa, 0, sizeof(sa));
    #####:   56:	sa.sa_handler = signal_handler;
        -:   57:	// Catching only error signals
    #####:   58:	sigaction(SIGSEGV, &sa, NULL); // Segmentation fault
    #####:   59:	sigaction(SIGABRT, &sa, NULL); // Abort signal
    #####:   60:	sigaction(SIGTRAP, &sa, NULL); // Signal trap
    #####:   61:	sigaction(SIGILL, &sa, NULL);  // Illegal instruction
    #####:   62:	sigaction(SIGFPE, &sa, NULL);  // Arithmetic error
    #####:   63:	sigaction(SIGBUS, &sa, NULL);  // Bus error
        -:   64:
    #####:   65:	jmp_return_set = true;
    #####:   66:	int value = setjmp(return_jmp);
    #####:   67:	if (value)
    #####:   68:		on_panic(panic_buf);
    #####:   69:}
        -:    0:Source:path.c
        -:    0:Graph:path.gcno
        -:    0:Data:path.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/misc.h>
        -:   16:#include <base/path.h>
        -:   17:#include <base/resources.h>
        -:   18:#include <errno.h>
        -:   19:#include <limits.h>
        -:   20:#include <stdio.h>
        -:   21:#include <stdlib.h>
        -:   22:#include <string.h>
        -:   23:#include <sys/stat.h>
        -:   24:#include <unistd.h>
        -:   25:
        -:   26:bool __is_debug_path_homedir_null = false;
        -:   27:
      272:   28:void path_cleanup(PathImpl *ptr) {
      272:   29:	if (ptr->ptr) {
      266:   30:		myfree(ptr->ptr);
      266:   31:		ptr->ptr = NULL;
        -:   32:	}
      272:   33:}
        -:   34:
      277:   35:int path_for(Path *p, const char *path) {
      277:   36:	if (p == NULL) {
        1:   37:		errno = EINVAL;
        1:   38:		return -1;
        -:   39:	}
      276:   40:	if (path == NULL) {
        1:   41:		errno = EINVAL;
        1:   42:		p->ptr = NULL;
        1:   43:		return -1;
        -:   44:	}
      275:   45:	int len = strlen(path);
      275:   46:	if (len == 0) {
        1:   47:		errno = EINVAL;
        1:   48:		p->ptr = NULL;
        1:   49:		return -1;
        -:   50:	}
      274:   51:	p->ptr = mymalloc(len + 1);
      274:   52:	if (!p->ptr)
        2:   53:		return -1;
      272:   54:	p->len = len;
      272:   55:	strcpy(p->ptr, path);
      272:   56:	return 0;
        -:   57:}
        -:   58:
       33:   59:int path_replace_home(Path *p) {
       33:   60:	const char *home_dir = getenv("HOME");
       33:   61:	if (home_dir == NULL || __is_debug_path_homedir_null) {
        1:   62:		errno = EINVAL;
        1:   63:		return -1;
        -:   64:	}
       32:   65:	if (((char *)(p->ptr))[0] == '~') {
        4:   66:		int nlen = strlen(home_dir) + strlen(PATH_SEPARATOR) + strlen(p->ptr);
        4:   67:		if (nlen >= PATH_MAX) {
        1:   68:			errno = E2BIG;
        2:   69:			return -1;
        -:   70:		}
        3:   71:		if (nlen >= p->len) {
        3:   72:			void *nptr = myrealloc(p->ptr, nlen + 1);
        3:   73:			if (nptr == NULL)
        1:   74:				return -1;
        2:   75:			p->ptr = nptr;
        2:   76:			p->len = nlen;
        -:   77:		}
        -:   78:		char buf[PATH_MAX + 1];
        2:   79:		if (strlen(p->ptr) > 1 && ((char *)(p->ptr))[1] == PATH_SEPARATOR_CHAR)
        1:   80:			snprintf(buf, PATH_MAX, "%s%s", home_dir, (char *)(p->ptr + 1));
        -:   81:		else
        1:   82:			snprintf(buf, PATH_MAX, "%s%s%s", home_dir, PATH_SEPARATOR, (char *)(p->ptr + 1));
        2:   83:		strcpy(p->ptr, buf);
        -:   84:	}
       30:   85:	return 0;
        -:   86:}
        -:   87:
        8:   88:u64 path_file_size(Path *p) {
        8:   89:	MYFILE *fp = myfopen(p, "r");
        8:   90:	if (!fp) {
        1:   91:		errno = EIO;
        1:   92:		return 0;
        -:   93:	}
        7:   94:	myfseek(fp, 0L, SEEK_END);
        7:   95:	u64 ret = myftell(fp);
        7:   96:	myfclose(fp);
        7:   97:	return ret;
        -:   98:}
        -:   99:
       33:  100:int path_canonicalize(Path *p) {
        -:  101:	char buf[PATH_MAX];
        -:  102:	int nlen;
       33:  103:	if (path_replace_home(p) || realpath(p->ptr, buf) == NULL || (nlen = strlen(buf)) == 0) {
       19:  104:		errno = EINVAL;
       19:  105:		return -1;
        -:  106:	}
       14:  107:	errno = 0;
       14:  108:	if (nlen >= p->len) {
       12:  109:		void *nptr = myrealloc(p->ptr, nlen + 1);
       12:  110:		if (nptr == NULL)
        1:  111:			return -1;
       11:  112:		p->ptr = nptr;
       11:  113:		p->len = nlen;
        -:  114:	}
       13:  115:	strcpy(p->ptr, buf);
       13:  116:	return 0;
        -:  117:}
      182:  118:int path_push(Path *p, const char *next) {
      182:  119:	if (p == NULL) {
        1:  120:		errno = EINVAL;
        1:  121:		return -1;
        -:  122:	}
      181:  123:	if (next == NULL) {
        1:  124:		errno = EINVAL;
        1:  125:		return -1;
        -:  126:	}
      180:  127:	int slen = strlen(p->ptr);
      180:  128:	if (slen <= 0 || strlen(next) == 0) {
        1:  129:		errno = EFAULT;
        1:  130:		return -1;
        -:  131:	}
      179:  132:	bool need_sep = false;
      179:  133:	if (((char *)p->ptr)[slen - 1] != PATH_SEPARATOR_CHAR) {
      179:  134:		need_sep = true;
        -:  135:	}
        -:  136:
      179:  137:	int nlen = slen + strlen(next);
      179:  138:	if (need_sep)
      179:  139:		nlen += strlen(PATH_SEPARATOR);
        -:  140:
      179:  141:	if (nlen >= p->len) {
      175:  142:		void *nptr = myrealloc(p->ptr, nlen + 1);
      175:  143:		if (nptr == NULL)
        1:  144:			return -1;
      174:  145:		p->ptr = nptr;
      174:  146:		p->len = nlen;
        -:  147:	}
        -:  148:
      178:  149:	if (need_sep)
      178:  150:		strcat(p->ptr, PATH_SEPARATOR);
      178:  151:	strcat(p->ptr, next);
      178:  152:	return 0;
        -:  153:}
       48:  154:int path_pop(Path *p) {
       48:  155:	const char *res = rstrstr(p->ptr, PATH_SEPARATOR);
       48:  156:	if (res) {
       47:  157:		int index = res - (char *)p->ptr;
       47:  158:		((char *)(p->ptr))[index] = 0;
        -:  159:	} else {
        1:  160:		((char *)(p->ptr))[0] = '.';
        1:  161:		((char *)(p->ptr))[1] = 0;
        -:  162:	}
       48:  163:	return 0;
        -:  164:}
        -:  165:
     2224:  166:char *path_to_string(const Path *p) {
     2224:  167:	return p->ptr;
        -:  168:}
        -:  169:
       88:  170:const char *path_file_name(const Path *p) {
       88:  171:	const char *ret = rstrstr(p->ptr, PATH_SEPARATOR);
       88:  172:	if (ret != NULL && strlen(ret) > 0)
       86:  173:		return ret + 1;
        -:  174:
        2:  175:	return ret;
        -:  176:}
        -:  177:
       30:  178:bool path_exists(const Path *p) {
       30:  179:	if (p->ptr == NULL || p->len == 0) {
        1:  180:		errno = EINVAL;
        1:  181:		return false;
        -:  182:	}
       29:  183:	return access(p->ptr, F_OK) == 0;
        -:  184:}
       11:  185:bool path_is_dir(const Path *p) {
       11:  186:	if (p->ptr == NULL || p->len == 0) {
        1:  187:		errno = EINVAL;
        1:  188:		return false;
        -:  189:	}
        -:  190:	struct stat s;
       10:  191:	if (stat(p->ptr, &s) == 0) {
        7:  192:		return s.st_mode & S_IFDIR;
        -:  193:	}
        3:  194:	return false;
        -:  195:}
        -:  196:
      154:  197:bool path_mkdir(Path *p, u64 mode, bool parent) {
      154:  198:	if (p->ptr == NULL || p->len == 0) {
        1:  199:		errno = EINVAL;
        1:  200:		return false;
        -:  201:	}
        -:  202:
        -:  203:	struct stat s;
        -:  204:
        -:  205:	// Check if the path exists
      153:  206:	if (stat(p->ptr, &s) == 0) {
        -:  207:		// If the path exists and it's a directory, return success
        8:  208:		if (s.st_mode & S_IFDIR) {
        7:  209:			return true;
        -:  210:		} else {
        -:  211:			// Path exists but it's not a directory
        1:  212:			errno = ENOTDIR;
        1:  213:			return false;
        -:  214:		}
        -:  215:	}
        -:  216:
        -:  217:	// If parent is false, attempt to create only the target directory
      145:  218:	if (!parent) {
      127:  219:		if (mkdir(p->ptr, mode) != 0) {
       28:  220:			return false;
        -:  221:		}
       99:  222:		return true;
        -:  223:	}
        -:  224:
        -:  225:	// Create the directory structure (parent is true)
       18:  226:	Path temp_path;
       18:  227:	if (path_copy(&temp_path, p) != 0) {
        1:  228:		return false;
        -:  229:	}
        -:  230:
       17:  231:	int i = 0;
        -:  232:	char path_bufs[20][PATH_MAX];
       43:  233:	while (i < 20 && path_file_name(&temp_path) != NULL) {
       41:  234:		if (path_mkdir(&temp_path, mode, false)) {
       15:  235:			bool ret = true;
       21:  236:			for (int j = i - 1; ret && j >= 0; j--) {
        6:  237:				path_push(&temp_path, path_bufs[j]);
        6:  238:				ret = path_mkdir(&temp_path, mode, false);
        -:  239:			}
       15:  240:			return true;
        -:  241:		}
       26:  242:		const char *dir_part = path_file_name(&temp_path);
       26:  243:		path_pop(&temp_path);
       26:  244:		strcpy(path_bufs[i], dir_part);
       26:  245:		i++;
        -:  246:	}
        2:  247:	return false;
        -:  248:}
        -:  249:
       54:  250:int path_copy(Path *dst, const Path *src) {
       54:  251:	return path_for(dst, path_to_string(src));
        -:  252:}
        -:  253:
        2:  254:int path_file_stem(const Path *p, char *buf, u64 limit) {
        -:  255:	// Copy the file name into the buffer, ensuring proper null termination
        2:  256:	strncpy(buf, path_file_name(p), limit - 1);
        2:  257:	buf[limit - 1] = '\0'; // Manually ensure null-termination
        -:  258:
        2:  259:	u64 buflen = strlen(buf); // Compute length once
       12:  260:	for (u64 i = buflen - 1; i > 0; i--) {
       11:  261:		if (buf[i] == '.') {
        1:  262:			buf[i] = '\0'; // Null-terminate at the dot
        1:  263:			break;
        -:  264:		}
        -:  265:	}
        2:  266:	return 0;
        -:  267:}
        -:    0:Source:resources.c
        -:    0:Graph:resources.gcno
        -:    0:Data:resources.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/resources.h>
        -:   16:#include <base/types.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:
        -:   20:_Thread_local ResourceStats THREAD_LOCAL_RESOURCE_STATS = {0, 0, 0, 0, 0};
        -:   21:#ifdef TEST
        -:   22:bool __is_debug_malloc = false;
        -:   23:bool __is_debug_realloc = false;
        -:   24:u64 __is_debug_malloc_counter_ = UINT64_MAX;
        -:   25:u64 __is_debug_realloc_counter_ = UINT64_MAX;
        -:   26:#endif // TEST
        -:   27:
     5105:   28:void *mymalloc(u64 size) {
        -:   29:#ifdef TEST
     5105:   30:	if (__is_debug_malloc || __is_debug_malloc_counter_ == 0) {
       24:   31:		__is_debug_malloc_counter_ = UINT64_MAX;
       24:   32:		return NULL;
        -:   33:	}
     5081:   34:	__is_debug_malloc_counter_--;
        -:   35:#endif // TEST
        -:   36:	void *ret;
     5081:   37:	ret = malloc(size);
        -:   38:
     5081:   39:	if (ret) {
     5081:   40:		THREAD_LOCAL_RESOURCE_STATS.malloc_sum += 1;
        -:   41:	}
     5081:   42:	return ret;
        -:   43:}
     6518:   44:void *myrealloc(void *ptr, u64 size) {
        -:   45:#ifdef TEST
     6518:   46:	if (__is_debug_realloc || __is_debug_realloc_counter_ == 0) {
        7:   47:		__is_debug_realloc_counter_ = UINT64_MAX;
        7:   48:		return NULL;
        -:   49:	}
     6511:   50:	__is_debug_realloc_counter_--;
        -:   51:#endif // TEST
        -:   52:	void *ret;
     6511:   53:	ret = realloc(ptr, size);
        -:   54:
     6511:   55:	if (ret) {
     6511:   56:		THREAD_LOCAL_RESOURCE_STATS.realloc_sum += 1;
        -:   57:	}
     6511:   58:	return ret;
        -:   59:}
     5025:   60:void myfree(void *ptr) {
     5025:   61:	THREAD_LOCAL_RESOURCE_STATS.free_sum += 1;
     5025:   62:	free(ptr);
     5025:   63:}
       58:   64:MYFILE *myfopen(const Path *path, const char *mode) {
       58:   65:	const char *path_str = path_to_string(path);
       58:   66:	FILE *ret = fopen(path_str, mode);
       58:   67:	if (ret) {
       53:   68:		THREAD_LOCAL_RESOURCE_STATS.fopen_sum += 1;
        -:   69:	}
       58:   70:	return (MYFILE *)ret;
        -:   71:}
        -:   72:
    #####:   73:void *mymalloc_no_stat(u64 size) {
    #####:   74:	return malloc(size);
        -:   75:}
        -:   76:
       53:   77:void myfclose(MYFILE *ptr) {
       53:   78:	THREAD_LOCAL_RESOURCE_STATS.fclose_sum += 1;
       53:   79:	fclose((FILE *)ptr);
       53:   80:}
      145:   81:u64 mymalloc_sum() {
      145:   82:	return THREAD_LOCAL_RESOURCE_STATS.malloc_sum;
        -:   83:}
        2:   84:u64 myrealloc_sum() {
        2:   85:	return THREAD_LOCAL_RESOURCE_STATS.realloc_sum;
        -:   86:}
      145:   87:u64 myfree_sum() {
      145:   88:	return THREAD_LOCAL_RESOURCE_STATS.free_sum;
        -:   89:}
      216:   90:u64 myfopen_sum() {
      216:   91:	return THREAD_LOCAL_RESOURCE_STATS.fopen_sum;
        -:   92:}
      216:   93:u64 myfclose_sum() {
      216:   94:	return THREAD_LOCAL_RESOURCE_STATS.fclose_sum;
        -:   95:}
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/macro_utils.h>
        -:   17:#include <base/panic.h>
        -:   18:#include <base/resources.h>
        -:   19:#include <base/slabs.h>
        -:   20:#include <stdio.h>
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define MALLOC_64_ID (INT64_MAX - 8)
        -:   24:#define MALLOC_32_ID (INT32_MAX - 8)
        -:   25:
        -:   26:// Define both 64/32 bit impls the slab allocator will build the approproate types
        -:   27:// based on configuration.
        -:   28:typedef struct FatPtr64Impl {
        -:   29:	u64 id;
        -:   30:	u64 len;
        -:   31:	void *data;
        -:   32:} FatPtr64Impl;
        -:   33:
        -:   34:typedef struct FatPtr32Impl {
        -:   35:	u32 id;
        -:   36:	u32 len;
        -:   37:	void *data;
        -:   38:} FatPtr32Impl;
        -:   39:
        -:   40:// deteremine which kind of fat pointer this is. 32 bit fat pointers are restricted to having an ID
        -:   41:// that does not set the most significant bit. Therefore they must be less than 2^31 or the
        -:   42:// maximum signed int value (INT32_MAX). Conversely, the 64 bit ids must have this bit set.
        -:   43:// This is the slab allocator's responsibility to ensure the bit is set correctly.
        -:   44:// Users need not worry about these details as they are handled internally.
 70424178:   45:bool fat_ptr_is64(const FatPtr *ptr) {
 70424178:   46:	return ((FatPtr32Impl *)ptr->data)->id & 0x1;
        -:   47:}
        -:   48:
        -:   49:// Return the id of the FatPtr. First check bit for u64/u32 status, then return value.
      200:   50:u64 fat_ptr_id(const FatPtr *ptr) {
      200:   51:	if (fat_ptr_is64(ptr))
      100:   52:		return ((FatPtr64Impl *)ptr->data)->id;
        -:   53:	else
      100:   54:		return ((FatPtr32Impl *)ptr->data)->id;
        -:   55:}
        -:   56:
        -:   57:// Get the length of this FatPtr. Once again use the status bit in the id then return value.
  3029885:   58:u64 fat_ptr_len(const FatPtr *ptr) {
  3029885:   59:	if (fat_ptr_is64(ptr))
      266:   60:		return ((FatPtr64Impl *)ptr->data)->len;
        -:   61:	else
  3029619:   62:		return ((FatPtr32Impl *)ptr->data)->len;
        -:   63:}
        -:   64:
        -:   65:// Get the data pointer of this FatPtr. Once again use the status bit in the id then return value.
 67394093:   66:void *fat_ptr_data(const FatPtr *ptr) {
 67394093:   67:	if (fat_ptr_is64(ptr))
      105:   68:		return ((FatPtr64Impl *)ptr->data)->data;
        -:   69:	else
 67393988:   70:		return ((FatPtr32Impl *)ptr->data)->data;
        -:   71:}
        -:   72:
        -:   73:// Test function to free the 64 bit objects.
      100:   74:void fat_ptr_free_test_obj64(FatPtr *ptr) {
      100:   75:	if (ptr && ptr->data) {
      100:   76:		myfree(ptr->data);
      100:   77:		ptr->data = NULL;
        -:   78:	}
      100:   79:}
        -:   80:
        -:   81:// Test function to free the 32 bit objects.
      100:   82:void fat_ptr_free_test_obj32(FatPtr *ptr) {
      100:   83:	if (ptr && ptr->data) {
      100:   84:		myfree(ptr->data);
      100:   85:		ptr->data = NULL;
        -:   86:	}
      100:   87:}
        -:   88:
        -:   89:// Test function to allocate the 64 bit objects.
      100:   90:void fat_ptr_test_obj64(FatPtr *ptr, u64 id, u64 len) {
      100:   91:	ptr->data = mymalloc(3 * sizeof(u64) + len);
      100:   92:	FatPtr64Impl *fptr = ptr->data;
      100:   93:	fptr->id = id;
      100:   94:	fptr->len = len;
      100:   95:	fptr->data = ptr->data + 3 * sizeof(u64);
      100:   96:}
        -:   97:
        -:   98:// Test function to allocate the 32 bit objects.
      100:   99:void fat_ptr_test_obj32(FatPtr *ptr, u32 id, u32 len) {
      100:  100:	ptr->data = mymalloc(2 * sizeof(u32) + sizeof(u64) + len);
      100:  101:	FatPtr32Impl *fptr = ptr->data;
      100:  102:	fptr->id = id;
      100:  103:	fptr->len = len;
      100:  104:	fptr->data = ptr->data + 2 * sizeof(u32) + sizeof(u64);
      100:  105:}
        -:  106:
        -:  107:// SlabAllocator Config
       42:  108:void slab_allocator_config_cleanup(SlabAllocatorConfigNc *sc) {
       42:  109:	if (sc->slab_types) {
       42:  110:		myfree(sc->slab_types);
       42:  111:		sc->slab_types = NULL;
        -:  112:	}
       42:  113:}
        -:  114:
       45:  115:int slab_allocator_config_build(SlabAllocatorConfig *sc, bool zeroed, bool no_malloc,
        -:  116:								bool is_64_bit) {
       45:  117:	sc->zeroed = zeroed;
       45:  118:	sc->no_malloc = no_malloc;
       45:  119:	sc->is_64_bit = is_64_bit;
       45:  120:	sc->slab_types_count = 0;
       45:  121:	sc->slab_types = NULL;
        -:  122:
       45:  123:	return 0;
        -:  124:}
     6163:  125:int slab_allocator_config_add_type(SlabAllocatorConfig *sc, const SlabType *st) {
     6163:  126:	if (sc->slab_types) {
     6121:  127:		void *tmp = myrealloc(sc->slab_types, sizeof(SlabType) * (1 + sc->slab_types_count));
     6121:  128:		if (tmp == NULL)
    #####:  129:			return -1;
     6121:  130:		sc->slab_types = tmp;
        -:  131:	} else {
       42:  132:		sc->slab_types = mymalloc(sizeof(SlabType));
       42:  133:		if (sc->slab_types == NULL)
    #####:  134:			return -1;
        -:  135:	}
        -:  136:
     6163:  137:	sc->slab_types[sc->slab_types_count] = *st;
     6163:  138:	sc->slab_types_count++;
        -:  139:
     6163:  140:	return 0;
        -:  141:}
        -:  142:
        -:  143:// Slab Allocator
        -:  144:
        -:  145:typedef struct SlabData {
        -:  146:	SlabType type; // This slab data's type information (slab_size, slabs_per_resize, initial, max)
        -:  147:	void **data;   // Pointers to each chunk
        -:  148:	void *free_list;	// The free list pointers
        -:  149:	u64 cur_chunks;		// number of chunks currently allocated
        -:  150:	u64 cur_slabs;		// number of slabs currently allocated
        -:  151:	u64 free_list_head; // the free list head
        -:  152:} SlabData;
        -:  153:
        -:  154:typedef struct SlabAllocatorImpl {
        -:  155:	u64 sd_size;	  // size of the SlabData array
        -:  156:	SlabData *sd_arr; // slab data array one for each SlabType
        -:  157:	bool no_malloc;	  // config no_malloc
        -:  158:	bool zeroed;	  // config zeroed
        -:  159:	bool is_64_bit;	  // config 64 bit id/len
        -:  160:	u64 cur_mallocs;  // number of slabs allocated via malloc
        -:  161:} SlabAllocatorImpl;
        -:  162:
        -:  163:int slab_data_allocate(SlabData *sd, FatPtr *fptr, bool is_64_bit, bool zeroed);
        -:  164:
       41:  165:void slab_allocator_cleanup(SlabAllocatorNc *ptr) {
       41:  166:	if (ptr->impl) {
       41:  167:		SlabAllocatorImpl *impl = ptr->impl;
       41:  168:		if (impl->sd_arr) {
     6202:  169:			for (u64 i = 0; i < impl->sd_size; i++) {
     6286:  170:				for (int j = 0; j < impl->sd_arr[i].cur_chunks; j++) {
      125:  171:					if (impl->sd_arr[i].data[j]) {
      125:  172:						myfree(impl->sd_arr[i].data[j]);
      125:  173:						impl->sd_arr[i].data[j] = NULL;
        -:  174:					}
        -:  175:				}
     6161:  176:				if (impl->sd_arr[i].data) {
       47:  177:					myfree(impl->sd_arr[i].data);
       47:  178:					impl->sd_arr[i].data = NULL;
        -:  179:				}
     6161:  180:				if (impl->sd_arr[i].free_list) {
       47:  181:					myfree(impl->sd_arr[i].free_list);
       47:  182:					impl->sd_arr[i].free_list = NULL;
        -:  183:				}
        -:  184:			}
        -:  185:
       41:  186:			myfree(impl->sd_arr);
       41:  187:			impl->sd_arr = NULL;
        -:  188:		}
       41:  189:		myfree(ptr->impl);
       41:  190:		ptr->impl = NULL;
        -:  191:	}
       41:  192:}
        -:  193:
     6275:  194:int slab_allocator_init_free_list(SlabData *sd, u64 slabs, u64 offset, bool is_64_bit) {
        -:  195:	//  initialize the values of the free list.
  1017019:  196:	for (u64 i = 0; i < slabs; i++) {
  1010744:  197:		if (i == (slabs - 1)) {
      125:  198:			if (is_64_bit)
        2:  199:				((u64 *)(sd->free_list))[i + offset] = UINT64_MAX;
        -:  200:			else
      123:  201:				((u32 *)(sd->free_list))[i + offset] = UINT32_MAX;
        -:  202:		} else {
  1010619:  203:			if (is_64_bit)
      108:  204:				((u64 *)(sd->free_list))[i + offset] = offset + i + 1;
        -:  205:			else
  1010511:  206:				((u32 *)(sd->free_list))[i + offset] = offset + i + 1;
        -:  207:		}
        -:  208:	}
        -:  209:
     6275:  210:	return 0;
        -:  211:}
        -:  212:
     6161:  213:int slab_allocator_init_slab_data(SlabAllocatorImpl *impl, SlabType *st, u64 index) {
     6161:  214:	impl->sd_arr[index].type = *st;
     6161:  215:	if (impl->is_64_bit)
        2:  216:		impl->sd_arr[index].type.slab_size += sizeof(u64) * 3;
        -:  217:	else
     6159:  218:		impl->sd_arr[index].type.slab_size += sizeof(u64) + sizeof(u32) * 2;
     6161:  219:	impl->sd_arr[index].cur_slabs = 0;
     6161:  220:	impl->sd_arr[index].cur_chunks = st->initial_chunks;
     6161:  221:	if (st->initial_chunks > 0) {
       11:  222:		impl->sd_arr[index].free_list_head = 0;
       11:  223:		impl->sd_arr[index].data = mymalloc(sizeof(void *) * st->initial_chunks);
       11:  224:		if (impl->sd_arr[index].data == NULL)
    #####:  225:			return -1;
        -:  226:	} else {
     6150:  227:		impl->sd_arr[index].data = NULL;
     6150:  228:		if (impl->is_64_bit)
    #####:  229:			impl->sd_arr[index].free_list_head = UINT64_MAX;
        -:  230:		else
     6150:  231:			impl->sd_arr[index].free_list_head = UINT32_MAX;
        -:  232:	}
        -:  233:
     6161:  234:	if (st->initial_chunks > 0) {
       11:  235:		if (impl->is_64_bit)
        2:  236:			impl->sd_arr[index].free_list =
        2:  237:				mymalloc(sizeof(u64) * st->slabs_per_resize * st->initial_chunks);
        -:  238:		else
        9:  239:			impl->sd_arr[index].free_list =
        9:  240:				mymalloc(sizeof(u32) * st->slabs_per_resize * st->initial_chunks);
       11:  241:		if (impl->sd_arr[index].free_list == NULL) {
    #####:  242:			myfree(impl->sd_arr[index].data);
    #####:  243:			return -1;
        -:  244:		}
        -:  245:	} else {
     6150:  246:		impl->sd_arr[index].free_list = NULL;
        -:  247:	}
        -:  248:
     6172:  249:	for (u64 i = 0; i < st->initial_chunks; i++) {
       22:  250:		impl->sd_arr[index].data[i] =
       11:  251:			mymalloc(impl->sd_arr[index].type.slab_size * st->slabs_per_resize);
        -:  252:
       11:  253:		if (impl->sd_arr[index].data[i] == NULL) {
    #####:  254:			for (u64 j = 0; j < i; j++) {
    #####:  255:				myfree(impl->sd_arr[index].data[j]);
        -:  256:			}
    #####:  257:			myfree(impl->sd_arr[index].data);
    #####:  258:			return -1;
        -:  259:		}
        -:  260:	}
        -:  261:
     6161:  262:	bool is_64_bit = impl->is_64_bit;
     6161:  263:	slab_allocator_init_free_list(&impl->sd_arr[index], st->initial_chunks * st->slabs_per_resize,
        -:  264:								  0, is_64_bit);
        -:  265:
     6161:  266:	return 0;
        -:  267:}
        -:  268:
    24576:  269:int compare_sd(const void *a, const void *b) {
    24576:  270:	const SlabData *sda = a;
    24576:  271:	const SlabData *sdb = b;
    24576:  272:	if (sda->type.slab_size < sdb->type.slab_size)
    24576:  273:		return -1;
    #####:  274:	else if (sda->type.slab_size > sdb->type.slab_size)
    #####:  275:		return 1;
    #####:  276:	return 0;
        -:  277:}
        -:  278:
       41:  279:int slab_allocator_sort_slab_data(SlabAllocator *ptr) {
       41:  280:	SlabAllocatorImpl *impl = ptr->impl;
       41:  281:	qsort(impl->sd_arr, impl->sd_size, sizeof(SlabData), compare_sd);
       41:  282:	u32 last_slab_size = 0;
     6201:  283:	for (u64 i = 0; i < impl->sd_size; i++) {
     6161:  284:		if (last_slab_size >= impl->sd_arr[i].type.slab_size) {
    #####:  285:			fam_err = IllegalArgument;
    #####:  286:			return -1;
        -:  287:		}
        -:  288:		// for alignment, must be divisible by 8
     6161:  289:		if (impl->sd_arr[i].type.slab_size % 8 != 0) {
    #####:  290:			fam_err = IllegalArgument;
    #####:  291:			return -1;
        -:  292:		}
        -:  293:		// can't have higher max slabs than initial
     6161:  294:		if (impl->sd_arr[i].type.slabs_per_resize * impl->sd_arr[i].type.initial_chunks >
     6161:  295:			impl->sd_arr[i].type.max_slabs) {
    #####:  296:			fam_err = IllegalArgument;
    #####:  297:			return -1;
        -:  298:		}
        -:  299:		// max slabs for 32 bit and 64 bit
    6161*:  300:		if (impl->sd_arr[i].type.max_slabs > (INT32_MAX - 10) && !impl->is_64_bit) {
    #####:  301:			fam_err = IllegalArgument;
    #####:  302:			return -1;
    6161*:  303:		} else if (impl->sd_arr[i].type.max_slabs > (INT64_MAX - 10) && impl->is_64_bit) {
    #####:  304:			fam_err = IllegalArgument;
    #####:  305:			return -1;
        -:  306:		}
        -:  307:
        -:  308:		// max slabs must be dividisble by slabs_per_resize
     6161:  309:		if (impl->sd_arr[i].type.max_slabs % impl->sd_arr[i].type.slabs_per_resize) {
        1:  310:			fam_err = IllegalArgument;
        1:  311:			return -1;
        -:  312:		}
     6160:  313:		last_slab_size = impl->sd_arr[i].type.slab_size;
        -:  314:	}
       40:  315:	return 0;
        -:  316:}
        -:  317:
       41:  318:int slab_allocator_build(SlabAllocator *ptr, const SlabAllocatorConfig *config) {
       41:  319:	ptr->impl = mymalloc(sizeof(SlabAllocatorImpl));
       41:  320:	if (ptr->impl == NULL)
    #####:  321:		return -1;
       41:  322:	SlabAllocatorImpl *impl = ptr->impl;
        -:  323:
       41:  324:	impl->no_malloc = config->no_malloc;
       41:  325:	impl->zeroed = config->zeroed;
       41:  326:	impl->is_64_bit = config->is_64_bit;
       41:  327:	impl->sd_size = config->slab_types_count;
       41:  328:	impl->sd_arr = mymalloc(sizeof(SlabData) * impl->sd_size);
       41:  329:	impl->cur_mallocs = 0;
       41:  330:	if (impl->sd_arr == NULL) {
    #####:  331:		myfree(ptr->impl);
    #####:  332:		return -1;
        -:  333:	}
        -:  334:
     6202:  335:	for (u64 i = 0; i < config->slab_types_count; i++) {
     6161:  336:		if (slab_allocator_init_slab_data(impl, &config->slab_types[i], i)) {
        -:  337:			// cleanup previously allocated slabs
    #####:  338:			impl->sd_size = i;
    #####:  339:			slab_allocator_cleanup(ptr);
    #####:  340:			return -1;
        -:  341:		}
        -:  342:	}
       41:  343:	int ret = slab_allocator_sort_slab_data(ptr);
       41:  344:	if (ret)
        1:  345:		slab_allocator_cleanup(ptr);
       41:  346:	return ret;
        -:  347:}
        -:  348:
  2021954:  349:int slab_allocator_index(const SlabAllocator *ptr, u32 size) {
  2021954:  350:	SlabAllocatorImpl *impl = ptr->impl;
  2021954:  351:	int ret = -1;
  2021954:  352:	if (impl->sd_size == 0)
    #####:  353:		return ret;
        -:  354:
  2021954:  355:	int left = 0;
  2021954:  356:	int right = impl->sd_size - 1;
        -:  357:
  3151930:  358:	while (left <= right) {
  2140973:  359:		int mid = left + (right - left) / 2;
  2140973:  360:		u32 slab_size = impl->sd_arr[mid].type.slab_size;
  2140973:  361:		if (slab_size == size) {
  1010997:  362:			ret = mid;
  1010997:  363:			break;
  1129976:  364:		} else if (slab_size > size)
  1097534:  365:			right = mid - 1;
        -:  366:		else
    32442:  367:			left = mid + 1;
        -:  368:	}
        -:  369:
  2021954:  370:	if (ret == -1 && right + 1 <= impl->sd_size - 1) {
  1010950:  371:		return right + 1;
        -:  372:	}
        -:  373:
  1011004:  374:	return ret;
        -:  375:}
        -:  376:
      128:  377:int slab_data_try_resize(SlabData *sd, FatPtr *fptr, bool is_64_bit, bool zeroed) {
      128:  378:	if (sd->cur_slabs < sd->type.max_slabs) {
        -:  379:		// we can try to resize
        -:  380:		// first try to reallocate the free list
      115:  381:		void *nfree_list = NULL;
        -:  382:		u64 factor;
      115:  383:		if (is_64_bit)
    #####:  384:			factor = sizeof(u64);
        -:  385:		else
      115:  386:			factor = sizeof(u32);
      115:  387:		if (sd->free_list) {
        -:  388:			nfree_list =
       78:  389:				myrealloc(sd->free_list, (1 + sd->cur_chunks) * sd->type.slabs_per_resize * factor);
        -:  390:		} else {
        -:  391:
       37:  392:			nfree_list = mymalloc(sd->type.slabs_per_resize * factor);
        -:  393:		}
      115:  394:		if (nfree_list == NULL)
        1:  395:			return -1;
      114:  396:		sd->free_list = nfree_list;
        -:  397:
        -:  398:		// now try to allocate more slab chunks
        -:  399:		void *ndata;
      114:  400:		if (sd->data == NULL) {
       36:  401:			ndata = mymalloc(sizeof(void *));
        -:  402:		} else {
       78:  403:			ndata = myrealloc(sd->data, sizeof(void *) * (1 + sd->cur_chunks));
        -:  404:		}
      114:  405:		if (ndata == NULL) {
    #####:  406:			return -1;
        -:  407:		}
        -:  408:
      114:  409:		sd->data = ndata;
      114:  410:		sd->data[sd->cur_chunks] = mymalloc(sd->type.slab_size * sd->type.slabs_per_resize);
      114:  411:		if (sd->data[sd->cur_chunks] == NULL)
    #####:  412:			return -1;
        -:  413:
        -:  414:		// data was successfully allocated, make updates.
      114:  415:		slab_allocator_init_free_list(sd, sd->type.slabs_per_resize, sd->cur_slabs, is_64_bit);
      114:  416:		sd->free_list_head = sd->cur_slabs;
      114:  417:		sd->cur_chunks += 1;
        -:  418:
      114:  419:		return slab_data_allocate(sd, fptr, is_64_bit, zeroed);
        -:  420:	}
       13:  421:	return -1;
        -:  422:}
        -:  423:
  1011095:  424:int slab_data_allocate(SlabData *sd, FatPtr *fptr, bool is_64_bit, bool zeroed) {
  1011095:  425:	u64 id = sd->free_list_head;
  1011095:  426:	if (is_64_bit && id == UINT64_MAX) {
        1:  427:		return slab_data_try_resize(sd, fptr, is_64_bit, zeroed);
  1011094:  428:	} else if (!is_64_bit && id == UINT32_MAX) {
      127:  429:		return slab_data_try_resize(sd, fptr, is_64_bit, zeroed);
        -:  430:	}
        -:  431:
  1010967:  432:	if (is_64_bit) {
       22:  433:		sd->free_list_head = ((u64 *)sd->free_list)[id];
        -:  434:
        -:  435:	} else {
  1010945:  436:		sd->free_list_head = ((u32 *)sd->free_list)[id];
        -:  437:	}
        -:  438:
        -:  439:	// set to MAX-1 as a marker that this is allocated
        -:  440:	// if any freed without this value, it's an error
  1010967:  441:	if (is_64_bit)
       22:  442:		((u64 *)sd->free_list)[id] = (UINT64_MAX - 1);
        -:  443:	else
  1010945:  444:		((u32 *)sd->free_list)[id] = (UINT32_MAX - 1);
        -:  445:
  1010967:  446:	u64 len = sd->type.slab_size;
  1010967:  447:	u64 slab_data_index = id / sd->type.slabs_per_resize;
  1010967:  448:	u64 offset_mod = id % sd->type.slabs_per_resize;
        -:  449:
  1010967:  450:	fptr->data = sd->data[slab_data_index] + offset_mod * sd->type.slab_size;
        -:  451:
        -:  452:	u64 data_len;
        -:  453:	u8 *data_ptr;
  1010967:  454:	if (is_64_bit) {
       22:  455:		FatPtr64Impl *fptr64 = fptr->data;
       22:  456:		fptr64->id = (id * 2) + 1;
       22:  457:		fptr64->len = len - 3 * sizeof(u64);
       22:  458:		fptr64->data = fptr->data + 3 * sizeof(u64);
       22:  459:		data_len = fptr64->len;
       22:  460:		data_ptr = fptr64->data;
        -:  461:	} else {
  1010945:  462:		FatPtr32Impl *fptr32 = fptr->data;
  1010945:  463:		fptr32->id = (id * 2);
  1010945:  464:		fptr32->len = len - (2 * sizeof(u32) + sizeof(u64));
  1010945:  465:		fptr32->data = fptr->data + 2 * sizeof(u32) + sizeof(u64);
  1010945:  466:		data_len = fptr32->len;
  1010945:  467:		data_ptr = fptr32->data;
        -:  468:	}
        -:  469:
  1010967:  470:	sd->cur_slabs += 1;
  1010967:  471:	if (zeroed) {
      500:  472:		for (u64 i = 0; i < data_len; i++) {
      480:  473:			data_ptr[i] = 0;
        -:  474:		}
        -:  475:	}
        -:  476:
  1010967:  477:	return 0;
        -:  478:}
        -:  479:
  1010966:  480:void slab_data_free(SlabData *sd, const FatPtr *fptr, bool is_64_bit, bool zeroed) {
        -:  481:	u64 data_len;
        -:  482:	u8 *data_ptr;
  1010966:  483:	if (sd->free_list == NULL) {
    #####:  484:		panic("free list not initialized (wrong slab allocator?)");
        -:  485:	}
        -:  486:
  1010966:  487:	if (is_64_bit) {
       22:  488:		FatPtr64Impl *fptr64 = fptr->data;
       22:  489:		data_len = fptr64->len;
       22:  490:		data_ptr = fptr64->data;
       22:  491:		u64 id = (fptr64->id - 1) / 2;
       22:  492:		if (((u64 *)sd->free_list)[id] != (UINT64_MAX - 1)) {
    #####:  493:			panic("Potential double free. Id = %llu.\n", id);
        -:  494:		}
       22:  495:		((u64 *)sd->free_list)[id] = sd->free_list_head;
       22:  496:		sd->free_list_head = id;
       22:  497:		if (sd->cur_slabs == 0)
    #####:  498:			panic("Potential double free. Id = %llu. Freeing slabs when none are allocated.\n", id);
       22:  499:		sd->cur_slabs -= 1;
        -:  500:	} else {
  1010944:  501:		FatPtr32Impl *fptr32 = fptr->data;
  1010944:  502:		data_len = fptr32->len;
  1010944:  503:		data_ptr = fptr32->data;
  1010944:  504:		u32 id = (fptr32->id) / 2;
  1010944:  505:		if (((u32 *)sd->free_list)[id] != (UINT32_MAX - 1)) {
    #####:  506:			panic("Potential double free. Id = %llu.\n", id);
        -:  507:		}
  1010944:  508:		((u32 *)sd->free_list)[id] = sd->free_list_head;
  1010944:  509:		sd->free_list_head = id;
  1010944:  510:		if (sd->cur_slabs == 0)
    #####:  511:			panic("Potential double free. Id = %llu. Freeing slabs when none are allocated.\n", id);
  1010944:  512:		sd->cur_slabs -= 1;
        -:  513:	}
        -:  514:
  1010966:  515:	if (zeroed) {
      500:  516:		for (u64 i = 0; i < data_len; i++) {
      480:  517:			data_ptr[i] = 0;
        -:  518:		}
        -:  519:	}
  1010966:  520:}
        -:  521:
  1010988:  522:int slab_allocator_allocate(SlabAllocator *ptr, u32 size, FatPtr *fptr) {
  1010988:  523:	if (size == 0) {
    #####:  524:		fam_err = IllegalArgument;
    #####:  525:		return -1;
        -:  526:	}
        -:  527:
  1010988:  528:	SlabAllocatorImpl *impl = ((SlabAllocatorImpl *)ptr->impl);
  1010988:  529:	bool is_64_bit = impl->is_64_bit;
  1010988:  530:	bool zeroed = impl->zeroed;
        -:  531:	u32 needed;
  1010988:  532:	if (is_64_bit)
       23:  533:		needed = size + 3 * sizeof(u64);
        -:  534:	else
  1010965:  535:		needed = size + 2 * sizeof(u32) + sizeof(u64);
  1010988:  536:	int index = slab_allocator_index(ptr, needed);
        -:  537:	int ret;
  1010988:  538:	if (impl->no_malloc && index < 0) {
        7:  539:		fam_err = AllocErr;
        7:  540:		return -1;
  1010981:  541:	} else if (index < 0) {
    #####:  542:		ret = -1;
        -:  543:	} else {
  1010981:  544:		SlabData *sd = &impl->sd_arr[index];
  1010981:  545:		ret = slab_data_allocate(sd, fptr, is_64_bit, zeroed);
        -:  546:	}
        -:  547:
        -:  548:	// we couldn't allocate via slabs. Use malloc if configured.
  1010981:  549:	if (ret && !impl->no_malloc) {
        -:  550:		void *val;
        -:  551:		u64 data_len;
        -:  552:
        3:  553:		if (is_64_bit) {
    #####:  554:			data_len = size + (3 * sizeof(u64));
    #####:  555:			val = mymalloc(data_len);
        -:  556:		} else {
        3:  557:			data_len = size + (2 * sizeof(u32) + sizeof(u64));
        3:  558:			val = mymalloc(data_len);
        -:  559:		}
        -:  560:
        -:  561:		// malloc error
        3:  562:		if (!val) {
        1:  563:			fam_err = AllocErr;
        1:  564:			return -1;
        -:  565:		}
        -:  566:
        2:  567:		if (zeroed) {
       25:  568:			for (u64 i = 0; i < data_len; i++) {
       24:  569:				((u8 *)val)[i] = 0;
        -:  570:			}
        -:  571:		}
        -:  572:
        2:  573:		impl->cur_mallocs++;
        2:  574:		ret = 0;
        2:  575:		fptr->data = val;
        -:  576:
        2:  577:		if (is_64_bit) {
    #####:  578:			FatPtr64Impl *fptr64 = fptr->data;
    #####:  579:			fptr64->id = MALLOC_64_ID;
    #####:  580:			fptr64->len = size;
    #####:  581:			fptr64->data = fptr->data + 3 * sizeof(u64);
        -:  582:		} else {
        2:  583:			FatPtr32Impl *fptr32 = fptr->data;
        2:  584:			fptr32->id = MALLOC_32_ID;
        2:  585:			fptr32->len = size;
        2:  586:			fptr32->data = fptr->data + 2 * sizeof(u32) + sizeof(u64);
        -:  587:		}
        -:  588:	}
  1010980:  589:	if (ret < 0)
       11:  590:		fam_err = AllocErr;
        -:  591:
  1010980:  592:	return ret;
        -:  593:}
  1010968:  594:void slab_allocator_free(SlabAllocator *ptr, FatPtr *fptr) {
  1010968:  595:	if (fptr == NULL || nil(*fptr)) {
    #####:  596:		panic("Freeing a slab that's already nil. Double free?");
        -:  597:	}
  1010968:  598:	SlabAllocatorImpl *impl = ptr->impl;
  1010968:  599:	bool is_64_bit = impl->is_64_bit;
        -:  600:
  1010968:  601:	if (is_64_bit) {
       22:  602:		FatPtr64Impl *fptr64 = fptr->data;
       22:  603:		if (fptr64->id == MALLOC_64_ID) {
    #####:  604:			if (fptr->data) {
    #####:  605:				if (impl->zeroed) {
    #####:  606:					for (u64 i = 0; i < fptr64->len + 3 * sizeof(u64); i++) {
    #####:  607:						((u8 *)fptr->data)[i] = 0;
        -:  608:					}
        -:  609:				}
    #####:  610:				if (impl->cur_mallocs == 0)
    #####:  611:					panic("Freeing malloc allocated pointer when none are pending. Double free?");
    #####:  612:				myfree(fptr->data);
    #####:  613:				impl->cur_mallocs--;
        -:  614:			}
    #####:  615:			*fptr = null;
    #####:  616:			return;
        -:  617:		}
        -:  618:	} else {
  1010946:  619:		FatPtr32Impl *fptr32 = fptr->data;
  1010946:  620:		if (fptr32->id == MALLOC_32_ID) {
        2:  621:			if (fptr->data) {
        2:  622:				if (impl->zeroed) {
       17:  623:					for (u64 i = 0; i < fptr32->len + 2 * sizeof(u32) + sizeof(u64); i++) {
       16:  624:						((u8 *)fptr->data)[i] = 0;
        -:  625:					}
        -:  626:				}
        2:  627:				if (impl->cur_mallocs == 0)
    #####:  628:					panic("Freeing malloc allocated pointer when none are pending. Double free?");
        2:  629:				myfree(fptr->data);
        2:  630:				impl->cur_mallocs--;
        -:  631:			}
        2:  632:			*fptr = null;
        2:  633:			return;
        -:  634:		}
        -:  635:	}
        -:  636:
        -:  637:	u32 needed;
  1010966:  638:	if (is_64_bit)
       22:  639:		needed = fat_ptr_len(fptr) + 3 * sizeof(u64);
        -:  640:	else
  1010944:  641:		needed = fat_ptr_len(fptr) + 2 * sizeof(u32) + sizeof(u64);
  1010966:  642:	int index = slab_allocator_index(ptr, needed);
  1010966:  643:	if (index < 0)
    #####:  644:		panic("Freeing a slab with an unknown slab size %llu.\n", needed);
  1010966:  645:	SlabData *sd = &((SlabAllocatorImpl *)ptr->impl)->sd_arr[index];
  1010966:  646:	if (needed != sd->type.slab_size)
    #####:  647:		panic("Freeing a slab with an unknown slab size %llu.\n", needed);
  1010966:  648:	slab_data_free(sd, fptr, ((SlabAllocatorImpl *)ptr->impl)->is_64_bit,
  1010966:  649:				   ((SlabAllocatorImpl *)ptr->impl)->zeroed);
  1010966:  650:	*fptr = null;
        -:  651:}
       42:  652:u64 slab_allocator_cur_slabs_allocated(const SlabAllocator *ptr) {
       42:  653:	SlabAllocatorImpl *impl = ptr->impl;
       42:  654:	u64 ret = impl->cur_mallocs;
        -:  655:
     5949:  656:	for (u64 i = 0; i < impl->sd_size; i++) {
     5907:  657:		ret += impl->sd_arr[i].cur_slabs;
        -:  658:	}
       42:  659:	return ret;
        -:  660:}
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:80
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/types.h>
        -:   16:#include <stdatomic.h>
        -:   17:#include <stddef.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:
       80:   21:bool __is_little_endian() {
       80:   22:	u16 test = 0x1;
       80:   23:	return (*(u8 *)&test == 0x1);
        -:   24:}
        -:   25:
       80:   26:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   27:	if (sizeof(size_t) != 8) {
        -:   28:		fprintf(stderr, "Error: This program requires a 64-bit architecture to run.\n");
        -:   29:		exit(EXIT_FAILURE);
        -:   30:	}
        -:   31:
        -:   32:	if (sizeof(u8) != 1 || sizeof(u16) != 2 || sizeof(u32) != 4 || sizeof(u64) != 8 ||
        -:   33:		sizeof(u128) != 16 || sizeof(i8) != 1 || sizeof(i16) != 2 || sizeof(i32) != 4 ||
        -:   34:		sizeof(i64) != 8 || sizeof(i128) != 16 || sizeof(f32) != 4 || sizeof(f64) != 8 ||
        -:   35:		sizeof(bool) != 1) {
        -:   36:		fprintf(stderr, "Invalid data type size! Check your c compiler configuration options.\n");
        -:   37:		exit(EXIT_FAILURE);
        -:   38:	}
        -:   39:
       80:   40:	if (!__is_little_endian()) {
    #####:   41:		fprintf(stderr, "Big endian systems not supported");
    #####:   42:		exit(EXIT_FAILURE);
        -:   43:	}
        -:   44:
        -:   45:	if (sizeof(atomic_ullong) != 8) {
        -:   46:		fprintf(
        -:   47:			stderr,
        -:   48:			"Error: Unexpected size for atomic_ullong. Check your compiler and architecture.\n");
        -:   49:		exit(EXIT_FAILURE);
        -:   50:	}
       80:   51:}
        -:    0:Source:lexer.c
        -:    0:Graph:lexer.gcno
        -:    0:Data:lexer.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/misc.h>
        -:   17:#include <errno.h>
        -:   18:#include <lexer/lexer.h>
        -:   19:#include <lexer/lexer_state.h>
        -:   20:#include <lexer/tokenizer_state.h>
        -:   21:#include <stdio.h>
        -:   22:#include <stdlib.h>
        -:   23:#include <string.h>
        -:   24:
      297:   25:char *lexer_read_line(Lexer *l) {
      297:   26:	char *ret = NULL;
      297:   27:	u64 count = 0;
        2:   28:	while (true) {
      299:   29:		if (ret == NULL) {
      297:   30:			ret = mymalloc(sizeof(char) * LEXER_BUF_SIZE);
      297:   31:			strcpy(ret, "");
        -:   32:		} else {
        2:   33:			char *tmp = myrealloc(ret, sizeof(char) * LEXER_BUF_SIZE * (1 + count));
        2:   34:			if (tmp == NULL) {
    #####:   35:				myfree(ret);
    #####:   36:				return NULL;
        -:   37:			}
        2:   38:			ret = tmp;
        -:   39:		}
      299:   40:		u64 str_len = strlen(ret);
      299:   41:		if (myfgets(ret + str_len, LEXER_BUF_SIZE, l->fp) == NULL) {
        5:   42:			myfree(ret);
        5:   43:			return NULL;
        -:   44:		}
        -:   45:
      294:   46:		count += 1;
      294:   47:		str_len = strlen(ret);
      294:   48:		if (str_len >= (count * (LEXER_BUF_SIZE - 1)))
        2:   49:			continue;
        -:   50:
      292:   51:		return ret;
        -:   52:	}
        -:   53:}
        -:   54:
        5:   55:int lexer_init(Lexer *l, const Path *file) {
        -:   56:	// file/lexer cannot be null
        5:   57:	if (file == NULL || l == NULL) {
    #####:   58:		errno = EINVAL;
    #####:   59:		return LexerStateErr;
        -:   60:	}
        -:   61:
        5:   62:	l->fp = NULL;
        5:   63:	l->tokenizer = NULL;
        5:   64:	l->line_num = 1;
        -:   65:
        5:   66:	if (path_copy(&l->file, file)) {
    #####:   67:		errno = ENOMEM;
    #####:   68:		return LexerStateErr;
        -:   69:	}
        -:   70:
        -:   71:	// open the file for reading
        5:   72:	l->fp = myfopen(file, "r");
        -:   73:
        -:   74:	// if file cannot be read return error
        5:   75:	if (l->fp == NULL) {
    #####:   76:		return LexerStateErr;
        -:   77:	}
        -:   78:
        -:   79:	// allocate memory for the tokenizer
        5:   80:	l->tokenizer = mymalloc(sizeof(Tokenizer));
        -:   81:
        5:   82:	if (l->tokenizer == NULL) {
        -:   83:		// memory allocation err
    #####:   84:		lexer_cleanup(l);
    #####:   85:		return LexerStateErr;
        -:   86:	}
        -:   87:
        5:   88:	char *buf = lexer_read_line(l);
        5:   89:	if (buf == NULL) {
    #####:   90:		lexer_cleanup(l);
    #####:   91:		return LexerStateErr;
        -:   92:	}
        -:   93:
        -:   94:	// try to init the tokenizer
        5:   95:	if (tokenizer_init(l->tokenizer, buf) != TokenizerStateOk) {
    #####:   96:		lexer_cleanup(l);
    #####:   97:		myfree(buf);
    #####:   98:		return LexerStateErr;
        -:   99:	} else {
        5:  100:		myfree(buf);
        5:  101:		return LexerStateOk;
        -:  102:	}
        -:  103:}
        -:  104:
      964:  105:int lexer_next_token(Lexer *l, Token *token) {
        -:  106:	// read the next token
      964:  107:	int state = tokenizer_next_token(l->tokenizer, token);
      964:  108:	char *line = NULL;
      964:  109:	token->span = NULL;
        -:  110:
        -:  111:	// if we're complete keep trying to get more lines until we have a token
        -:  112:	// or we're at the end of file
     1251:  113:	while (state == TokenizerStateComplete || state == TokenizerStateCompleteInComment) {
        -:  114:		// cleanup the previous tokenizer
      292:  115:		tokenizer_cleanup(l->tokenizer);
        -:  116:
      292:  117:		char *buf = lexer_read_line(l);
        -:  118:
      292:  119:		if (buf == NULL) {
        5:  120:			if (line)
        1:  121:				myfree(line);
        5:  122:			if (state == TokenizerStateCompleteInComment)
    #####:  123:				return LexerStateErr;
        -:  124:			else
        5:  125:				return LexerStateComplete;
        -:  126:		}
        -:  127:
      287:  128:		l->line_num += 1;
        -:  129:
        -:  130:		// try to init again
      287:  131:		if (tokenizer_init(l->tokenizer, buf) != TokenizerStateOk) {
    #####:  132:			myfree(buf);
    #####:  133:			if (line) {
    #####:  134:				myfree(line);
        -:  135:			}
    #####:  136:			return LexerStateErr;
        -:  137:		}
        -:  138:
      287:  139:		state = tokenizer_next_token(l->tokenizer, token);
      287:  140:		if (line)
       89:  141:			myfree(line);
      287:  142:		line = mymalloc(sizeof(char) * (1 + strlen(buf)));
      287:  143:		strcpy(line, buf);
      287:  144:		myfree(buf);
        -:  145:	}
        -:  146:
      959:  147:	if (line == NULL) {
      762:  148:		line = mymalloc((strlen(l->tokenizer->s) + 1) * sizeof(char));
      762:  149:		strcpy(line, l->tokenizer->s);
        -:  150:	}
        -:  151:
      959:  152:	if (state == TokenizerStateOk) {
      956:  153:		token->line_num = l->line_num;
      956:  154:		if (line == NULL)
    #####:  155:			token->span = NULL;
      956:  156:		else {
      956:  157:			int num_width = snprintf(NULL, 0, "%llu", l->line_num);
      956:  158:			int token_width = snprintf(NULL, 0, "%s", token->token);
        -:  159:			char spacer[100];
      956:  160:			int lsl = (l->tokenizer->pos + 1) - (token_width - 1);
      956:  161:			if (lsl <= 0)
    #####:  162:				lsl = 1;
      956:  163:			char long_spacer[lsl];
      956:  164:			bool has_tab = false;
    39764:  165:			for (int i = 0; i < lsl; i++) {
    38808:  166:				if (i < l->tokenizer->pos && l->tokenizer->s[i] == '\t') {
     1423:  167:					has_tab = true;
     1423:  168:					long_spacer[i] = '\t';
        -:  169:				} else {
    37385:  170:					long_spacer[i] = ' ';
        -:  171:				}
        -:  172:			}
      956:  173:			if (has_tab)
      798:  174:				long_spacer[lsl - 2] = 0;
      956:  175:			long_spacer[lsl - 1] = 0;
     3401:  176:			for (int i = 0; i < num_width && i < 100; i++) {
     2445:  177:				spacer[i] = ' ';
        -:  178:			}
      956:  179:			if (num_width < 100)
      956:  180:				spacer[num_width] = 0;
        -:  181:
        -:  182:			int span_len =
     1912:  183:				snprintf(NULL, 0,
        -:  184:						 "%s%s-->%s %s:%llu:%i\n%s %s|\n%llu | %s%s"
        -:  185:						 "%s %s|%s%s^\n",
      956:  186:						 spacer, CYAN, RESET, path_to_string(&l->file), l->line_num, lsl, spacer,
        -:  187:						 CYAN, l->line_num, RESET, line, spacer, CYAN, RESET, long_spacer);
      956:  188:			token->span = mymalloc((span_len + 1) * sizeof(char));
      956:  189:			if (token->span == NULL) {
    #####:  190:				myfree(line);
    #####:  191:				return LexerStateErr;
        -:  192:			}
     1912:  193:			snprintf(token->span, span_len + 1,
        -:  194:					 "%s%s-->%s %s:%llu:%i\n%s %s|\n%llu | %s%s"
        -:  195:					 "%s %s|%s%s^\n",
      956:  196:					 spacer, CYAN, RESET, path_to_string(&l->file), l->line_num, lsl, spacer, CYAN,
        -:  197:					 l->line_num, RESET, line, spacer, CYAN, RESET, long_spacer);
      956:  198:			myfree(line);
        -:  199:		}
        -:  200:
      956:  201:		return LexerStateOk;
        -:  202:	} else {
        3:  203:		if (line)
        3:  204:			myfree(line);
        3:  205:		return LexerStateErr;
        -:  206:	}
        -:  207:}
        -:  208:
        8:  209:void lexer_cleanup(Lexer *l) {
        -:  210:	// check if fp is NULL and close it then set to NULL so this can be
        -:  211:	// called multiple times
        8:  212:	if (l->fp != NULL) {
        5:  213:		myfclose(l->fp);
        5:  214:		l->fp = NULL;
        -:  215:	}
        -:  216:
        -:  217:	// same for the tokenizer
        8:  218:	if (l->tokenizer != NULL) {
        5:  219:		tokenizer_cleanup(l->tokenizer);
        5:  220:		myfree(l->tokenizer);
        5:  221:		l->tokenizer = NULL;
        -:  222:	}
        -:  223:
        -:  224:	// cleanup file path
        8:  225:	path_cleanup(&l->file);
        8:  226:}
        -:    0:Source:tokenizer.c
        -:    0:Graph:tokenizer.gcno
        -:    0:Data:tokenizer.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/resources.h>
        -:   17:#include <errno.h>
        -:   18:#include <lexer/tokenizer.h>
        -:   19:#include <lexer/tokenizer_state.h>
        -:   20:#include <stdarg.h>
        -:   21:#include <stdio.h>
        -:   22:#include <string.h>
        -:   23:
      318:   24:int tokenizer_init(Tokenizer *t, const char *line) {
        -:   25:	// check input
      318:   26:	if (line == NULL || t == NULL) {
        1:   27:		errno = EINVAL;
        1:   28:		return TokenizerStateErr;
        -:   29:	}
        -:   30:
        -:   31:	// copy the input string
      317:   32:	t->len = strlen(line);
      317:   33:	t->s = mymalloc(sizeof(char) * (1 + t->len));
      317:   34:	if (t->s == NULL) {
        1:   35:		return TokenizerStateErr;
        -:   36:	}
      316:   37:	strcpy(t->s, line);
        -:   38:
        -:   39:	// set pos to 0
      316:   40:	t->pos = 0;
        -:   41:
      316:   42:	t->in_comment = false;
        -:   43:
      316:   44:	return TokenizerStateOk;
        -:   45:}
        -:   46:
     2506:   47:bool tokenizer_is_white_space(Tokenizer *t) {
     2506:   48:	char ch = t->s[t->pos];
        -:   49:	// check for std whitespace chars
     2506:   50:	if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\v' || ch == '\f' || ch == '\r')
     1225:   51:		return true;
     1281:   52:	return false;
        -:   53:}
        -:   54:
     1487:   55:int tokenizer_skip_comments(Tokenizer *t, Token *next) {
     1487:   56:	if (t->pos + 1 >= t->len)
      312:   57:		return TokenizerStateOk;
        -:   58:
     1175:   59:	char ch1 = t->s[t->pos];
     1175:   60:	char ch2 = t->s[t->pos + 1];
     1175:   61:	bool is_doc_comment = false;
        -:   62:
     1267:   63:	if (ch1 == '/' && ch2 == '/') {
       92:   64:		u64 start_doc = t->pos;
       92:   65:		if (t->pos + 2 < t->len) {
        -:   66:			// check if we're in a doc comment
       91:   67:			if (t->s[t->pos + 2] == '/') {
        -:   68:				// in doc comment
       13:   69:				is_doc_comment = true;
       13:   70:				t->pos = t->pos + 3;
       13:   71:				start_doc = t->pos;
        -:   72:			}
        -:   73:		}
        -:   74:
       92:   75:		bool found_start = false;
        -:   76:
        -:   77:		while (true) {
     3861:   78:			if (t->pos >= t->len || t->s[t->pos] == '\n')
        -:   79:				break;
        -:   80:
     3769:   81:			if (!found_start && tokenizer_is_white_space(t)) {
       23:   82:				start_doc = t->pos + 1;
        -:   83:			} else {
     3746:   84:				found_start = true;
        -:   85:			}
     3769:   86:			t->pos += 1;
        -:   87:		}
        -:   88:
       92:   89:		if (is_doc_comment) {
       13:   90:			next->type = TokenTypeDoc;
       13:   91:			u64 end_doc = t->pos;
       13:   92:			if (end_doc < start_doc)
    #####:   93:				end_doc = start_doc;
       13:   94:			u64 doc_size = end_doc - start_doc;
       13:   95:			next->token = mymalloc(sizeof(char) * (doc_size + 1));
       13:   96:			memcpy(next->token, t->s + start_doc, doc_size);
       13:   97:			next->token[doc_size] = 0;
        -:   98:		}
        -:   99:
     1083:  100:	} else if (ch1 == '/' && ch2 == '*') {
       12:  101:		t->in_comment = true;
       12:  102:		t->pos += 1;
        -:  103:		while (true) {
      172:  104:			if (t->pos >= t->len || (t->s[t->pos - 1] == '*' && t->s[t->pos] == '/')) {
       12:  105:				if (t->pos < t->len) {
       11:  106:					t->in_comment = false;
       11:  107:					t->pos += 1;
        -:  108:				}
        -:  109:
       16:  110:				while (t->pos < t->len) {
       12:  111:					if (!tokenizer_is_white_space(t))
        8:  112:						break;
        4:  113:					t->pos += 1;
        -:  114:				}
       12:  115:				break;
        -:  116:			}
      160:  117:			t->pos += 1;
        -:  118:		}
        -:  119:	}
        -:  120:
     1175:  121:	return TokenizerStateOk;
        -:  122:}
        -:  123:
     2685:  124:int tokenizer_skip_white_space(Tokenizer *t, Token *next) {
        -:  125:	while (true) {
        -:  126:		// if we're at the end of the string or not in white space break
     2685:  127:		if (t->pos >= t->len || !tokenizer_is_white_space(t))
        -:  128:			break;
        -:  129:
     1198:  130:		t->pos += 1;
        -:  131:	}
        -:  132:
     1487:  133:	return TokenizerStateOk;
        -:  134:}
        -:  135:
     1487:  136:int tokenizer_skip_to_token(Tokenizer *t, Token *next) {
        -:  137:	while (true) {
     1487:  138:		tokenizer_skip_white_space(t, next);
     1487:  139:		tokenizer_skip_comments(t, next);
        -:  140:
     1487:  141:		if (t->pos >= t->len || (t->s[t->pos] != '\n' && t->s[t->pos] != '/') ||
       89:  142:			next->type == TokenTypeDoc)
        -:  143:			break;
        -:  144:	}
        -:  145:
     1410:  146:	if (t->pos >= t->len && next->type != TokenTypeDoc) {
      315:  147:		if (t->in_comment)
        1:  148:			return TokenizerStateCompleteInComment;
      314:  149:		return TokenizerStateComplete;
        -:  150:	}
        -:  151:
     1095:  152:	return TokenizerStateOk;
        -:  153:}
        -:  154:
      414:  155:int tokenizer_proc_ident(Tokenizer *t, Token *next) {
      414:  156:	next->type = TokenTypeIdent;
      414:  157:	u64 start = t->pos;
     3588:  158:	while (true) {
        -:  159:		// if we're at the end of the string, break
     4002:  160:		if (t->pos >= t->len)
        3:  161:			break;
        -:  162:
     3999:  163:		char ch = t->s[t->pos];
        -:  164:
        -:  165:		// continue until non-ident char
     3999:  166:		if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == '_' ||
     2427:  167:			  (ch >= '0' && ch <= '9'))) {
        -:  168:			break;
        -:  169:		}
     3588:  170:		t->pos += 1;
        -:  171:	}
      414:  172:	u64 end = t->pos;
      414:  173:	u64 tlen = end - start;
        -:  174:
        -:  175:	// allocate and copy over the token
      414:  176:	next->token = mymalloc(sizeof(char) * (tlen + 1));
      414:  177:	if (next->token == NULL)
    #####:  178:		return TokenizerStateErr;
      414:  179:	memcpy(next->token, t->s + start, tlen);
      414:  180:	next->token[tlen] = 0;
        -:  181:
      414:  182:	return TokenizerStateOk;
        -:  183:}
        -:  184:
       12:  185:int tokenizer_proc_string_literal(Tokenizer *t, Token *next) {
       12:  186:	next->type = TokenTypeStringLiteral;
       12:  187:	u64 start = t->pos;
       97:  188:	while (true) {
        -:  189:		// if we're at the end of the string, break
      109:  190:		if (t->pos >= t->len)
    #####:  191:			break;
        -:  192:
      109:  193:		char ch = t->s[t->pos];
        -:  194:
        -:  195:		// continue until literal termination char
      109:  196:		if (ch == '\"' && t->pos != start) {
       12:  197:			t->pos += 1;
       12:  198:			break;
        -:  199:		}
       97:  200:		t->pos += 1;
        -:  201:	}
       12:  202:	u64 end = t->pos;
       12:  203:	u64 tlen = end - start;
        -:  204:
        -:  205:	// allocate and copy over the token
       12:  206:	next->token = mymalloc(sizeof(char) * (tlen + 1));
       12:  207:	if (next->token == NULL)
    #####:  208:		return TokenizerStateErr;
       12:  209:	memcpy(next->token, t->s + start, tlen);
       12:  210:	next->token[tlen] = 0;
        -:  211:
       12:  212:	return TokenizerStateOk;
        -:  213:}
        -:  214:
        1:  215:int tokenizer_proc_char_literal(Tokenizer *t, Token *next) {
        1:  216:	next->type = TokenTypeCharLiteral;
        1:  217:	u64 start = t->pos;
        2:  218:	while (true) {
        -:  219:		// if we're at the end of the string, break
        3:  220:		if (t->pos >= t->len)
    #####:  221:			break;
        -:  222:
        3:  223:		char ch = t->s[t->pos];
        -:  224:
        -:  225:		// continue until literal termination char
        3:  226:		if (ch == '\'' && t->pos != start) {
        1:  227:			t->pos += 1;
        1:  228:			break;
        -:  229:		}
        2:  230:		t->pos += 1;
        -:  231:	}
        1:  232:	u64 end = t->pos;
        1:  233:	u64 tlen = end - start;
        -:  234:
        -:  235:	// allocate and copy over the token
        1:  236:	next->token = mymalloc(sizeof(char) * (tlen + 1));
        1:  237:	if (next->token == NULL)
    #####:  238:		return TokenizerStateErr;
        1:  239:	memcpy(next->token, t->s + start, tlen);
        1:  240:	next->token[tlen] = 0;
        -:  241:
        1:  242:	return TokenizerStateOk;
        -:  243:}
        -:  244:
       76:  245:int tokenizer_proc_num_literal(Tokenizer *t, Token *next) {
       76:  246:	int ret = TokenizerStateOk;
       76:  247:	next->type = TokenTypeNumLiteral;
       76:  248:	u64 start = t->pos;
      195:  249:	while (true) {
        -:  250:		// if we're at the end of the string, break
      271:  251:		if (t->pos >= t->len)
        4:  252:			break;
        -:  253:
      267:  254:		char ch = t->s[t->pos];
        -:  255:
        -:  256:		// continue until literal termination char (we allow all
        -:  257:		// chars needed for the various types at the tokenizer
        -:  258:		// level. Checking the order, etc is done at a later
        -:  259:		// phase)
      267:  260:		if (t->pos == start) {
       76:  261:			if (!(ch == '-' || (ch >= '0' && ch <= '9')))
        -:  262:				break;
      261:  263:		} else if (!((ch >= '0' && ch <= '9') || ch == '.' || ch == '_' || ch == 'u' || ch == 'i' ||
       77:  264:					 ch == 's' || ch == 'z' || ch == 'e' || ch == 'f' || ch == 'x'))
       69:  265:			break;
      198:  266:		if (ch == '.') {
       10:  267:			if (next->type == TokenTypeFloatLiteral) {
        -:  268:				// cannot have more than one dot.
        3:  269:				return TokenizerStateErr;
        -:  270:			}
        7:  271:			next->type = TokenTypeFloatLiteral;
        -:  272:		}
      195:  273:		t->pos += 1;
        -:  274:	}
       73:  275:	u64 end = t->pos;
       73:  276:	u64 tlen = end - start;
        -:  277:
        -:  278:	// special case of lone minus sign is a punct, not a literal
       73:  279:	if (tlen == 1 && t->s[start] == '-') {
       20:  280:		next->type = TokenTypePunct;
        -:  281:		// we also must deal with these: -= and ->
       20:  282:		if (t->pos < t->len) {
       20:  283:			if (t->s[t->pos] == '=' || t->s[t->pos] == '>') {
       18:  284:				t->pos += 1;
       18:  285:				end = t->pos;
       18:  286:				tlen = end - start;
        -:  287:			}
        -:  288:		}
        -:  289:	}
        -:  290:
        -:  291:	// allocate and copy over the token
       73:  292:	next->token = mymalloc(sizeof(char) * (tlen + 1));
       73:  293:	if (next->token == NULL)
    #####:  294:		return TokenizerStateErr;
       73:  295:	memcpy(next->token, t->s + start, tlen);
       73:  296:	next->token[tlen] = 0;
        -:  297:
       73:  298:	return ret;
        -:  299:}
        -:  300:
      574:  301:bool is_second_punct(char ch1, char ch2) {
      574:  302:	if (ch1 == '!' && ch2 == '=')
        2:  303:		return true;
     572*:  304:	if (ch1 == '%' && ch2 == '%')
    #####:  305:		return true;
      572:  306:	if (ch1 == '&' && (ch2 == '&' || ch2 == '='))
    #####:  307:		return true;
      572:  308:	if (ch1 == '*' && ch2 == '=')
    #####:  309:		return true;
      572:  310:	if (ch1 == '+' && ch2 == '=')
        2:  311:		return true;
     570*:  312:	if (ch1 == '-' && (ch2 == '=' || ch2 == '>'))
    #####:  313:		return true;
     570*:  314:	if (ch1 == '/' && ch2 == '=')
    #####:  315:		return true;
     570*:  316:	if (ch1 == '^' && ch2 == '=')
    #####:  317:		return true;
      570:  318:	if (ch1 == '|' && (ch2 == '=' || ch2 == '|'))
    #####:  319:		return true;
      570:  320:	if (ch1 == '=' && (ch2 == '>' || ch2 == '='))
        6:  321:		return true;
      564:  322:	if (ch1 == ':' && ch2 == ':')
       17:  323:		return true;
      547:  324:	if (ch1 == '<' && (ch2 == '<' || ch2 == '=' || ch2 == '-'))
    #####:  325:		return true;
      547:  326:	if (ch1 == '>' && (ch2 == '>' || ch2 == '='))
    #####:  327:		return true;
      547:  328:	if (ch1 == '.' && ch2 == '.')
    #####:  329:		return true;
        -:  330:
      547:  331:	return false;
        -:  332:}
    #####:  333:bool is_third_punct(char ch1, char ch2, char ch3) {
    #####:  334:	if (ch1 == '<' && ch2 == '<' && ch3 == '=')
    #####:  335:		return true;
    #####:  336:	if (ch1 == '>' && ch2 == '>' && ch3 == '=')
    #####:  337:		return true;
    #####:  338:	if (ch1 == '.' && ch2 == '.' && ch3 == '.')
    #####:  339:		return true;
    #####:  340:	if (ch1 == '.' && ch2 == '.' && ch3 == '=')
    #####:  341:		return true;
    #####:  342:	return false;
        -:  343:}
        -:  344:
      579:  345:int tokenizer_proc_punct(Tokenizer *t, Token *next) {
      579:  346:	next->type = TokenTypePunct;
        -:  347:
      579:  348:	char ch1 = t->s[t->pos];
      579:  349:	char ch2 = t->pos + 1 < t->len && is_second_punct(ch1, t->s[t->pos + 1]) ? t->s[t->pos + 1] : 0;
     579*:  350:	char ch3 = t->pos + 2 < t->len && ch3 != 0 && is_third_punct(ch1, ch2, t->s[t->pos + 2])
    #####:  351:				   ? t->s[t->pos + 2]
        -:  352:				   : 0;
        -:  353:
        -:  354:	// allocate and copy over the token
      579:  355:	next->token = mymalloc(sizeof(char) * 5);
      579:  356:	if (next->token == NULL)
    #####:  357:		return TokenizerStateErr;
        -:  358:
      579:  359:	next->token[0] = ch1;
      579:  360:	next->token[1] = ch2;
      579:  361:	next->token[2] = ch3;
      579:  362:	next->token[4] = 0;
        -:  363:
      579:  364:	t->pos += 1;
      579:  365:	if (ch2 != 0)
       27:  366:		t->pos += 1;
     579*:  367:	if (ch3 != 0 && ch2 != 0)
    #####:  368:		t->pos += 1;
        -:  369:
      579:  370:	return TokenizerStateOk;
        -:  371:}
        -:  372:
     1410:  373:int tokenizer_next_token(Tokenizer *t, Token *next) {
     1410:  374:	next->span = NULL;
     1410:  375:	next->type = TokenTypeIdent; // init so that we know when it's been set to doc
        -:  376:	// first skip all whitespace / comments
     1410:  377:	int skip = tokenizer_skip_to_token(t, next);
     1410:  378:	if (skip != TokenizerStateOk || next->type == TokenTypeDoc)
      328:  379:		return skip;
        -:  380:
        -:  381:	// check first char to determine which type of token we're in
     1082:  382:	char first = t->s[t->pos];
     1082:  383:	if ((first >= 'a' && first <= 'z') || (first >= 'A' && first <= 'Z') || first == '_') {
        -:  384:		// ident
      414:  385:		int ret = tokenizer_proc_ident(t, next);
        -:  386:
        -:  387:		// special cases
      414:  388:		if (ret == TokenizerStateOk &&
      414:  389:			(!strcmp(next->token, "true") || !strcmp(next->token, "false"))) {
        3:  390:			next->type = TokenTypeBoolLiteral;
        -:  391:		}
      414:  392:		return ret;
      668:  393:	} else if (first == '\"') {
        -:  394:		// string literal
       12:  395:		return tokenizer_proc_string_literal(t, next);
      656:  396:	} else if (first == '\'') {
        -:  397:		// char literal
        1:  398:		return tokenizer_proc_char_literal(t, next);
      655:  399:	} else if ((first >= '0' && first <= '9') || first == '-') {
        -:  400:		// number literal
       76:  401:		return tokenizer_proc_num_literal(t, next);
        -:  402:	} else {
        -:  403:		// punct or error
      579:  404:		return tokenizer_proc_punct(t, next);
        -:  405:	}
        -:  406:}
        -:  407:
      326:  408:void tokenizer_cleanup(Tokenizer *t) {
        -:  409:	// check if it's null to be safe in case it's called twice
      326:  410:	if (t->s != NULL) {
      316:  411:		myfree(t->s);
      316:  412:		t->s = NULL;
        -:  413:	}
      326:  414:}
        -:  415:
     1107:  416:void token_cleanup(Token *t) {
        -:  417:	// check if it's null to be safe in case it's called twice
     1107:  418:	if (t->token != NULL) {
     1092:  419:		myfree(t->token);
     1092:  420:		t->token = NULL;
        -:  421:	}
        -:  422:
        -:  423:	// check if it's null to be safe in case it's called twice
     1107:  424:	if (t->span != NULL) {
      957:  425:		myfree(t->span);
      957:  426:		t->span = NULL;
        -:  427:	}
     1107:  428:}
        -:  429:
        -:  430:typedef enum TokenDisplayType {
        -:  431:	TokenDisplayTypeError = 0,
        -:  432:	TokenDisplayTypeWarning = 1
        -:  433:} TokenDisplayType;
        -:  434:
        2:  435:int token_display_impl(const Token *token, TokenDisplayType type, const char *fmt,
        -:  436:					   va_list va_args) {
        2:  437:	if (type == TokenDisplayTypeError)
        1:  438:		fprintf(stderr, "%sError%s: ", BRIGHT_RED, RESET);
        -:  439:	else
        1:  440:		fprintf(stderr, "%sWarning%s: ", YELLOW, RESET);
        2:  441:	vfprintf(stderr, fmt, va_args);
        2:  442:	fprintf(stderr, "\n%s", token->span);
        2:  443:	return 0;
        -:  444:}
        -:  445:
        1:  446:int token_display_error(const Token *token, const char *fmt, ...) {
        -:  447:	va_list va_args;
        1:  448:	va_start(va_args, fmt);
        1:  449:	int ret = token_display_impl(token, TokenDisplayTypeError, fmt, va_args);
        1:  450:	va_end(va_args);
        1:  451:	return ret;
        -:  452:}
        -:  453:
        1:  454:int token_display_warning(const Token *token, const char *fmt, ...) {
        -:  455:	va_list va_args;
        1:  456:	va_start(va_args, fmt);
        1:  457:	int ret = token_display_impl(token, TokenDisplayTypeWarning, fmt, va_args);
        1:  458:	va_end(va_args);
        1:  459:	return ret;
        -:  460:}
        -:    0:Source:faml.c
        -:    0:Graph:faml.gcno
        -:    0:Data:faml.gcda
        -:    0:Runs:3
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/chain_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/resources.h>
        -:   18:#include <faml/parser.h>
        -:   19:#include <pthread.h>
        -:   20:#include <stdatomic.h>
        -:   21:#include <stdio.h>
        -:   22:#include <string.h>
        -:   23:#include <util/rbtree.h>
        -:   24:
        -:   25:_Thread_local RBTree tl_faml_rbtree = {.impl = null};
        -:   26:_Thread_local u64 next_local_id = 0;
        -:   27:volatile atomic_ullong next_global_id = 0;
        -:   28:pthread_mutex_t global_id_mutex = PTHREAD_MUTEX_INITIALIZER;
        -:   29:
        -:   30:typedef struct LookupTableEntry {
        -:   31:	FamlObjVisibility visibility;
        -:   32:	FatPtr name;
        -:   33:	FatPtr sub_table;
        -:   34:} LookupTableEntry;
        -:   35:
        -:   36:typedef struct LookupTable {
        -:   37:	u32 size;
        -:   38:	u32 capacity;
        -:   39:	FatPtr entries;
        -:   40:} LookupTable;
        -:   41:
        -:   42:typedef struct FamlPrototypeImpl {
        -:   43:	bool is_dynamic;
        -:   44:	bool send;
        -:   45:	bool sync;
        -:   46:	FamlType type;
        -:   47:	FatPtr data;
        -:   48:	RBTree tree;
        -:   49:} FamlPrototypeImpl;
        -:   50:
        -:   51:typedef struct FamlObjImpl {
        -:   52:	FamlPrototype *proto;
        -:   53:	u64 id;
        -:   54:} FamlObjImpl;
        -:   55:
        -:   56:typedef struct FamlObjKey {
        -:   57:	u64 namespace_id;
        -:   58:	FatPtr name;
        -:   59:} FamlObjKey;
        -:   60:
        -:   61:// u128 is the largest type
        -:   62:#define FAML_OBJ_VALUE_SIZE sizeof(u128)
        -:   63:
        -:   64:typedef struct FamlObjValueObj {
        -:   65:	u32 insertion_index;
        -:   66:} FamlObjValueObj;
        -:   67:
        -:   68:typedef struct FamlObjValueU64 {
        -:   69:	u64 value;
        -:   70:} FamlObjValueU64;
        -:   71:
        -:   72:typedef struct FamlObjValueU8 {
        -:   73:	u8 value;
        -:   74:} FamlObjValueU8;
        -:   75:
        -:   76:typedef struct FamlObjValueI64 {
        -:   77:	i64 value;
        -:   78:} FamlObjValueI64;
        -:   79:
        -:   80:typedef struct FamlObjValueI32 {
        -:   81:	i32 value;
        -:   82:} FamlObjValueI32;
        -:   83:
        1:   84:void cleanup_faml_data() {
        1:   85:	if (RBTreeIsInit(tl_faml_rbtree)) {
        1:   86:		rbtree_cleanup(&tl_faml_rbtree);
        -:   87:	}
        1:   88:}
        -:   89:
    #####:   90:int faml_obj_key_compare(const void *v1, const void *v2) {
    #####:   91:	const u64 *k1 = v1;
    #####:   92:	const u64 *k2 = v2;
    #####:   93:	if (*k1 < *k2)
    #####:   94:		return -1;
    #####:   95:	else if (*k1 > *k2)
    #####:   96:		return 1;
    #####:   97:	return 0;
        -:   98:}
        -:   99:
        1:  100:int tl_faml_rbtree_init() {
        -:  101:	{
        2:  102:		ChainGuard _ = set_thread_local_slab_allocator();
        1:  103:		rbtree_build(&tl_faml_rbtree, sizeof(FamlObjKey), sizeof(u64), &faml_obj_key_compare,
        -:  104:					 false);
        -:  105:	}
        1:  106:	return 0;
        -:  107:}
        -:  108:
        2:  109:int global_faml_init() {
        2:  110:	if (atomic_load(&next_global_id) == 0) {
        1:  111:		pthread_mutex_lock(&global_id_mutex);
        1:  112:		if (atomic_load(&next_global_id) == 0) {
        1:  113:			printf("global_faml_init\n");
        1:  114:			atomic_store(&next_global_id, 1);
        -:  115:		}
        1:  116:		pthread_mutex_unlock(&global_id_mutex);
        -:  117:	}
        2:  118:	return 0;
        -:  119:}
        -:  120:
    #####:  121:u64 faml_get_next_global_id() {
    #####:  122:	return atomic_fetch_add(&next_global_id, 2);
        -:  123:}
        -:  124:
    #####:  125:u64 faml_get_next_local_id() {
    #####:  126:	u64 ret = next_local_id;
    #####:  127:	next_local_id += 2;
    #####:  128:	return ret;
        -:  129:}
        -:  130:
        2:  131:int faml_check_init() {
        2:  132:	printf("faml_check_init\n");
        2:  133:	if (!RBTreeIsInit(tl_faml_rbtree)) {
        1:  134:		if (tl_faml_rbtree_init()) {
    #####:  135:			return -1;
        -:  136:		}
        -:  137:	}
        -:  138:
        2:  139:	if (global_faml_init())
    #####:  140:		return -1;
        2:  141:	return 0;
        -:  142:}
        -:  143:
        2:  144:void famlproto_cleanup(FamlPrototype *ptr) {
        2:  145:	if (!nil(ptr->impl)) {
        -:  146:
        2:  147:		FamlPrototypeImpl *impl = $Ref(&ptr->impl);
        4:  148:		ChainGuard _ = ChainSend(true);
        2:  149:		if (!nil(impl->data))
        1:  150:			chain_free(&impl->data);
        2:  151:		chain_free(&ptr->impl);
        -:  152:	}
        2:  153:}
        -:  154:
        2:  155:int faml_prototype_create(FamlPrototype *proto, bool send, bool sync, bool is_dynamic) {
        2:  156:	if (faml_check_init())
    #####:  157:		return -1;
        -:  158:
       2*:  159:	if (sync && !send) {
    #####:  160:		fam_err = IllegalState;
    #####:  161:		return -1;
        -:  162:	}
        -:  163:
        -:  164:	FamlPrototypeImpl *impl;
        -:  165:	{
        4:  166:		ChainGuard _ = ChainSend(true);
        2:  167:		if (chain_malloc(&proto->impl, sizeof(FamlPrototypeImpl))) {
    #####:  168:			proto->impl = null;
    #####:  169:			return -1;
        -:  170:		}
        2:  171:		impl = $Ref(&proto->impl);
        -:  172:	}
        2:  173:	impl->send = send;
        2:  174:	impl->sync = sync;
        2:  175:	impl->is_dynamic = is_dynamic;
        2:  176:	impl->type = FamlTypeUnknown;
        2:  177:	impl->data = null;
        2:  178:	impl->tree = RBTREE_INITIALIZE;
        -:  179:
        2:  180:	return 0;
        -:  181:}
        -:  182:
        1:  183:int faml_prototype_set_u8(FamlPrototype *proto, u8 value) {
        1:  184:	FamlPrototypeImpl *impl = $Ref(&proto->impl);
        1:  185:	if (impl->type != FamlTypeUnknown) {
    #####:  186:		fam_err = AlreadyInitialized;
    #####:  187:		return -1;
        -:  188:	}
        1:  189:	impl->type = FamlTypeU8;
        -:  190:	{
        2:  191:		ChainGuard _ = ChainSend(true); // so we can pass to threads
        1:  192:		if (chain_malloc(&impl->data, sizeof(FamlObjValueU8)))
    #####:  193:			return -1;
        -:  194:	}
        -:  195:
        1:  196:	FamlObjValueU8 *vu8 = $Ref(&impl->data);
        1:  197:	vu8->value = value;
        -:  198:
        1:  199:	return 0;
        -:  200:}
    #####:  201:int faml_prototype_set_u64(FamlPrototype *proto, u64 value) {
    #####:  202:	FamlPrototypeImpl *impl = $Ref(&proto->impl);
    #####:  203:	if (impl->type != FamlTypeUnknown) {
    #####:  204:		fam_err = AlreadyInitialized;
    #####:  205:		return -1;
        -:  206:	}
    #####:  207:	impl->type = FamlTypeU64;
        -:  208:
        -:  209:	{
    #####:  210:		ChainGuard _ = ChainSend(true); // so we can pass to threads
    #####:  211:		if (chain_malloc(&impl->data, sizeof(FamlObjValueU64)))
    #####:  212:			return -1;
        -:  213:	}
        -:  214:
    #####:  215:	FamlObjValueU8 *vu64 = $Ref(&impl->data);
    #####:  216:	vu64->value = value;
        -:  217:
    #####:  218:	return 0;
        -:  219:}
    #####:  220:int faml_prototype_set_i64(FamlPrototype *proto, i64 value) {
    #####:  221:	FamlPrototypeImpl *impl = $Ref(&proto->impl);
    #####:  222:	if (impl->type != FamlTypeUnknown) {
    #####:  223:		fam_err = AlreadyInitialized;
    #####:  224:		return -1;
        -:  225:	}
    #####:  226:	impl->type = FamlTypeI32;
        -:  227:
        -:  228:	{
    #####:  229:		ChainGuard _ = ChainSend(true); // so we can pass to threads
    #####:  230:		if (chain_malloc(&impl->data, sizeof(FamlObjValueI64)))
    #####:  231:			return -1;
        -:  232:	}
        -:  233:
    #####:  234:	FamlObjValueU8 *vi64 = $Ref(&impl->data);
    #####:  235:	vi64->value = value;
    #####:  236:	return 0;
        -:  237:}
    #####:  238:int faml_prototype_set_i32(FamlPrototype *proto, i32 value) {
    #####:  239:	FamlPrototypeImpl *impl = $Ref(&proto->impl);
    #####:  240:	if (impl->type != FamlTypeUnknown) {
    #####:  241:		fam_err = AlreadyInitialized;
    #####:  242:		return -1;
        -:  243:	}
    #####:  244:	impl->type = FamlTypeI32;
        -:  245:
        -:  246:	{
    #####:  247:		ChainGuard _ = ChainSend(true); // so we can pass to threads
    #####:  248:		if (chain_malloc(&impl->data, sizeof(FamlObjValueI32)))
    #####:  249:			return -1;
        -:  250:	}
        -:  251:
    #####:  252:	FamlObjValueU8 *vi32 = $Ref(&impl->data);
    #####:  253:	vi32->value = value;
    #####:  254:	return 0;
        -:  255:}
        -:  256:
    #####:  257:int faml_prototype_put_u8(FamlPrototype *proto, const char *key, u8 value,
        -:  258:						  FamlObjVisibility visibility) {
    #####:  259:	FamlPrototypeImpl *impl = $Ref(&proto->impl);
    #####:  260:	if (impl->type != FamlTypeUnknown || impl->type != FamlTypeObj) {
    #####:  261:		fam_err = AlreadyInitialized;
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
    #####:  265:	impl->type = FamlTypeObj;
        -:  266:
    #####:  267:	if (!RBTreeIsInit(impl->tree)) {
    #####:  268:		if (rbtree_build(&impl->tree, sizeof(FamlObjKey), FAML_OBJ_VALUE_SIZE, faml_obj_key_compare,
    #####:  269:						 impl->send))
    #####:  270:			return -1;
        -:  271:	}
        -:  272:
        -:  273:	FamlObjKey ku8;
    #####:  274:	ku8.namespace_id = 0;
        -:  275:	{
    #####:  276:		ChainGuard _ =
    #####:  277:			ChainSend(true); // always use a 'send' for this so we can deallocate in a new thread.
        -:  278:	}
        -:  279:
        -:  280:	//	rbtree_insert(&impl->tree, ku8, vu8);
        -:  281:
    #####:  282:	return 0;
        -:  283:}
    #####:  284:int faml_prototype_put_u64(FamlPrototype *proto, const char *key, u64 value,
        -:  285:						   FamlObjVisibility visibility) {
    #####:  286:	return 0;
        -:  287:}
    #####:  288:int faml_prototype_put_i32(FamlPrototype *proto, const char *key, i32 value,
        -:  289:						   FamlObjVisibility visibility) {
    #####:  290:	return 0;
        -:  291:}
    #####:  292:int faml_prototype_put_i64(FamlPrototype *proto, const char *key, i64 value,
        -:  293:						   FamlObjVisibility visibility) {
    #####:  294:	return 0;
        -:  295:}
        -:  296:
        2:  297:void famlobj_cleanup(FamlObj *obj) {
        2:  298:	if (!nil(obj->impl)) {
        2:  299:		FamlObjImpl *impl = $Ref(&obj->impl);
        2:  300:		bool send = false;
       2*:  301:		if (impl->proto && !nil(impl->proto->impl)) {
    #####:  302:			FamlPrototypeImpl *pimpl = $Ref(&impl->proto->impl);
    #####:  303:			send = pimpl->send;
        -:  304:		}
       4*:  305:		ChainGuard _ = ChainSend(send);
        2:  306:		chain_free(&obj->impl);
        -:  307:	}
        2:  308:}
        -:  309:
        2:  310:int faml_build_obj(FamlObj *obj, FamlPrototype *proto, bool send, bool sync) {
        2:  311:	printf("sz(famlobjimpl)=%lu key=%lu\n", sizeof(FamlObjImpl), sizeof(FamlObjKey));
        2:  312:	printf("sz(FamlObjValueObj)=%lu,FamlObjValueU64=%lu,u8=%lu\n", sizeof(FamlObjValueObj),
        -:  313:		   sizeof(FamlObjValueU64), sizeof(FamlObjValueU8));
        2:  314:	printf("sz(FamlObjKey)=%lu\n", sizeof(FamlObjKey));
        -:  315:	FamlObjImpl *impl;
        -:  316:	{
       4*:  317:		ChainGuard _ = ChainSend(send);
        2:  318:		if (chain_malloc(&obj->impl, sizeof(FamlObjImpl))) {
    #####:  319:			obj->impl = null;
    #####:  320:			return -1;
        -:  321:		}
        2:  322:		impl = $Ref(&obj->impl);
        -:  323:	}
        2:  324:	impl->proto = proto;
        -:  325:
        2:  326:	return 0;
        -:  327:}
        -:  328:
    #####:  329:int famlobj_put_u8(FamlObj *obj, const char *name, const u8 v) {
    #####:  330:	if (obj == NULL || name == NULL) {
    #####:  331:		fam_err = IllegalArgument;
    #####:  332:		return -1;
        -:  333:	}
    #####:  334:	FamlObjImpl *impl = $Ref(&obj->impl);
        -:  335:
    #####:  336:	return 0;
        -:  337:}
        -:  338:
    #####:  339:int famlobj_put_u64(FamlObj *obj, const char *name, const u64 v) {
    #####:  340:	if (obj == NULL || name == NULL) {
    #####:  341:		fam_err = IllegalArgument;
    #####:  342:		return -1;
        -:  343:	}
        -:  344:
    #####:  345:	FamlObjImpl *impl = $Ref(&obj->impl);
        -:  346:
    #####:  347:	return 0;
        -:  348:}
        -:  349:
        2:  350:int faml_put_i32(FamlObj *obj, const char *name, const i32 v) {
        2:  351:	if (obj == NULL || name == NULL) {
    #####:  352:		fam_err = IllegalArgument;
    #####:  353:		return -1;
        -:  354:	}
        2:  355:	if (nil(obj->impl)) {
    #####:  356:		fam_err = InitErr;
    #####:  357:		return -1;
        -:  358:	}
        -:  359:
        2:  360:	FamlObjImpl *impl = $Ref(&obj->impl);
        2:  361:	if (impl == NULL) {
    #####:  362:		fam_err = InitErr;
    #####:  363:		return -1;
        -:  364:	}
        2:  365:	printf("faml put u32\n");
        -:  366:
        2:  367:	return 0;
        -:  368:}
        -:  369:
        1:  370:int faml_put_i64(FamlObj *obj, const char *name, const i64 v) {
        1:  371:	printf("faml put i64\n");
        1:  372:	return 0;
        -:  373:}
        -:  374:
        1:  375:int faml_put_obj(FamlObj *obj, const char *name, const FamlObj *v) {
        1:  376:	printf("faml put obj\n");
        1:  377:	return 0;
        -:  378:}
        -:    0:Source:bitflags.c
        -:    0:Graph:bitflags.gcno
        -:    0:Data:bitflags.gcda
        -:    0:Runs:16
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <string.h>
        -:   17:#include <util/bitflags.h>
        -:   18:
       32:   19:int bitflags_set(BitFlags *ptr, u32 index, bool value) {
       32:   20:	u32 offset = index >> 3;
        -:   21:
        -:   22:	// Out of range check
       32:   23:	if (offset >= ptr->capacity) {
        1:   24:		fam_err = IndexOutOfBounds;
        1:   25:		return -1;
        -:   26:	}
        -:   27:
        -:   28:	// Calculate mask directly
       31:   29:	u32 mask = 1 << (index & 0x7);
        -:   30:
       31:   31:	if (value) {
        6:   32:		ptr->flags[offset] |= mask;
        -:   33:	} else {
       25:   34:		ptr->flags[offset] &= ~mask;
        -:   35:	}
        -:   36:
       31:   37:	return 0;
        -:   38:}
        -:   39:
       51:   40:bool bitflags_check(BitFlags *ptr, u32 index) {
       51:   41:	u32 offset = index >> 3;
        -:   42:
        -:   43:	// Out of range check
       51:   44:	if (offset >= ptr->capacity) {
        1:   45:		return false;
        -:   46:	}
        -:   47:
        -:   48:	// Calculate mask directly
       50:   49:	u32 mask = 1 << (index & 0x7);
        -:   50:
       50:   51:	return ptr->flags[offset] & mask;
        -:   52:}
        -:    0:Source:rbtree.c
        -:    0:Graph:rbtree.gcno
        -:    0:Data:rbtree.gcda
        -:    0:Runs:16
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <assert.h>
        -:   16:#include <base/chain_alloc.h>
        -:   17:#include <base/macro_utils.h>
        -:   18:#include <base/panic.h>
        -:   19:#include <errno.h>
        -:   20:#include <stdio.h>
        -:   21:#include <string.h>
        -:   22:#include <util/rbtree.h>
        -:   23:
        -:   24:// Node id counter
        -:   25:static u64 node_id_counter = 10;
        -:   26:
        -:   27:// RBTreeNode (overhead on 64 bit system is: four pointers * 8 = 32 bytes + Fat pointer's slab has a
        -:   28:// next pointer (8 bytes) and the FatPointer impl (with 32 bit slabs, which is default) has 16 bytes
        -:   29:// overhead. So, total overhead is 56 bytes. With 64 bit slabs there's an additional 8 bytes.
        -:   30:// It's also important to note that key/values are padded to 16 bytes. So that may introduce
        -:   31:// additional overhead. The 'data' section holds both key/value and 1 byte for node color.
        -:   32:typedef struct RBTreeNode {
        -:   33:	FatPtr self;
        -:   34:	struct RBTreeNode *right;
        -:   35:	struct RBTreeNode *left;
        -:   36:	struct RBTreeNode *parent;
        -:   37:#ifdef TEST
        -:   38:	u64 node_id;
        -:   39:	u64 pad;
        -:   40:#endif // TEST
        -:   41:	char data[];
        -:   42:} RBTreeNode;
        -:   43:
        -:   44:// The internal RBTreeImpl storage data structure
        -:   45:typedef struct RBTreeImpl {
        -:   46:	u64 key_size;								// size of the keys
        -:   47:	u64 value_size;								// size of the values
        -:   48:	int (*compare)(const void *, const void *); // a comparion function (like qsort)
        -:   49:	RBTreeNode *root;							// pointer to the root node.
        -:   50:	u64 size;									// current size of the tree.
        -:   51:	bool send; // whether this RBTree can be sent to other threads (using global chain_malloc)
        -:   52:} RBTreeImpl;
        -:   53:
        -:   54:// Iterator impl
        -:   55:typedef struct RBTreeIteratorImpl {
        -:   56:	int (*compare)(const void *, const void *);
        -:   57:	RBTreeNode *cur;
        -:   58:	RBTreeNode *min;
        -:   59:	RBTreeNode *max;
        -:   60:	RBTreeNode *stack[128];
        -:   61:	u64 key_size;
        -:   62:	u8 stack_pointer;
        -:   63:	bool send;
        -:   64:} RBTreeIteratorImpl;
        -:   65:
        -:   66:// Data structure used for searching RBTrees.
        -:   67:typedef struct RBTreeNodePair {
        -:   68:	RBTreeNode *parent;
        -:   69:	RBTreeNode *self;
        -:   70:	bool is_right;
        -:   71:} RBTreeNodePair;
        -:   72:
        -:   73:// utility macros
        -:   74:#define BOOLEAN_SIZE 1
        -:   75:#define VALUE_PAD(key_size) (16 - (key_size % 16))
        -:   76:#define DATA_SIZE(impl)                                                                            \
        -:   77:	(sizeof(RBTreeNode) + (impl->key_size + impl->value_size) * sizeof(char) +                     \
        -:   78:	 VALUE_PAD(impl->key_size) + BOOLEAN_SIZE)
        -:   79:#define RED_OFFSET(key_size, value_size) (key_size + value_size + VALUE_PAD(key_size))
        -:   80:#define SET_RED(impl, node)                                                                        \
        -:   81:	({                                                                                             \
        -:   82:		if (node && node != NIL) {                                                                 \
        -:   83:			u64 offset = RED_OFFSET(impl->key_size, impl->value_size);                             \
        -:   84:			*(bool *)(node->data + offset) = true;                                                 \
        -:   85:		}                                                                                          \
        -:   86:	})
        -:   87:#define SET_BLACK(impl, node)                                                                      \
        -:   88:	({                                                                                             \
        -:   89:		if (node && node != NIL) {                                                                 \
        -:   90:			u64 offset = RED_OFFSET(impl->key_size, impl->value_size);                             \
        -:   91:			*(bool *)(node->data + offset) = false;                                                \
        -:   92:		}                                                                                          \
        -:   93:	})
        -:   94:
        -:   95:#define IS_RED(impl, node)                                                                         \
        -:   96:	({                                                                                             \
        -:   97:		bool ret = false;                                                                          \
        -:   98:		u64 offset = RED_OFFSET(impl->key_size, impl->value_size);                                 \
        -:   99:		if (node && node != NIL && node->data && *(bool *)(node->data + offset))                   \
        -:  100:			ret = true;                                                                            \
        -:  101:		ret;                                                                                       \
        -:  102:	})
        -:  103:#define IS_BLACK(impl, node)                                                                       \
        -:  104:	({                                                                                             \
        -:  105:		bool ret = true;                                                                           \
        -:  106:		u64 offset = RED_OFFSET(impl->key_size, impl->value_size);                                 \
        -:  107:		if (node && node != NIL && node->data && *(bool *)(node->data + offset))                   \
        -:  108:			ret = false;                                                                           \
        -:  109:		ret;                                                                                       \
        -:  110:	})
        -:  111:
        -:  112:#if defined(__clang__)
        -:  113:// Clang-specific pragma
        -:  114:#pragma GCC diagnostic push
        -:  115:#pragma clang diagnostic ignored "-Wincompatible-pointer-types-discards-qualifiers"
        -:  116:#elif defined(__GNUC__) && !defined(__clang__)
        -:  117:// GCC-specific pragma
        -:  118:#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
        -:  119:#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
        -:  120:#else
        -:  121:#warning "Unknown compiler or platform. No specific warning pragmas applied."
        -:  122:#endif
        -:  123:const static RBTreeNode NIL_DEFN = {
        -:  124:	.self = null, .right = &NIL_DEFN, .left = &NIL_DEFN, .parent = &NIL_DEFN};
        -:  125:static RBTreeNode *NIL = &NIL_DEFN;
        -:  126:#pragma GCC diagnostic pop
        -:  127:
        -:  128:// cleanup function for iterators
        3:  129:void rbtree_iterator_cleanup(RBTreeIteratorNc *ptr) {
        3:  130:	if (!nil(ptr->impl)) {
        -:  131:		// obtain referent to internal RBTreeImpl structure
        3:  132:		RBTreeIteratorImpl *impl = $Ref(&ptr->impl);
        -:  133:		// set appropriate chainguard status
       6*:  134:		ChainGuard _ = ChainSend(impl->send);
        -:  135:
        -:  136:		// free RBTreeImpl structure
        3:  137:		chain_free(&ptr->impl);
        -:  138:	}
        3:  139:}
        -:  140:
        -:  141:// returns the next item in the iterator
     4111:  142:bool rbtree_iterator_next(RBTreeIterator *ptr, RbTreeKeyValue *kv) {
     4111:  143:	RBTreeIteratorImpl *impl = $Ref(&ptr->impl);
        -:  144:
        -:  145:	// If the iterator is empty, we're done
     4111:  146:	if (impl->cur == NIL && impl->stack_pointer == 0) {
        3:  147:		return false; // No more nodes to traverse
        -:  148:	}
        -:  149:
        -:  150:	// Traverse the tree
     8219:  151:	while (impl->cur != NIL || impl->stack_pointer > 0) {
        -:  152:		// Traverse left subtree
     8219:  153:		if (impl->cur != NIL) {
        -:  154:			// based on worst case log(n) * 2 + 1 this should not be possible
    4111*:  155:			assert(impl->stack_pointer < 128);
     4111:  156:			int v = 0;
     4111:  157:			if (impl->min != NIL)
        5:  158:				v = impl->compare(impl->cur->data, impl->min->data);
     4111:  159:			if (v < 0) {
        -:  160:				// we haven't hit the minimum yet
        2:  161:				impl->cur = impl->cur->right;
        -:  162:			} else {
        -:  163:				// Push the current node pointer onto the stack
     4109:  164:				impl->stack[impl->stack_pointer++] = impl->cur;
        -:  165:
        -:  166:				// Move to the left child
     4109:  167:				impl->cur = impl->cur->left;
        -:  168:			}
        -:  169:		} else {
        -:  170:			// Pop the top node from the stack
     4108:  171:			impl->cur = impl->stack[--impl->stack_pointer];
        -:  172:
        -:  173:			// Store the current node's data to return
     4108:  174:			void *ret = impl->cur->data;
        -:  175:
        -:  176:			// check if we hit our max node. If so, next will return false.
     4108:  177:			if (impl->cur == impl->max) {
        1:  178:				impl->cur = NIL;
        1:  179:				impl->stack_pointer = 0;
        -:  180:			}
        -:  181:
        -:  182:			// Move to the right child after visiting this node
     4108:  183:			impl->cur = impl->cur->right;
        -:  184:
     4108:  185:			kv->key = ret;
     4108:  186:			kv->value = ret + VALUE_PAD(impl->key_size) + impl->key_size;
     4108:  187:			break;
        -:  188:		}
        -:  189:	}
     4108:  190:	return true;
        -:  191:}
        -:  192:
     6678:  193:void rbtree_free_node(RBTreeNode *ptr) {
     6678:  194:	if (ptr != NIL) {
        -:  195:		// recursively free right node
     3335:  196:		rbtree_free_node(ptr->right);
        -:  197:		// recursively free left node
     3335:  198:		rbtree_free_node(ptr->left);
        -:  199:		// chain free current node
     3335:  200:		chain_free(&ptr->self);
        -:  201:	}
     6678:  202:}
        -:  203:
        -:  204:// internal search function used by get/insert/delete.
    22371:  205:void rbtree_search(RBTreeImpl *impl, const void *key, RBTreeNodePair *nodes) {
    22371:  206:	nodes->parent = NIL;
    22371:  207:	nodes->self = impl->root;
        -:  208:
    22371:  209:	int i = 0;
   239314:  210:	while (nodes->self != NIL) {
        -:  211:#ifdef TEST
        -:  212:		// should never have a case where this is not true
        -:  213:		// only NIL accepted
  228525*:  214:		assert(nodes->self->parent);
  228525*:  215:		assert(nodes->self->left);
  228525*:  216:		assert(nodes->self->right);
        -:  217:#endif // TEST
   228525:  218:		nodes->parent = nodes->self;
   228525:  219:		int v = impl->compare(nodes->self->data, key);
   228525:  220:		if (v == 0) {
    11582:  221:			break;
   216943:  222:		} else if (v < 0) {
   110416:  223:			nodes->self = nodes->self->right;
   110416:  224:			nodes->is_right = true;
        -:  225:		} else {
   106527:  226:			nodes->self = nodes->self->left;
   106527:  227:			nodes->is_right = false;
        -:  228:		}
        -:  229:	}
    22371:  230:}
        -:  231:
        -:  232:// do a left rotation
     5106:  233:void rbtree_left_rotate(RBTreeImpl *impl, RBTreeNode *x) {
        -:  234:
        -:  235:#ifdef TEST
        -:  236:	// should never have a case where this is not true
        -:  237:	// only NIL accepted
    5106*:  238:	assert(x->parent);
    5106*:  239:	assert(x->left);
    5106*:  240:	assert(x->right);
        -:  241:#endif // TEST
        -:  242:
     5106:  243:	RBTreeNode *y = x->right;
        -:  244:
        -:  245:	// Move y's left subtree to x's right subtree
     5106:  246:	x->right = y->left;
     5106:  247:	if (y->left != NIL) {
     1564:  248:		y->left->parent = x;
        -:  249:	}
        -:  250:
        -:  251:	// Update y's parent to x's parent
     5106:  252:	y->parent = x->parent;
        -:  253:
        -:  254:	// If x was the root, now y becomes the root
     5106:  255:	if (x->parent == NIL) {
       16:  256:		impl->root = y;
     5090:  257:	} else if (x == x->parent->left) {
     3180:  258:		x->parent->left = y;
        -:  259:	} else {
     1910:  260:		x->parent->right = y;
        -:  261:	}
        -:  262:
        -:  263:	// Place x as y's left child
     5106:  264:	y->left = x;
     5106:  265:	x->parent = y;
     5106:  266:}
        -:  267:
        -:  268:// do a right rotation
     4256:  269:void rbtree_right_rotate(RBTreeImpl *impl, RBTreeNode *x) {
        -:  270:
        -:  271:#ifdef TEST
        -:  272:	// should never have a case where this is not true
        -:  273:	// only NIL accepted
    4256*:  274:	assert(x->parent);
    4256*:  275:	assert(x->left);
    4256*:  276:	assert(x->right);
        -:  277:#endif // TEST
        -:  278:
     4256:  279:	RBTreeNode *y = x->left;
        -:  280:
        -:  281:	// Move y's right subtree to x's left subtree
     4256:  282:	x->left = y->right;
     4256:  283:	if (y->right != NIL) {
     1242:  284:		y->right->parent = x;
        -:  285:	}
        -:  286:
        -:  287:	// Update y's parent to x's parent
     4256:  288:	y->parent = x->parent;
        -:  289:
        -:  290:	// If x was the root, now y becomes the root
     4256:  291:	if (x->parent == NIL) {
        3:  292:		impl->root = y;
     4253:  293:	} else if (x == x->parent->right) {
     2938:  294:		x->parent->right = y;
        -:  295:	} else {
     1315:  296:		x->parent->left = y;
        -:  297:	}
        -:  298:
        -:  299:	// Place x as y's right child
     4256:  300:	y->right = x;
     4256:  301:	x->parent = y;
     4256:  302:}
        -:  303:
        -:  304:// Fixup operation after insertion to maintain Red-Black Tree properties
    10786:  305:void rbtree_insert_fixup(RBTreeImpl *impl, RBTreeNode *k) {
    10786:  306:	int i = 0;
        -:  307:	// Loop until the node is the root or its parent's color is black
    19369:  308:	while (k != impl->root && IS_RED(impl, k->parent)) {
        -:  309:#ifdef TEST
        -:  310:		// Ensure that the parent, left, and right children are not NULL
        -:  311:		// The only exception is NIL nodes, which can be accepted
    8583*:  312:		assert(k->parent);
    8583*:  313:		assert(k->left);
    8583*:  314:		assert(k->right);
        -:  315:#endif // TEST
        -:  316:
     8583:  317:		if (k->parent == k->parent->parent->left) {
        -:  318:			// Case 1: Uncle is on the right
     3794:  319:			RBTreeNode *u = k->parent->parent->right;
        -:  320:
     3794:  321:			if (IS_RED(impl, u)) {
        -:  322:				// Case 1a: Uncle is red
        -:  323:				// Recolor the parent and uncle to black
     2067:  324:				SET_BLACK(impl, k->parent);
     2067:  325:				SET_BLACK(impl, u);
        -:  326:				// Recolor the grandparent to red
     2067:  327:				SET_RED(impl, k->parent->parent);
        -:  328:				// Move up the tree
     2067:  329:				k = k->parent->parent;
        -:  330:			} else {
        -:  331:				// Case 1b: Uncle is black
     1727:  332:				if (k == k->parent->right) {
        -:  333:					// Case 1b1: Node is a right child
        -:  334:					// Rotate left to make the node the left child
      890:  335:					k = k->parent;
      890:  336:					rbtree_left_rotate(impl, k);
        -:  337:				}
        -:  338:				// Recolor and rotate
     1727:  339:				SET_BLACK(impl, k->parent);
     1727:  340:				SET_RED(impl, k->parent->parent);
     1727:  341:				rbtree_right_rotate(impl, k->parent->parent);
        -:  342:			}
        -:  343:		} else {
        -:  344:			// Case 2: Uncle is on the left
     4789:  345:			RBTreeNode *u = k->parent->parent->left;
        -:  346:
     4789:  347:			if (IS_RED(impl, u)) {
        -:  348:				// Case 2a: Uncle is red
        -:  349:				// Recolor the parent and uncle to black
     2430:  350:				SET_BLACK(impl, k->parent);
     2430:  351:				SET_BLACK(impl, u);
        -:  352:				// Recolor the grandparent to red
     2430:  353:				SET_RED(impl, k->parent->parent);
        -:  354:				// Move up the tree
     2430:  355:				k = k->parent->parent;
        -:  356:			} else {
        -:  357:				// Case 2b: Uncle is black
     2359:  358:				if (k == k->parent->left) {
        -:  359:					// Case 2b1: Node is a left child
        -:  360:					// Rotate right to make the node the right child
     1095:  361:					k = k->parent;
     1095:  362:					rbtree_right_rotate(impl, k);
        -:  363:				}
        -:  364:				// Recolor and rotate
     2359:  365:				SET_BLACK(impl, k->parent);
     2359:  366:				SET_RED(impl, k->parent->parent);
     2359:  367:				rbtree_left_rotate(impl, k->parent->parent);
        -:  368:			}
        -:  369:		}
        -:  370:	}
        -:  371:	// Ensure the root is always black
    10786:  372:	SET_BLACK(impl, impl->root);
    10786:  373:}
        -:  374:
        -:  375:// cleanup function selects appropriate ChainGuard based on configuration and
        -:  376:// deallocates memory
        8:  377:void rbtree_cleanup(RBTreeNc *ptr) {
        -:  378:	// check non-initialized conditions
        8:  379:	if (!nil(ptr->impl)) {
        -:  380:		// obtain referent to internal RBTree structure
        8:  381:		RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  382:		// set appropriate chainguard status
      16*:  383:		ChainGuard _ = ChainSend(impl->send);
        -:  384:
        8:  385:		rbtree_free_node(impl->root);
        -:  386:
        -:  387:		// free RBTreeImpl structure
        8:  388:		chain_free(&ptr->impl);
        -:  389:	}
        8:  390:}
        -:  391:
       10:  392:int rbtree_build(RBTree *ptr, const u64 key_size, const u64 value_size,
        -:  393:				 int (*compare)(const void *, const void *), bool send) {
        -:  394:	// validate input
       10:  395:	if (ptr == NULL || key_size == 0 || value_size == 0 || compare == NULL) {
        1:  396:		errno = EINVAL;
        1:  397:		return -1;
        -:  398:	}
        -:  399:
        -:  400:	RBTreeImpl *impl;
        -:  401:
        -:  402:	{
      18*:  403:		ChainGuard _ = ChainSend(send);
        -:  404:		// try to allocate required size for RBTreeImpl
        9:  405:		if (chain_malloc(&ptr->impl, sizeof(RBTreeImpl))) {
        -:  406:			// set the fatptr to null so it's not cleaned up in cleanup function
        1:  407:			ptr->impl = null;
        1:  408:			return -1;
        -:  409:		}
        -:  410:	}
        -:  411:
        8:  412:	impl = $Ref(&ptr->impl);
        -:  413:	// initialize values of the RBTreeImpl structure
        8:  414:	impl->send = send;
        8:  415:	impl->key_size = key_size;
        8:  416:	impl->value_size = value_size;
        8:  417:	impl->compare = compare;
        8:  418:	impl->root = NIL;
        8:  419:	impl->size = 0;
        -:  420:
        8:  421:	return 0;
        -:  422:}
        -:  423:
        -:  424:// insert function
    10789:  425:int rbtree_insert(RBTree *ptr, const void *key, const void *value) {
        -:  426:	// validate input
    10789:  427:	if (ptr == NULL || key == NULL || value == NULL) {
        1:  428:		errno = EINVAL;
        1:  429:		return -1;
        -:  430:	}
        -:  431:
        -:  432:	// obtain the impl from the fat ptr
    10788:  433:	RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  434:	// this pair is used to search
        -:  435:	RBTreeNodePair pair;
        -:  436:	// pointer for our node
        -:  437:	RBTreeNode *node;
        -:  438:
        -:  439:	// perform search for the key
    10788:  440:	rbtree_search(impl, key, &pair);
        -:  441:
        -:  442:	// if it's already in the tree this is an error
    10788:  443:	if (pair.self != NIL)
        1:  444:		return -1;
        -:  445:
        -:  446:	// retreive the data size
    10787:  447:	u64 size = DATA_SIZE(impl);
        -:  448:	FatPtr self;
        -:  449:
        -:  450:	// using chain_malloc allocate memory for this node
        -:  451:	{
   21574*:  452:		ChainGuard _ = ChainSend(impl->send);
    10787:  453:		if (chain_malloc(&self, size)) {
        1:  454:			self = null;
        1:  455:			return -1;
        -:  456:		}
        -:  457:	}
        -:  458:
        -:  459:	// using the allocated memory set node properties
    10786:  460:	node = $Ref(&self);
    10786:  461:	node->self = self;
    10786:  462:	if (impl->root == NIL) {
        9:  463:		impl->root = node;
    10777:  464:	} else if (pair.is_right) {
     5620:  465:		pair.parent->right = node;
        -:  466:	} else {
     5157:  467:		pair.parent->left = node;
        -:  468:	}
    10786:  469:	node->right = NIL;			// always must be set to NIL at first.
    10786:  470:	node->left = NIL;			// always must be set to NIL at first.
    10786:  471:	node->parent = pair.parent; // set our parent pointer.
        -:  472:
        -:  473:	// copy data
    10786:  474:	memcpy(node->data, key, impl->key_size);
        -:  475:	// copy value
    10786:  476:	memcpy(node->data + VALUE_PAD(impl->key_size) + impl->key_size, value, impl->value_size);
        -:  477:	// nodes are initially red
    10786:  478:	SET_RED(impl, node);
        -:  479:
        -:  480:#ifdef TEST
    10786:  481:	node->node_id = node_id_counter++;
        -:  482:#endif // TEST
        -:  483:
        -:  484:	// increment the size counter
    10786:  485:	impl->size++;
        -:  486:
        -:  487:	// insert_fixup
    10786:  488:	rbtree_insert_fixup(impl, node);
        -:  489:
    10786:  490:	return 0;
        -:  491:}
        -:  492:
        -:  493:// find the successor node
     4412:  494:RBTreeNode *rbtree_find_successor(RBTreeImpl *impl, RBTreeNode *x) {
     4412:  495:	RBTreeNode *successor = x->right;
    11288:  496:	while (successor->left != NIL) {
     6876:  497:		successor = successor->left;
        -:  498:	}
     4412:  499:	return successor;
        -:  500:}
        -:  501:
        -:  502:// perform transplant operation
    10656:  503:void rbtree_transplant(RBTreeImpl *impl, RBTreeNode *dst, RBTreeNode *src) {
    10656:  504:	if (dst->parent == NIL)
       31:  505:		impl->root = src;
    10625:  506:	else if (dst == dst->parent->left)
     6967:  507:		dst->parent->left = src;
        -:  508:	else
     3658:  509:		dst->parent->right = src;
    10656:  510:	if (src != NIL) {
     5953:  511:		src->parent = dst->parent;
        -:  512:	}
    10656:  513:}
        -:  514:
        -:  515:// set child's color to parent's
     6294:  516:void set_color_based_on_parent(RBTreeImpl *impl, RBTreeNode *child, RBTreeNode *parent) {
     6294:  517:	if (child != NIL) {
     6294:  518:		if (IS_RED(impl, parent)) {
     2651:  519:			SET_RED(impl, child);
        -:  520:		} else {
     3643:  521:			SET_BLACK(impl, child);
        -:  522:		}
        -:  523:	}
     6294:  524:}
        -:  525:
        -:  526:// delete fixup
     5263:  527:void rbtree_delete_fixup(RBTreeImpl *impl, RBTreeNode *parent, RBTreeNode *w, RBTreeNode *x) {
     5263:  528:	int i = 0;
     9808:  529:	while (x != impl->root && IS_BLACK(impl, x)) {
     4545:  530:		if (w == parent->right) {
        -:  531:			// Case 1: Sibling is red
     2588:  532:			if (IS_RED(impl, w)) {
      330:  533:				SET_BLACK(impl, w);
      330:  534:				SET_RED(impl, parent);
      330:  535:				rbtree_left_rotate(impl, parent);
      330:  536:				w = parent->right;
        -:  537:			}
        -:  538:
        -:  539:			// Case 2: Sibling's children are both black
     2588:  540:			if (IS_BLACK(impl, w->left) && IS_BLACK(impl, w->right)) {
     1445:  541:				SET_RED(impl, w);
     1445:  542:				x = parent;
     1445:  543:				parent = parent->parent;
     1445:  544:				if (x == x->parent->left) {
      902:  545:					w = x->parent->right;
        -:  546:				} else {
      543:  547:					w = x->parent->left;
        -:  548:				}
        -:  549:			} else {
        -:  550:				// Case 3: Sibling's right child is black, left child is red
     1143:  551:				if (IS_BLACK(impl, w->right)) {
      462:  552:					SET_BLACK(impl, w->left);
      462:  553:					SET_RED(impl, w);
      462:  554:					rbtree_right_rotate(impl, w);
      462:  555:					w = parent->right;
        -:  556:				}
        -:  557:
        -:  558:				// Case 4: Sibling's right child is red
     1143:  559:				set_color_based_on_parent(impl, w, parent);
     1143:  560:				SET_BLACK(impl, parent);
     1143:  561:				SET_BLACK(impl, w->right);
     1143:  562:				rbtree_left_rotate(impl, parent);
     1143:  563:				x = impl->root; // Set x to root at the end, only once
        -:  564:			}
        -:  565:		} else {
        -:  566:			// Case 1: Sibling is red
     1957:  567:			if (IS_RED(impl, w)) {
      233:  568:				SET_BLACK(impl, w);
      233:  569:				SET_RED(impl, parent);
      233:  570:				rbtree_right_rotate(impl, parent);
      233:  571:				w = parent->left;
        -:  572:			}
        -:  573:			// Case 2: Sibling's children are both black
     1957:  574:			if (IS_BLACK(impl, w->right) && IS_BLACK(impl, w->left)) {
     1218:  575:				SET_RED(impl, w);
     1218:  576:				x = parent;
     1218:  577:				parent = parent->parent;
     1218:  578:				if (x == x->parent->left) {
      512:  579:					w = x->parent->right;
        -:  580:				} else {
      706:  581:					w = x->parent->left;
        -:  582:				}
        -:  583:			} else {
        -:  584:				// Case 3: Sibling's left child is black, right child is red
      739:  585:				if (IS_BLACK(impl, w->left)) {
      384:  586:					SET_BLACK(impl, w->right);
      384:  587:					SET_RED(impl, w);
      384:  588:					rbtree_left_rotate(impl, w);
      384:  589:					w = parent->left;
        -:  590:				}
        -:  591:				// Case 4: Sibling's left child is red
      739:  592:				set_color_based_on_parent(impl, w, parent);
      739:  593:				SET_BLACK(impl, parent);
      739:  594:				SET_BLACK(impl, w->left);
      739:  595:				rbtree_right_rotate(impl, parent);
      739:  596:				x = impl->root; // Set x to root at the end, only once
        -:  597:			}
        -:  598:		}
        -:  599:	}
        -:  600:
        -:  601:	// Ensure x is black at the end of fixup
     5263:  602:	SET_BLACK(impl, x);
     5263:  603:}
        -:  604:
        -:  605:// delete function
     7453:  606:int rbtree_delete(RBTree *ptr, const void *key) {
        -:  607:	// validate input
     7453:  608:	if (ptr == NULL || nil(ptr->impl) || key == NULL) {
        1:  609:		errno = EINVAL;
        1:  610:		return -1;
        -:  611:	}
        -:  612:
        -:  613:	// obtain impl from our opaque pointer
     7452:  614:	RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  615:
        -:  616:	// search for the node based on this key.
        -:  617:	RBTreeNodePair pair;
     7452:  618:	rbtree_search(impl, key, &pair);
        -:  619:
        -:  620:	// this node doesn't exist, return -1
     7452:  621:	if (pair.self == NIL)
        1:  622:		return -1;
        -:  623:
        -:  624:	// node exists, initialize variables
     7451:  625:	RBTreeNode *node_to_delete = pair.self;
     7451:  626:	RBTreeNode *x = NIL;
     7451:  627:	RBTreeNode *w = NIL;
     7451:  628:	RBTreeNode *parent = NIL;
        -:  629:
        -:  630:	// only do fixups if the node_to_delete is black.
     7451:  631:	bool do_fixup = IS_BLACK(impl, node_to_delete);
        -:  632:
     7451:  633:	if (node_to_delete->left == NIL) {
        -:  634:		// set variables for fixup and transplant
     2665:  635:		x = node_to_delete->right;
     2665:  636:		rbtree_transplant(impl, node_to_delete, node_to_delete->right);
     2665:  637:		if (node_to_delete->parent->left == NIL)
     1338:  638:			w = node_to_delete->parent->right;
        -:  639:		else
     1327:  640:			w = node_to_delete->parent->left;
     2665:  641:		if (x != NIL)
      601:  642:			parent = x->parent;
     2064:  643:		else if (w != NIL)
     1585:  644:			parent = w->parent;
     4786:  645:	} else if (node_to_delete->right == NIL) {
        -:  646:		// set variables for fixup and transplant
      374:  647:		x = node_to_delete->left;
      374:  648:		rbtree_transplant(impl, node_to_delete, node_to_delete->left);
      374:  649:		w = node_to_delete->parent->left;
      374:  650:		parent = x->parent;
        -:  651:	} else {
        -:  652:		// two children case
        -:  653:		// find successor
     4412:  654:		RBTreeNode *successor = rbtree_find_successor(impl, node_to_delete);
        -:  655:		// if it's black we need to do a fixup.
     4412:  656:		do_fixup = IS_BLACK(impl, successor);
        -:  657:
     4412:  658:		x = successor->right;
     4412:  659:		w = successor->parent->right;
        -:  660:
     4412:  661:		if (w->parent == node_to_delete) {
     1207:  662:			w = node_to_delete->left;
     1207:  663:			parent = successor;
        -:  664:		} else {
     3205:  665:			parent = w->parent;
        -:  666:		}
        -:  667:
        -:  668:		// if parent is not node_to_delete, do transplant and update children of successor
     4412:  669:		if (successor->parent != node_to_delete) {
     3205:  670:			rbtree_transplant(impl, successor, successor->right);
     3205:  671:			successor->right = node_to_delete->right;
     3205:  672:			successor->right->parent = successor;
        -:  673:		}
        -:  674:
        -:  675:		// do final transpalnnnt and update including color match
     4412:  676:		rbtree_transplant(impl, node_to_delete, successor);
     4412:  677:		successor->left = node_to_delete->left;
     4412:  678:		successor->left->parent = successor;
     4412:  679:		set_color_based_on_parent(impl, successor, node_to_delete);
        -:  680:	}
        -:  681:
        -:  682:	// if do_fixup, do fixup.
     7451:  683:	if (do_fixup) {
     5271:  684:		if (w != NIL && parent != NIL) {
     5263:  685:			rbtree_delete_fixup(impl, parent, w, x);
        -:  686:		} else {
        -:  687:			// in these cases SET_BLACK only
        8:  688:			if (impl->size > 1)
        4:  689:				SET_BLACK(impl, impl->root);
        -:  690:		}
        -:  691:	}
        -:  692:
        -:  693:	// Free the node which has been transplanted
        -:  694:	{
   14902*:  695:		ChainGuard _ = ChainSend(impl->send);
     7451:  696:		chain_free(&node_to_delete->self);
        -:  697:	}
        -:  698:
     7451:  699:	impl->size--;
        -:  700:
     7451:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// get operation
     4132:  705:const void *rbtree_get(const RBTree *ptr, const void *key) {
        -:  706:	// validate input
     4132:  707:	if (ptr == NULL || key == NULL) {
        1:  708:		errno = EINVAL;
        1:  709:		return NULL;
        -:  710:	}
        -:  711:
        -:  712:	// set impl
     4131:  713:	RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  714:	RBTreeNodePair pair;
        -:  715:
        -:  716:	// search for the pair.
     4131:  717:	rbtree_search(impl, key, &pair);
        -:  718:
        -:  719:	// if found return value, otherwise NULL.
     4131:  720:	if (pair.self != NIL)
     4130:  721:		return pair.self->data + impl->key_size + VALUE_PAD(impl->key_size);
        -:  722:	else {
        1:  723:		return NULL;
        -:  724:	}
        -:  725:}
        -:  726:
        -:  727:// size in terms of number of nodes
    14110:  728:i64 rbtree_size(const RBTree *ptr) {
    14110:  729:	if (ptr == NULL) {
        1:  730:		errno = EINVAL;
        1:  731:		return -1;
        -:  732:	}
        -:  733:
    14109:  734:	RBTreeImpl *impl = $Ref(&ptr->impl);
    14109:  735:	return impl->size;
        -:  736:}
        -:  737:
        -:  738:// return iterator object
        4:  739:int rbtree_iterator(const RBTree *ptr, RBTreeIterator *iter, const void *start_key,
        -:  740:					bool start_inclusive, const void *end_key, bool end_inclusive) {
        4:  741:	if (ptr == NULL || nil(ptr->impl)) {
        1:  742:		errno = EINVAL;
        1:  743:		return -1;
        -:  744:	}
        -:  745:
        3:  746:	RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  747:
        -:  748:	{
       6*:  749:		ChainGuard _ = ChainSend(impl->send);
        3:  750:		if (chain_malloc(&iter->impl, sizeof(RBTreeIteratorImpl))) {
    #####:  751:			iter->impl = null;
    #####:  752:			return -1;
        -:  753:		}
        -:  754:	}
        -:  755:
        3:  756:	RBTreeIteratorImpl *rbimpl = $Ref(&iter->impl);
        3:  757:	rbimpl->compare = impl->compare;
        3:  758:	rbimpl->stack_pointer = 0;
        3:  759:	rbimpl->send = impl->send;
        3:  760:	rbimpl->key_size = impl->key_size;
        3:  761:	rbimpl->cur = impl->root;
        3:  762:	rbimpl->min = NIL;
        3:  763:	rbimpl->max = NIL;
        -:  764:
        3:  765:	if (start_key != NULL) {
        1:  766:		RBTreeNode *itt = impl->root;
        4:  767:		while (itt != NIL) {
        3:  768:			int v = impl->compare(itt->data, start_key);
        3:  769:			if (v == 0) {
        -:  770:				// exact match
    #####:  771:				if (start_inclusive) {
    #####:  772:					rbimpl->min = itt;
    #####:  773:					break;
        -:  774:				}
        3:  775:			} else if (v < 0) {
        -:  776:				// continue down the chain to look for more
        2:  777:				itt = itt->right;
        -:  778:			} else {
        -:  779:				// higher value found update min
        1:  780:				rbimpl->min = itt;
        1:  781:				itt = itt->left;
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        3:  786:	if (end_key != NULL) {
        1:  787:		RBTreeNode *itt = impl->root;
        5:  788:		while (itt != NIL) {
        4:  789:			int v = impl->compare(itt->data, end_key);
        4:  790:			if (v == 0) {
        -:  791:				// exact match
    #####:  792:				if (end_inclusive) {
    #####:  793:					rbimpl->max = itt;
    #####:  794:					break;
        -:  795:				}
        4:  796:			} else if (v < 0) {
        -:  797:				// lower value found update max
        3:  798:				rbimpl->max = itt;
        3:  799:				itt = itt->right;
        -:  800:			} else {
        -:  801:				// continue down the chain to look for more
        1:  802:				itt = itt->left;
        -:  803:			}
        -:  804:		}
        -:  805:	}
        -:  806:
        3:  807:	return 0;
        -:  808:}
        -:  809:
        -:  810:#ifdef TEST
 67310004:  811:void rbtree_validate_node(const RBTree *ptr, const RBTreeNode *node, int *black_count,
        -:  812:						  int current_black_count, u64 ids[100]) {
 67310004:  813:	ids[current_black_count] = node->node_id;
 67310004:  814:	RBTreeImpl *impl = $Ref(&ptr->impl);
 67310004:  815:	u64 key_size = impl->key_size;
 67310004:  816:	u64 value_size = impl->value_size;
        -:  817:
        -:  818:	// Base case: when we reach a NIL
 67310004:  819:	if (node == NIL) {
        -:  820:		// If this is the first NIL node reached, set the black count
 33664116:  821:		if (*black_count == 0) {
    18228:  822:			*black_count = current_black_count; // Set the black count for the first path
        -:  823:		} else {
        -:  824:			// Check for black count consistency
33645888*:  825:			assert(current_black_count == *black_count);
        -:  826:		}
 33664116:  827:		return; // Return for NIL nodes
        -:  828:	}
        -:  829:
        -:  830:	// Increment black count if the current node is black
 33645888:  831:	if (IS_BLACK(impl, node)) {
 19129797:  832:		current_black_count++;
        -:  833:	} else {
        -:  834:		//   Check if the node is red
        -:  835:		//   If the parent is red, return false (Red property violation)
14516091*:  836:		assert(!(node->parent != NIL && IS_RED(impl, node->parent)));
        -:  837:	}
        -:  838:
        -:  839:	// Recursive calls for left and right children
 33645888:  840:	rbtree_validate_node(ptr, node->left, black_count, current_black_count, ids);
 33645888:  841:	rbtree_validate_node(ptr, node->right, black_count, current_black_count, ids);
        -:  842:}
        -:  843:
    18232:  844:void rbtree_validate(const RBTree *ptr) {
    18232:  845:	RBTreeImpl *impl = $Ref(&ptr->impl);
    18232:  846:	int black_count = 0;
        -:  847:	u64 ids[100];
        -:  848:	// Validate from the root and check if the root is black
    18232:  849:	if (impl->root != NIL) {
   18228*:  850:		assert(IS_BLACK(impl, impl->root));
    18228:  851:		rbtree_validate_node(ptr, impl->root, &black_count, 0, ids);
        -:  852:	}
    18232:  853:}
        -:  854:
 25263318:  855:void rbtree_node_depth(RBTreeImpl *impl, RBTreeNode *node, u64 *max_depth, u64 cur_depth) {
 25263318:  856:	if (cur_depth > *max_depth)
   185476:  857:		*max_depth = cur_depth;
 25263318:  858:	if (node->right != NIL)
 12833391:  859:		rbtree_node_depth(impl, node->right, max_depth, cur_depth + 1);
 25263318:  860:	if (node->left != NIL)
 12415810:  861:		rbtree_node_depth(impl, node->left, max_depth, cur_depth + 1);
 25263318:  862:}
        -:  863:
    14117:  864:u64 rbtree_max_depth(const RBTree *ptr) {
    14117:  865:	RBTreeImpl *impl = $Ref(&ptr->impl);
    14117:  866:	u64 max_depth = 0;
    14117:  867:	rbtree_node_depth(impl, impl->root, &max_depth, 1);
    14117:  868:	return max_depth;
        -:  869:}
        -:  870:
        -:  871:// Function to print a single node with its color
        5:  872:void rbtree_print_node(const RBTree *ptr, const RBTreeNode *node, int depth) {
        5:  873:	RBTreeImpl *impl = $Ref(&ptr->impl);
        5:  874:	if (node == NIL) {
        8:  875:		for (int i = 0; i < depth; i++) {
        5:  876:			printf("    ");
        -:  877:		}
       3*:  878:		printf("%llu (%s)\n", node->node_id, (IS_BLACK(impl, node)) ? "B" : "R");
        3:  879:		return;
        -:  880:	}
        -:  881:
        -:  882:	// Print the right child first (for visual representation)
        2:  883:	rbtree_print_node(ptr, node->right, depth + 1);
        -:  884:
        -:  885:	// Indent according to depth
        3:  886:	for (int i = 0; i < depth; i++) {
        1:  887:		printf("    ");
        -:  888:	}
        -:  889:
        -:  890:	// Print the current node with a clearer representation
        2:  891:	printf("%llu (%s)\n", node->node_id, (IS_BLACK(impl, node)) ? "B" : "R");
        -:  892:
        -:  893:	// Print the left child
        2:  894:	rbtree_print_node(ptr, node->left, depth + 1);
        -:  895:}
        -:  896:
        -:  897:// Function to print the entire tree
        1:  898:void rbtree_print(const RBTree *ptr) {
        1:  899:	RBTreeImpl *impl = $Ref(&ptr->impl);
        -:  900:
        1:  901:	printf("Red-Black Tree (root = %llu)\n", impl->root->node_id);
        1:  902:	printf("===================================\n"); // Separator for better clarity
        1:  903:	rbtree_print_node(ptr, impl->root, 0);
        1:  904:	printf("===================================\n"); // Separator for better clarity
        1:  905:}
        -:  906:
        -:  907:#endif // TEST
        -:    0:Source:rc.c
        -:    0:Graph:rc.gcno
        -:    0:Data:rc.gcda
        -:    0:Runs:16
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/chain_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <stdatomic.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <util/rc.h>
        -:   22:
        -:   23:typedef struct RcMetaAtomic {
        -:   24:	atomic_ullong counts;	 // combined weak/strong counts (strong lower bits, weak upper bits)
        -:   25:	bool atomic;			 // whether or not this is an atomic reference counter
        -:   26:	void (*cleanup)(void *); // cleanup function to call when last Rc goes out of scope
        -:   27:	u64 size;				 // size of data
        -:   28:} RcMetaAtomic;
        -:   29:
        -:   30:// meta data associated with the Rc.
        -:   31:typedef struct RcMeta {
        -:   32:	u32 weak_count;			 // number of weak references
        -:   33:	u32 strong_count;		 // number of strong references
        -:   34:	bool atomic;			 // whether or not this is an atomic reference counter
        -:   35:	void (*cleanup)(void *); // cleanup function to call when last Rc goes out of scope
        -:   36:	u64 size;				 // size of data
        -:   37:} RcMeta;
        -:   38:
       16:   39:void __attribute__((constructor)) __check_atomic_size__() {
        -:   40:	if (sizeof(RcMetaAtomic) != sizeof(RcMeta)) {
        -:   41:		fprintf(stderr, "Error: sizes of RcMetaAtomic and RcMeta are not equal on this platform. "
        -:   42:						"Cannnot continue\n");
        -:   43:		exit(EXIT_FAILURE);
        -:   44:	}
       16:   45:}
        -:   46:
        -:   47:typedef struct RcImpl {
        -:   48:	RcMeta meta; // meta data for this Rc
        -:   49:	u8 data[];	 // data held in the Rc
        -:   50:} RcImpl;
        -:   51:
        -:   52:// cleanup function automatically called when the Rc goes out of scope
       11:   53:void rc_cleanup(RcNc *ptr) {
       11:   54:	if (nil(ptr->impl))
        1:   55:		return;
       10:   56:	RcImpl *impl = $Ref(&ptr->impl);
        -:   57:
        -:   58:	u32 strong_count, weak_count;
        -:   59:
       10:   60:	if (impl->meta.atomic) {
        5:   61:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        -:   62:
        -:   63:		// Decrement strong count
        5:   64:		u64 combined_counts = atomic_fetch_sub(&atomic->counts, 1);
        5:   65:		weak_count = ((combined_counts & 0xFFFFFFFF00000000ULL) >> 32);
        5:   66:		strong_count = (u32)(combined_counts & 0xFFFFFFFFULL);
        5:   67:		strong_count--;
        5:   68:		printf("rc cleanup with counts = %u, %u\n", weak_count, strong_count);
        -:   69:	} else {
        5:   70:		strong_count = --impl->meta.strong_count;
        5:   71:		weak_count = impl->meta.weak_count;
        -:   72:	}
        -:   73:
        -:   74:	// if strong count is 0, do cleanup tasks
       10:   75:	if (strong_count == 0) {
        -:   76:		// first get chain guard
        8:   77:		ChainGuard _ = ChainSend(impl->meta.atomic);
        -:   78:		// call user defined cleanup function
        4:   79:		impl->meta.cleanup(impl->data);
        -:   80:
        -:   81:		// if there's no weak references left, also free pointer
        4:   82:		if (weak_count == 0) {
        2:   83:			chain_free(&ptr->impl);
        -:   84:		}
        -:   85:	}
       10:   86:	ptr->impl = null;
        -:   87:}
        -:   88:
        -:   89:// cleanup function for the weak ref
        4:   90:void weak_cleanup(WeakNc *ptr) {
        4:   91:	if (nil(ptr->impl))
        2:   92:		return;
        2:   93:	RcImpl *impl = $Ref(&ptr->impl);
        -:   94:
        -:   95:	u32 strong_count, weak_count;
        -:   96:
        2:   97:	if (impl->meta.atomic) {
        1:   98:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        -:   99:
        -:  100:		// Decrement weak count
        1:  101:		u64 combined_counts = atomic_fetch_sub(&atomic->counts, 1ULL << 32);
        1:  102:		weak_count = ((combined_counts & 0xFFFFFFFF00000000ULL) >> 32);
        1:  103:		strong_count = (u32)(combined_counts & 0xFFFFFFFFULL);
        1:  104:		weak_count--;
        1:  105:		printf("weak cleanup with counts = %u, %u\n", weak_count, strong_count);
        -:  106:	} else {
        1:  107:		strong_count = impl->meta.strong_count;
        1:  108:		weak_count = --impl->meta.weak_count;
        -:  109:	}
        -:  110:
        -:  111:	// if both weak and strong counts are 0, we free the data here.
        2:  112:	if (strong_count == 0 && weak_count == 0) {
        4:  113:		ChainGuard _ = ChainSend(impl->meta.atomic);
        2:  114:		chain_free(&ptr->impl);
        -:  115:	}
        2:  116:	ptr->impl = null;
        -:  117:}
        -:  118:
        -:  119:// build an rc
        4:  120:int rc_build(Rc *ptr, void *data, u64 size, bool atomic, void (*cleanup)(void *)) {
        4:  121:	if (ptr == NULL || size == 0) {
    #####:  122:		fam_err = IllegalArgument;
    #####:  123:		return -1;
        -:  124:	}
        -:  125:
        -:  126:	{
        -:  127:		// allocate for both meta data and user data
        8:  128:		ChainGuard _ = ChainSend(atomic);
        4:  129:		if (chain_malloc(&ptr->impl, size + sizeof(RcMeta))) {
    #####:  130:			fam_err = AllocErr;
    #####:  131:			return -1;
        -:  132:		}
        -:  133:	}
        -:  134:
        -:  135:	// set initial values
        4:  136:	RcImpl *impl = $Ref(&ptr->impl);
        4:  137:	impl->meta.atomic = atomic;
        -:  138:
        4:  139:	if (atomic) {
        2:  140:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        2:  141:		atomic_store(&atomic->counts, 1ULL);
        -:  142:	} else {
        2:  143:		impl->meta.weak_count = 0;
        2:  144:		impl->meta.strong_count = 1;
        -:  145:	}
        4:  146:	impl->meta.cleanup = cleanup;
        4:  147:	impl->meta.size = size;
        -:  148:
        -:  149:	// copy data
        4:  150:	memcpy(impl->data, data, size);
        -:  151:
        4:  152:	return 0;
        -:  153:}
        -:  154:
        -:  155:// clone the reference counter incrementing the count
        4:  156:int rc_clone(Rc *dst, const Rc *src) {
        4:  157:	if (dst == NULL || src == NULL) {
    #####:  158:		fam_err = IllegalArgument;
    #####:  159:		return -1;
        -:  160:	}
        -:  161:
        4:  162:	RcImpl *impl = $Ref(&src->impl);
        4:  163:	if (impl->meta.atomic) {
        2:  164:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        2:  165:		atomic_fetch_add(&atomic->counts, 1ULL);
        -:  166:	} else {
        2:  167:		impl->meta.strong_count++;
        -:  168:	}
        4:  169:	dst->impl = src->impl;
        -:  170:
        4:  171:	return 0;
        -:  172:}
        -:  173:
        4:  174:void *rc_access(Rc *ptr) {
        4:  175:	if (ptr == NULL)
    #####:  176:		return NULL;
        4:  177:	RcImpl *impl = $Ref(&ptr->impl);
        4:  178:	return impl->data;
        -:  179:}
        -:  180:
        4:  181:int rc_weak(Weak *dst, const Rc *src) {
        4:  182:	if (dst == NULL || src == NULL) {
    #####:  183:		fam_err = IllegalArgument;
    #####:  184:		return -1;
        -:  185:	}
        4:  186:	RcImpl *impl = $Ref(&src->impl);
        4:  187:	if (impl->meta.atomic) {
        2:  188:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        2:  189:		atomic_fetch_add(&atomic->counts, 1ULL << 32);
        -:  190:
        -:  191:	} else {
        2:  192:		impl->meta.weak_count++;
        -:  193:	}
        4:  194:	dst->impl = src->impl;
        -:  195:
        4:  196:	return 0;
        -:  197:}
        -:  198:
        3:  199:int rc_upgrade(Rc *upgraded, Weak *ptr) {
        3:  200:	RcImpl *impl = $Ref(&ptr->impl);
        -:  201:
        3:  202:	if (impl->meta.atomic) {
        2:  203:		RcMetaAtomic *atomic = ((RcMetaAtomic *)&impl->meta);
        -:  204:
        -:  205:		u64 combined_counts, new_combined_counts;
        -:  206:		u32 strong_count;
        -:  207:
        -:  208:		do {
        2:  209:			combined_counts = atomic_load(&atomic->counts);
        2:  210:			strong_count = (u32)(combined_counts & 0xFFFFFFFFULL);
        2:  211:			if (strong_count == 0) {
        1:  212:				return -1; // Object already deallocated
        -:  213:			}
        -:  214:
        -:  215:			// Calculate the new combined count after the upgrade
        1:  216:			new_combined_counts = combined_counts - (1ULL << 32) + 1;
        -:  217:
        -:  218:			// Try to atomically update the counts using compare-and-swap
        -:  219:		} while (
        1:  220:			!atomic_compare_exchange_weak(&atomic->counts, &combined_counts, new_combined_counts));
        -:  221:
        -:  222:	} else {
        1:  223:		if (impl->meta.strong_count == 0)
    #####:  224:			return -1;
        1:  225:		impl->meta.strong_count++;
        1:  226:		impl->meta.weak_count--;
        -:  227:	}
        -:  228:
        2:  229:	upgraded->impl = ptr->impl;
        2:  230:	ptr->impl = null;
        2:  231:	return 0;
        -:  232:}
        -:    0:Source:aes.c
        -:    0:Graph:aes.gcno
        -:    0:Data:aes.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <stddef.h>
        -:   16:#include <stdint.h>
        -:   17:#include <stdio.h>
        -:   18:
        -:   19:/*
        -:   20:
        -:   21:This is an implementation of the AES algorithm, specifically ECB, CTR and CBC mode.
        -:   22:Block size can be chosen in aes.h - available choices are AES128, AES192, AES256.
        -:   23:
        -:   24:The implementation is verified against the test vectors in:
        -:   25:  National Institute of Standards and Technology Special Publication 800-38A 2001 ED
        -:   26:
        -:   27:ECB-AES128
        -:   28:----------
        -:   29:
        -:   30:  plain-text:
        -:   31:	6bc1bee22e409f96e93d7e117393172a
        -:   32:	ae2d8a571e03ac9c9eb76fac45af8e51
        -:   33:	30c81c46a35ce411e5fbc1191a0a52ef
        -:   34:	f69f2445df4f9b17ad2b417be66c3710
        -:   35:
        -:   36:  key:
        -:   37:	2b7e151628aed2a6abf7158809cf4f3c
        -:   38:
        -:   39:  resulting cipher
        -:   40:	3ad77bb40d7a3660a89ecaf32466ef97
        -:   41:	f5d3d58503b9699de785895a96fdbaaf
        -:   42:	43b1cd7f598ece23881b00e3ed030688
        -:   43:	7b0c785e27e8ad3f8223207104725dd4
        -:   44:
        -:   45:
        -:   46:NOTE:   String length must be evenly divisible by 16byte (str_len % 16 == 0)
        -:   47:		You should pad the end of the string with zeros if this is not the case.
        -:   48:		For AES192/256 the key size is proportionally larger.
        -:   49:
        -:   50:*/
        -:   51:
        -:   52:/*****************************************************************************/
        -:   53:/* Includes:                                                                 */
        -:   54:/*****************************************************************************/
        -:   55:#include "aes.h"
        -:   56:#include <string.h> // CBC mode, for memset
        -:   57:
        -:   58:/*****************************************************************************/
        -:   59:/* Defines:                                                                  */
        -:   60:/*****************************************************************************/
        -:   61:// The number of columns comprising a state in AES. This is a constant in AES. Value=4
        -:   62:#define Nb 4
        -:   63:
        -:   64:#if defined(AES256) && (AES256 == 1)
        -:   65:#define Nk 8
        -:   66:#define Nr 14
        -:   67:#elif defined(AES192) && (AES192 == 1)
        -:   68:#define Nk 6
        -:   69:#define Nr 12
        -:   70:#else
        -:   71:#define Nk 4  // The number of 32 bit words in a key.
        -:   72:#define Nr 10 // The number of rounds in AES Cipher.
        -:   73:#endif
        -:   74:
        -:   75:// jcallan@github points out that declaring Multiply as a function
        -:   76:// reduces code size considerably with the Keil ARM compiler.
        -:   77:// See this link for more information: https://github.com/kokke/tiny-AES-C/pull/3
        -:   78:#ifndef MULTIPLY_AS_A_FUNCTION
        -:   79:#define MULTIPLY_AS_A_FUNCTION 0
        -:   80:#endif
        -:   81:
        -:   82:/*****************************************************************************/
        -:   83:/* Private variables:                                                        */
        -:   84:/*****************************************************************************/
        -:   85:// state - array holding the intermediate results during decryption.
        -:   86:typedef u8 state_t[4][4];
        -:   87:
        -:   88:// The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
        -:   89:// The numbers below can be computed dynamically trading ROM for RAM -
        -:   90:// This can be useful in (embedded) bootloader applications, where ROM is often limited.
        -:   91:static const u8 sbox[256] = {
        -:   92:	// 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        -:   93:	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        -:   94:	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        -:   95:	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        -:   96:	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        -:   97:	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        -:   98:	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        -:   99:	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        -:  100:	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        -:  101:	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        -:  102:	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        -:  103:	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        -:  104:	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        -:  105:	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        -:  106:	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        -:  107:	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        -:  108:	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
        -:  109:
        -:  110:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  111:static const u8 rsbox[256] = {
        -:  112:	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        -:  113:	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        -:  114:	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        -:  115:	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        -:  116:	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        -:  117:	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        -:  118:	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        -:  119:	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        -:  120:	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        -:  121:	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        -:  122:	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        -:  123:	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        -:  124:	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        -:  125:	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        -:  126:	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        -:  127:	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};
        -:  128:#endif
        -:  129:
        -:  130:// The round constant word array, Rcon[i], contains the values given by
        -:  131:// x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
        -:  132:static const u8 Rcon[11] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
        -:  133:
        -:  134:/*
        -:  135: * Jordan Goulder points out in PR #12 (https://github.com/kokke/tiny-AES-C/pull/12),
        -:  136: * that you can remove most of the elements in the Rcon array, because they are unused.
        -:  137: *
        -:  138: * From Wikipedia's article on the Rijndael key schedule @
        -:  139: * https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon
        -:  140: *
        -:  141: * "Only the first some of these constants are actually used – up to rcon[10] for AES-128 (as 11
        -:  142: * round keys are needed), up to rcon[8] for AES-192, up to rcon[7] for AES-256. rcon[0] is not used
        -:  143: * in AES algorithm."
        -:  144: */
        -:  145:
        -:  146:/*****************************************************************************/
        -:  147:/* Private functions:                                                        */
        -:  148:/*****************************************************************************/
        -:  149:/*
        -:  150:static u8 getSBoxValue(u8 num)
        -:  151:{
        -:  152:  return sbox[num];
        -:  153:}
        -:  154:*/
        -:  155:#define getSBoxValue(num) (sbox[(num)])
        -:  156:
        -:  157:// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the
        -:  158:// states.
       21:  159:static void KeyExpansion(u8 *RoundKey, const u8 *Key) {
        -:  160:	unsigned i, j, k;
        -:  161:	u8 tempa[4]; // Used for the column/row operations
        -:  162:
        -:  163:	// The first round key is the key itself.
      189:  164:	for (i = 0; i < Nk; ++i) {
      168:  165:		RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
      168:  166:		RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
      168:  167:		RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
      168:  168:		RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
        -:  169:	}
        -:  170:
        -:  171:	// All other round keys are found from the previous round keys.
     1113:  172:	for (i = Nk; i < Nb * (Nr + 1); ++i) {
        -:  173:		{
     1092:  174:			k = (i - 1) * 4;
     1092:  175:			tempa[0] = RoundKey[k + 0];
     1092:  176:			tempa[1] = RoundKey[k + 1];
     1092:  177:			tempa[2] = RoundKey[k + 2];
     1092:  178:			tempa[3] = RoundKey[k + 3];
        -:  179:		}
        -:  180:
     1092:  181:		if (i % Nk == 0) {
        -:  182:			// This function shifts the 4 bytes in a word to the left once.
        -:  183:			// [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
        -:  184:
        -:  185:			// Function RotWord()
        -:  186:			{
      147:  187:				const u8 u8tmp = tempa[0];
      147:  188:				tempa[0] = tempa[1];
      147:  189:				tempa[1] = tempa[2];
      147:  190:				tempa[2] = tempa[3];
      147:  191:				tempa[3] = u8tmp;
        -:  192:			}
        -:  193:
        -:  194:			// SubWord() is a function that takes a four-byte input word and
        -:  195:			// applies the S-box to each of the four bytes to produce an output word.
        -:  196:
        -:  197:			// Function Subword()
        -:  198:			{
      147:  199:				tempa[0] = getSBoxValue(tempa[0]);
      147:  200:				tempa[1] = getSBoxValue(tempa[1]);
      147:  201:				tempa[2] = getSBoxValue(tempa[2]);
      147:  202:				tempa[3] = getSBoxValue(tempa[3]);
        -:  203:			}
        -:  204:
      147:  205:			tempa[0] = tempa[0] ^ Rcon[i / Nk];
        -:  206:		}
        -:  207:#if defined(AES256) && (AES256 == 1)
     1092:  208:		if (i % Nk == 4) {
        -:  209:			// Function Subword()
        -:  210:			{
      126:  211:				tempa[0] = getSBoxValue(tempa[0]);
      126:  212:				tempa[1] = getSBoxValue(tempa[1]);
      126:  213:				tempa[2] = getSBoxValue(tempa[2]);
      126:  214:				tempa[3] = getSBoxValue(tempa[3]);
        -:  215:			}
        -:  216:		}
        -:  217:#endif
     1092:  218:		j = i * 4;
     1092:  219:		k = (i - Nk) * 4;
     1092:  220:		RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
     1092:  221:		RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
     1092:  222:		RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
     1092:  223:		RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
        -:  224:	}
       21:  225:}
        -:  226:
    #####:  227:void AES_init_ctx(struct AES_ctx *ctx, const u8 *key) {
    #####:  228:	KeyExpansion(ctx->RoundKey, key);
    #####:  229:}
        -:  230:#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
       21:  231:void AES_init_ctx_iv(struct AES_ctx *ctx, const u8 *key, const u8 *iv) {
       21:  232:	KeyExpansion(ctx->RoundKey, key);
       21:  233:	memcpy(ctx->Iv, iv, AES_BLOCKLEN);
       21:  234:}
    #####:  235:void AES_ctx_set_iv(struct AES_ctx *ctx, const u8 *iv) {
    #####:  236:	memcpy(ctx->Iv, iv, AES_BLOCKLEN);
    #####:  237:}
        -:  238:#endif
        -:  239:
        -:  240:// This function adds the round key to state.
        -:  241:// The round key is added to the state by an XOR function.
   311460:  242:static void AddRoundKey(u8 round, state_t *state, const u8 *RoundKey) {
        -:  243:	u8 i, j;
  1557300:  244:	for (i = 0; i < 4; ++i) {
  6229200:  245:		for (j = 0; j < 4; ++j) {
  4983360:  246:			(*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
        -:  247:		}
        -:  248:	}
   311460:  249:}
        -:  250:
        -:  251:// The SubBytes Function Substitutes the values in the
        -:  252:// state matrix with values in an S-box.
   290696:  253:static void SubBytes(state_t *state) {
        -:  254:	u8 i, j;
  1453480:  255:	for (i = 0; i < 4; ++i) {
  5813920:  256:		for (j = 0; j < 4; ++j) {
  4651136:  257:			(*state)[j][i] = getSBoxValue((*state)[j][i]);
        -:  258:		}
        -:  259:	}
   290696:  260:}
        -:  261:
        -:  262:// The ShiftRows() function shifts the rows in the state to the left.
        -:  263:// Each row is shifted with different offset.
        -:  264:// Offset = Row number. So the first row is not shifted.
   290696:  265:static void ShiftRows(state_t *state) {
        -:  266:	u8 temp;
        -:  267:
        -:  268:	// Rotate first row 1 columns to left
   290696:  269:	temp = (*state)[0][1];
   290696:  270:	(*state)[0][1] = (*state)[1][1];
   290696:  271:	(*state)[1][1] = (*state)[2][1];
   290696:  272:	(*state)[2][1] = (*state)[3][1];
   290696:  273:	(*state)[3][1] = temp;
        -:  274:
        -:  275:	// Rotate second row 2 columns to left
   290696:  276:	temp = (*state)[0][2];
   290696:  277:	(*state)[0][2] = (*state)[2][2];
   290696:  278:	(*state)[2][2] = temp;
        -:  279:
   290696:  280:	temp = (*state)[1][2];
   290696:  281:	(*state)[1][2] = (*state)[3][2];
   290696:  282:	(*state)[3][2] = temp;
        -:  283:
        -:  284:	// Rotate third row 3 columns to left
   290696:  285:	temp = (*state)[0][3];
   290696:  286:	(*state)[0][3] = (*state)[3][3];
   290696:  287:	(*state)[3][3] = (*state)[2][3];
   290696:  288:	(*state)[2][3] = (*state)[1][3];
   290696:  289:	(*state)[1][3] = temp;
   290696:  290:}
        -:  291:
  4318912:  292:static u8 xtime(u8 x) {
  4318912:  293:	return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
        -:  294:}
        -:  295:
        -:  296:// MixColumns function mixes the columns of the state matrix
   269932:  297:static void MixColumns(state_t *state) {
        -:  298:	u8 i;
        -:  299:	u8 Tmp, Tm, t;
  1349660:  300:	for (i = 0; i < 4; ++i) {
  1079728:  301:		t = (*state)[i][0];
  1079728:  302:		Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
  1079728:  303:		Tm = (*state)[i][0] ^ (*state)[i][1];
  1079728:  304:		Tm = xtime(Tm);
  1079728:  305:		(*state)[i][0] ^= Tm ^ Tmp;
  1079728:  306:		Tm = (*state)[i][1] ^ (*state)[i][2];
  1079728:  307:		Tm = xtime(Tm);
  1079728:  308:		(*state)[i][1] ^= Tm ^ Tmp;
  1079728:  309:		Tm = (*state)[i][2] ^ (*state)[i][3];
  1079728:  310:		Tm = xtime(Tm);
  1079728:  311:		(*state)[i][2] ^= Tm ^ Tmp;
  1079728:  312:		Tm = (*state)[i][3] ^ t;
  1079728:  313:		Tm = xtime(Tm);
  1079728:  314:		(*state)[i][3] ^= Tm ^ Tmp;
        -:  315:	}
   269932:  316:}
        -:  317:
        -:  318:// Multiply is used to multiply numbers in the field GF(2^8)
        -:  319:// Note: The last call to xtime() is unneeded, but often ends up generating a smaller binary
        -:  320://       The compiler seems to be able to vectorize the operation better this way.
        -:  321://       See https://github.com/kokke/tiny-AES-c/pull/34
        -:  322:#if MULTIPLY_AS_A_FUNCTION
        -:  323:static u8 Multiply(u8 x, u8 y) {
        -:  324:	return (((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ ((y >> 2 & 1) * xtime(xtime(x))) ^
        -:  325:			((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^
        -:  326:			((y >> 4 & 1) *
        -:  327:			 xtime(xtime(xtime(xtime(x)))))); /* this last call to xtime() can be omitted */
        -:  328:}
        -:  329:#else
        -:  330:#define Multiply(x, y)                                                                             \
        -:  331:	(((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ ((y >> 2 & 1) * xtime(xtime(x))) ^                \
        -:  332:	 ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^ ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x))))))
        -:  333:
        -:  334:#endif
        -:  335:
        -:  336:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  337:/*
        -:  338:static u8 getSBoxInvert(u8 num)
        -:  339:{
        -:  340:  return rsbox[num];
        -:  341:}
        -:  342:*/
        -:  343:#define getSBoxInvert(num) (rsbox[(num)])
        -:  344:
        -:  345:// MixColumns function mixes the columns of the state matrix.
        -:  346:// The method used to multiply may be difficult to understand for the inexperienced.
        -:  347:// Please use the references to gain more information.
    #####:  348:static void InvMixColumns(state_t *state) {
        -:  349:	int i;
        -:  350:	u8 a, b, c, d;
    #####:  351:	for (i = 0; i < 4; ++i) {
    #####:  352:		a = (*state)[i][0];
    #####:  353:		b = (*state)[i][1];
    #####:  354:		c = (*state)[i][2];
    #####:  355:		d = (*state)[i][3];
        -:  356:
    #####:  357:		(*state)[i][0] =
    #####:  358:			Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    #####:  359:		(*state)[i][1] =
    #####:  360:			Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    #####:  361:		(*state)[i][2] =
    #####:  362:			Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    #####:  363:		(*state)[i][3] =
    #####:  364:			Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
        -:  365:	}
    #####:  366:}
        -:  367:
        -:  368:// The SubBytes Function Substitutes the values in the
        -:  369:// state matrix with values in an S-box.
    #####:  370:static void InvSubBytes(state_t *state) {
        -:  371:	u8 i, j;
    #####:  372:	for (i = 0; i < 4; ++i) {
    #####:  373:		for (j = 0; j < 4; ++j) {
    #####:  374:			(*state)[j][i] = getSBoxInvert((*state)[j][i]);
        -:  375:		}
        -:  376:	}
    #####:  377:}
        -:  378:
    #####:  379:static void InvShiftRows(state_t *state) {
        -:  380:	u8 temp;
        -:  381:
        -:  382:	// Rotate first row 1 columns to right
    #####:  383:	temp = (*state)[3][1];
    #####:  384:	(*state)[3][1] = (*state)[2][1];
    #####:  385:	(*state)[2][1] = (*state)[1][1];
    #####:  386:	(*state)[1][1] = (*state)[0][1];
    #####:  387:	(*state)[0][1] = temp;
        -:  388:
        -:  389:	// Rotate second row 2 columns to right
    #####:  390:	temp = (*state)[0][2];
    #####:  391:	(*state)[0][2] = (*state)[2][2];
    #####:  392:	(*state)[2][2] = temp;
        -:  393:
    #####:  394:	temp = (*state)[1][2];
    #####:  395:	(*state)[1][2] = (*state)[3][2];
    #####:  396:	(*state)[3][2] = temp;
        -:  397:
        -:  398:	// Rotate third row 3 columns to right
    #####:  399:	temp = (*state)[0][3];
    #####:  400:	(*state)[0][3] = (*state)[1][3];
    #####:  401:	(*state)[1][3] = (*state)[2][3];
    #####:  402:	(*state)[2][3] = (*state)[3][3];
    #####:  403:	(*state)[3][3] = temp;
    #####:  404:}
        -:  405:#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  406:
        -:  407:// Cipher is the main function that encrypts the PlainText.
    20764:  408:static void Cipher(state_t *state, const u8 *RoundKey) {
    20764:  409:	u8 round = 0;
        -:  410:
        -:  411:	// Add the First round key to the state before starting the rounds.
    20764:  412:	AddRoundKey(0, state, RoundKey);
        -:  413:
        -:  414:	// There will be Nr rounds.
        -:  415:	// The first Nr-1 rounds are identical.
        -:  416:	// These Nr rounds are executed in the loop below.
        -:  417:	// Last one without MixColumns()
   290696:  418:	for (round = 1;; ++round) {
   290696:  419:		SubBytes(state);
   290696:  420:		ShiftRows(state);
   290696:  421:		if (round == Nr) {
    20764:  422:			break;
        -:  423:		}
   269932:  424:		MixColumns(state);
   269932:  425:		AddRoundKey(round, state, RoundKey);
        -:  426:	}
        -:  427:	// Add round key to last round
    20764:  428:	AddRoundKey(Nr, state, RoundKey);
    20764:  429:}
        -:  430:
        -:  431:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
    #####:  432:static void InvCipher(state_t *state, const u8 *RoundKey) {
    #####:  433:	u8 round = 0;
        -:  434:
        -:  435:	// Add the First round key to the state before starting the rounds.
    #####:  436:	AddRoundKey(Nr, state, RoundKey);
        -:  437:
        -:  438:	// There will be Nr rounds.
        -:  439:	// The first Nr-1 rounds are identical.
        -:  440:	// These Nr rounds are executed in the loop below.
        -:  441:	// Last one without InvMixColumn()
    #####:  442:	for (round = (Nr - 1);; --round) {
    #####:  443:		InvShiftRows(state);
    #####:  444:		InvSubBytes(state);
    #####:  445:		AddRoundKey(round, state, RoundKey);
    #####:  446:		if (round == 0) {
    #####:  447:			break;
        -:  448:		}
    #####:  449:		InvMixColumns(state);
        -:  450:	}
    #####:  451:}
        -:  452:#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  453:
        -:  454:/*****************************************************************************/
        -:  455:/* Public functions:                                                         */
        -:  456:/*****************************************************************************/
        -:  457:#if defined(ECB) && (ECB == 1)
        -:  458:
    #####:  459:void AES_ECB_encrypt(const struct AES_ctx *ctx, u8 *buf) {
        -:  460:	// The next function call encrypts the PlainText with the Key using AES algorithm.
    #####:  461:	Cipher((state_t *)buf, ctx->RoundKey);
    #####:  462:}
        -:  463:
    #####:  464:void AES_ECB_decrypt(const struct AES_ctx *ctx, u8 *buf) {
        -:  465:	// The next function call decrypts the PlainText with the Key using AES algorithm.
    #####:  466:	InvCipher((state_t *)buf, ctx->RoundKey);
    #####:  467:}
        -:  468:
        -:  469:#endif // #if defined(ECB) && (ECB == 1)
        -:  470:
        -:  471:#if defined(CBC) && (CBC == 1)
        -:  472:
    #####:  473:static void XorWithIv(u8 *buf, const u8 *Iv) {
        -:  474:	u8 i;
    #####:  475:	for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
        -:  476:	{
    #####:  477:		buf[i] ^= Iv[i];
        -:  478:	}
    #####:  479:}
        -:  480:
    #####:  481:void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, u8 *buf, u64 length) {
        -:  482:	u64 i;
    #####:  483:	u8 *Iv = ctx->Iv;
    #####:  484:	for (i = 0; i < length; i += AES_BLOCKLEN) {
    #####:  485:		XorWithIv(buf, Iv);
    #####:  486:		Cipher((state_t *)buf, ctx->RoundKey);
    #####:  487:		Iv = buf;
    #####:  488:		buf += AES_BLOCKLEN;
        -:  489:	}
        -:  490:	/* store Iv in ctx for next call */
    #####:  491:	memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
    #####:  492:}
        -:  493:
    #####:  494:void AES_CBC_decrypt_buffer(struct AES_ctx *ctx, u8 *buf, u64 length) {
        -:  495:	u64 i;
        -:  496:	u8 storeNextIv[AES_BLOCKLEN];
    #####:  497:	for (i = 0; i < length; i += AES_BLOCKLEN) {
    #####:  498:		memcpy(storeNextIv, buf, AES_BLOCKLEN);
    #####:  499:		InvCipher((state_t *)buf, ctx->RoundKey);
    #####:  500:		XorWithIv(buf, ctx->Iv);
    #####:  501:		memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
    #####:  502:		buf += AES_BLOCKLEN;
        -:  503:	}
    #####:  504:}
        -:  505:
        -:  506:#endif // #if defined(CBC) && (CBC == 1)
        -:  507:
        -:  508:#if defined(CTR) && (CTR == 1)
        -:  509:
        -:  510:/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should
        -:  511: * never be reused with the same key */
    20764:  512:void AES_CTR_xcrypt_buffer(struct AES_ctx *ctx, u8 *buf, u64 length) {
        -:  513:	u8 buffer[AES_BLOCKLEN];
        -:  514:
        -:  515:	u64 i;
        -:  516:	int bi;
   116841:  517:	for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi) {
    96077:  518:		if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
        -:  519:		{
        -:  520:
    20764:  521:			memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
    20764:  522:			Cipher((state_t *)buffer, ctx->RoundKey);
        -:  523:
        -:  524:			/* Increment Iv and handle overflow */
    20845:  525:			for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi) {
        -:  526:				/* inc will overflow */
    20845:  527:				if (ctx->Iv[bi] == 255) {
       81:  528:					ctx->Iv[bi] = 0;
       81:  529:					continue;
        -:  530:				}
    20764:  531:				ctx->Iv[bi] += 1;
    20764:  532:				break;
        -:  533:			}
    20764:  534:			bi = 0;
        -:  535:		}
        -:  536:
    96077:  537:		buf[i] = (buf[i] ^ buffer[bi]);
        -:  538:	}
    20764:  539:}
        -:  540:
        -:  541:#endif // #if defined(CTR) && (CTR == 1)
        -:    0:Source:psrng.c
        -:    0:Graph:psrng.gcno
        -:    0:Data:psrng.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <crypto/aes.h>
        -:   16:#include <crypto/psrng.h>
        -:   17:#include <crypto/rand.h>
        -:   18:#include <stdio.h>
        -:   19:#include <string.h>
        -:   20:
        -:   21:static struct AES_ctx ctx;
        -:   22:
       18:   23:void psrng_reseed() {
        -:   24:	u8 iv[16];
        -:   25:	u8 key[32];
       18:   26:	if (rand_bytes(key, 32)) {
    #####:   27:		perror("Could not generate entropy for AES key generation");
    #####:   28:		exit(-1);
        -:   29:	}
       18:   30:	if (rand_bytes(iv, 16)) {
    #####:   31:		perror("Could not generate entropy for AES iv generation");
    #####:   32:		exit(-1);
        -:   33:	}
        -:   34:
       18:   35:	AES_init_ctx_iv(&ctx, key, iv);
       18:   36:}
        -:   37:
        -:   38:// __attribute__ ((constructor)) guaranteed to be called before main.
        -:   39:// This will either succeed or exit before main is called.
       18:   40:void __attribute__((constructor)) __init_psrng() {
       18:   41:	psrng_reseed();
       18:   42:}
        -:   43:
        -:   44:// note: not thread safe as user must ensure thread safety. This allows for flexible usage
        -:   45:// in a single thread, no locking is needed. In multi-threaded environments, locking may be used.
    10005:   46:void psrng_rand_u8(u8 *v) {
    10005:   47:	AES_CTR_xcrypt_buffer(&ctx, v, sizeof(u8));
    10005:   48:}
        -:   49:
        -:   50:// note: not thread safe as user must ensure thread safety. This allows for flexible usage
        -:   51:// in a single thread, no locking is needed. In multi-threaded environments, locking may be used.
    10759:   52:void psrng_rand_u64(u64 *v) {
    10759:   53:	AES_CTR_xcrypt_buffer(&ctx, (u8 *)v, sizeof(u64));
    10759:   54:}
        -:   55:
        -:   56:// note: not thread safe as user must ensure thread safety. This allows for flexible usage
        -:   57:// in a single thread, no locking is needed. In multi-threaded environments, locking may be used.
    #####:   58:void psrng_rand_u128(u128 *v) {
    #####:   59:	AES_CTR_xcrypt_buffer(&ctx, (u8 *)v, sizeof(u128));
    #####:   60:}
        -:   61:
        -:   62:// note: not thread safe as user must ensure thread safety. This allows for flexible usage
        -:   63:// in a single thread, no locking is needed. In multi-threaded environments, locking may be used.
    #####:   64:void psrng_rand_bytes(void *v, u64 size) {
    #####:   65:	AES_CTR_xcrypt_buffer(&ctx, (u8 *)v, size);
    #####:   66:}
        -:   67:
        -:   68:// only available in test mode for tests. Not used in production environments.
        -:   69:#ifdef TEST
        3:   70:void psrng_test_seed(u8 iv[16], u8 key[32]) {
        3:   71:	AES_init_ctx_iv(&ctx, key, iv);
        3:   72:	u64 v0 = 0;
        3:   73:	psrng_rand_u64(&v0);
        3:   74:}
        -:   75:#endif // TEST
        -:    0:Source:rand.c
        -:    0:Graph:rand.gcno
        -:    0:Data:rand.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/types.h>
        -:   16:#include <crypto/rand.h>
        -:   17:#include <sys/random.h>
        -:   18:
    #####:   19:int rand_i8(i8 *v) {
    #####:   20:	return getentropy(v, sizeof(i8));
        -:   21:}
        -:   22:
    #####:   23:int rand_u8(u8 *v) {
    #####:   24:	return getentropy(v, sizeof(u8));
        -:   25:}
        -:   26:
    #####:   27:int rand_i16(i16 *v) {
    #####:   28:	return getentropy(v, sizeof(i16));
        -:   29:}
        -:   30:
    #####:   31:int rand_u16(u16 *v) {
    #####:   32:	return getentropy(v, sizeof(u16));
        -:   33:}
        -:   34:
    #####:   35:int rand_i32(i32 *v) {
    #####:   36:	return getentropy(v, sizeof(i32));
        -:   37:}
        -:   38:
    #####:   39:int rand_u32(u32 *v) {
    #####:   40:	return getentropy(v, sizeof(u32));
        -:   41:}
        -:   42:
    #####:   43:int rand_i64(i64 *v) {
    #####:   44:	return getentropy(v, sizeof(i64));
        -:   45:}
        -:   46:
    #####:   47:int rand_u64(u64 *v) {
    #####:   48:	return getentropy(v, sizeof(u64));
        -:   49:}
        -:   50:
    #####:   51:int rand_i128(i128 *v) {
    #####:   52:	return getentropy(v, sizeof(i128));
        -:   53:}
        -:   54:
    #####:   55:int rand_u128(u128 *v) {
    #####:   56:	return getentropy(v, sizeof(u128));
        -:   57:}
        -:   58:
       36:   59:int rand_bytes(void *buf, u64 length) {
       36:   60:	return getentropy(buf, length);
        -:   61:}
        -:    0:Source:sha3.c
        -:    0:Graph:sha3.gcno
        -:    0:Data:sha3.gcda
        -:    0:Runs:18
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:/* -------------------------------------------------------------------------
        -:   16: * Works when compiled for either 32-bit or 64-bit targets, optimized for
        -:   17: * 64 bit.
        -:   18: *
        -:   19: * Canonical implementation of Init/Update/Finalize for SHA-3 byte input.
        -:   20: *
        -:   21: * SHA3-256, SHA3-384, SHA-512 are implemented. SHA-224 can easily be added.
        -:   22: *
        -:   23: * Based on code from http://keccak.noekeon.org/ .
        -:   24: *
        -:   25: * I place the code that I wrote into public domain, free to use.
        -:   26: *
        -:   27: * I would appreciate if you give credits to this work if you used it to
        -:   28: * write or test * your code.
        -:   29: *
        -:   30: * Aug 2015. Andrey Jivsov. crypto@brainhub.org
        -:   31: * ---------------------------------------------------------------------- */
        -:   32:
        -:   33:#include <stdint.h>
        -:   34:#include <stdio.h>
        -:   35:#include <string.h>
        -:   36:
        -:   37:#include <crypto/sha3.h>
        -:   38:
        -:   39:#define SHA3_ASSERT(x)
        -:   40:#define SHA3_TRACE(format, ...)
        -:   41:#define SHA3_TRACE_BUF(format, buf, l)
        -:   42:
        -:   43:/*
        -:   44: * This flag is used to configure "pure" Keccak, as opposed to NIST SHA3.
        -:   45: */
        -:   46:#define SHA3_USE_KECCAK_FLAG 0x80000000
        -:   47:#define SHA3_CW(x) ((x) & (~SHA3_USE_KECCAK_FLAG))
        -:   48:
        -:   49:#if defined(_MSC_VER)
        -:   50:#define SHA3_CONST(x) x
        -:   51:#else
        -:   52:#define SHA3_CONST(x) x##L
        -:   53:#endif
        -:   54:
        -:   55:#ifndef SHA3_ROTL64
        -:   56:#define SHA3_ROTL64(x, y) (((x) << (y)) | ((x) >> ((sizeof(u64) * 8) - (y))))
        -:   57:#endif
        -:   58:
        -:   59:static const u64 keccakf_rndc[24] = {
        -:   60:	SHA3_CONST(0x0000000000000001UL), SHA3_CONST(0x0000000000008082UL),
        -:   61:	SHA3_CONST(0x800000000000808aUL), SHA3_CONST(0x8000000080008000UL),
        -:   62:	SHA3_CONST(0x000000000000808bUL), SHA3_CONST(0x0000000080000001UL),
        -:   63:	SHA3_CONST(0x8000000080008081UL), SHA3_CONST(0x8000000000008009UL),
        -:   64:	SHA3_CONST(0x000000000000008aUL), SHA3_CONST(0x0000000000000088UL),
        -:   65:	SHA3_CONST(0x0000000080008009UL), SHA3_CONST(0x000000008000000aUL),
        -:   66:	SHA3_CONST(0x000000008000808bUL), SHA3_CONST(0x800000000000008bUL),
        -:   67:	SHA3_CONST(0x8000000000008089UL), SHA3_CONST(0x8000000000008003UL),
        -:   68:	SHA3_CONST(0x8000000000008002UL), SHA3_CONST(0x8000000000000080UL),
        -:   69:	SHA3_CONST(0x000000000000800aUL), SHA3_CONST(0x800000008000000aUL),
        -:   70:	SHA3_CONST(0x8000000080008081UL), SHA3_CONST(0x8000000000008080UL),
        -:   71:	SHA3_CONST(0x0000000080000001UL), SHA3_CONST(0x8000000080008008UL)};
        -:   72:
        -:   73:static const unsigned keccakf_rotc[24] = {1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        -:   74:										  27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44};
        -:   75:
        -:   76:static const unsigned keccakf_piln[24] = {10, 7,  11, 17, 18, 3, 5,	 16, 8,	 21, 24, 4,
        -:   77:										  15, 23, 19, 13, 12, 2, 20, 14, 22, 9,	 6,	 1};
        -:   78:
        -:   79:/* generally called after SHA3_KECCAK_SPONGE_WORDS-ctx->capacityWords words
        -:   80: * are XORed into the state s
        -:   81: */
       11:   82:static void keccakf(u64 s[25]) {
        -:   83:	int i, j, round;
        -:   84:	u64 t, bc[5];
        -:   85:#define KECCAK_ROUNDS 24
        -:   86:
      275:   87:	for (round = 0; round < KECCAK_ROUNDS; round++) {
        -:   88:
        -:   89:		/* Theta */
     1584:   90:		for (i = 0; i < 5; i++)
     1320:   91:			bc[i] = s[i] ^ s[i + 5] ^ s[i + 10] ^ s[i + 15] ^ s[i + 20];
        -:   92:
     1584:   93:		for (i = 0; i < 5; i++) {
     1320:   94:			t = bc[(i + 4) % 5] ^ SHA3_ROTL64(bc[(i + 1) % 5], 1);
     7920:   95:			for (j = 0; j < 25; j += 5)
     6600:   96:				s[j + i] ^= t;
        -:   97:		}
        -:   98:
        -:   99:		/* Rho Pi */
      264:  100:		t = s[1];
     6600:  101:		for (i = 0; i < 24; i++) {
     6336:  102:			j = keccakf_piln[i];
     6336:  103:			bc[0] = s[j];
     6336:  104:			s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
     6336:  105:			t = bc[0];
        -:  106:		}
        -:  107:
        -:  108:		/* Chi */
     1584:  109:		for (j = 0; j < 25; j += 5) {
     7920:  110:			for (i = 0; i < 5; i++)
     6600:  111:				bc[i] = s[j + i];
     7920:  112:			for (i = 0; i < 5; i++)
     6600:  113:				s[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
        -:  114:		}
        -:  115:
        -:  116:		/* Iota */
      264:  117:		s[0] ^= keccakf_rndc[round];
        -:  118:	}
       11:  119:}
        -:  120:
        -:  121:/* *************************** Public Inteface ************************ */
        -:  122:
        -:  123:/* For Init or Reset call these: */
       11:  124:sha3_return_t sha3_Init(void *priv, unsigned bitSize) {
       11:  125:	sha3_context *ctx = (sha3_context *)priv;
      11*:  126:	if (bitSize != 256 && bitSize != 384 && bitSize != 512)
    #####:  127:		return SHA3_RETURN_BAD_PARAMS;
       11:  128:	memset(ctx, 0, sizeof(*ctx));
       11:  129:	ctx->capacityWords = 2 * bitSize / (8 * sizeof(u64));
       11:  130:	return SHA3_RETURN_OK;
        -:  131:}
        -:  132:
       11:  133:void sha3_Init256(void *priv) {
       11:  134:	sha3_Init(priv, 256);
       11:  135:}
        -:  136:
    #####:  137:void sha3_Init384(void *priv) {
    #####:  138:	sha3_Init(priv, 384);
    #####:  139:}
        -:  140:
    #####:  141:void sha3_Init512(void *priv) {
    #####:  142:	sha3_Init(priv, 512);
    #####:  143:}
        -:  144:
    #####:  145:enum SHA3_FLAGS sha3_SetFlags(void *priv, enum SHA3_FLAGS flags) {
    #####:  146:	sha3_context *ctx = (sha3_context *)priv;
    #####:  147:	flags &= SHA3_FLAGS_KECCAK;
    #####:  148:	ctx->capacityWords |= (flags == SHA3_FLAGS_KECCAK ? SHA3_USE_KECCAK_FLAG : 0);
    #####:  149:	return flags;
        -:  150:}
        -:  151:
       11:  152:void sha3_Update(void *priv, void const *bufIn, u64 len) {
       11:  153:	sha3_context *ctx = (sha3_context *)priv;
        -:  154:
        -:  155:	/* 0...7 -- how much is needed to have a word */
       11:  156:	unsigned old_tail = (8 - ctx->byteIndex) & 7;
        -:  157:
        -:  158:	u64 words;
        -:  159:	unsigned tail;
        -:  160:	u64 i;
        -:  161:
       11:  162:	const u8 *buf = bufIn;
        -:  163:
        -:  164:	SHA3_TRACE_BUF("called to update with:", buf, len);
        -:  165:
        -:  166:	SHA3_ASSERT(ctx->byteIndex < 8);
        -:  167:	SHA3_ASSERT(ctx->wordIndex < sizeof(ctx->u.s) / sizeof(ctx->u.s[0]));
        -:  168:
       11:  169:	if (len < old_tail) { /* have no complete word or haven't started
        -:  170:						   * the word yet */
        -:  171:		SHA3_TRACE("because %d<%d, store it and return", (unsigned)len, (unsigned)old_tail);
        -:  172:		/* endian-independent code follows: */
    #####:  173:		while (len--)
    #####:  174:			ctx->saved |= (u64)(*(buf++)) << ((ctx->byteIndex++) * 8);
        -:  175:		SHA3_ASSERT(ctx->byteIndex < 8);
    #####:  176:		return;
        -:  177:	}
        -:  178:
       11:  179:	if (old_tail) { /* will have one word to process */
        -:  180:		SHA3_TRACE("completing one word with %d bytes", (unsigned)old_tail);
        -:  181:		/* endian-independent code follows: */
    #####:  182:		len -= old_tail;
    #####:  183:		while (old_tail--)
    #####:  184:			ctx->saved |= (u64)(*(buf++)) << ((ctx->byteIndex++) * 8);
        -:  185:
        -:  186:		/* now ready to add saved to the sponge */
    #####:  187:		ctx->u.s[ctx->wordIndex] ^= ctx->saved;
        -:  188:		SHA3_ASSERT(ctx->byteIndex == 8);
    #####:  189:		ctx->byteIndex = 0;
    #####:  190:		ctx->saved = 0;
    #####:  191:		if (++ctx->wordIndex == (SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
    #####:  192:			keccakf(ctx->u.s);
    #####:  193:			ctx->wordIndex = 0;
        -:  194:		}
        -:  195:	}
        -:  196:
        -:  197:	/* now work in full words directly from input */
        -:  198:
        -:  199:	SHA3_ASSERT(ctx->byteIndex == 0);
        -:  200:
       11:  201:	words = len / sizeof(u64);
       11:  202:	tail = len - words * sizeof(u64);
        -:  203:
        -:  204:	SHA3_TRACE("have %d full words to process", (unsigned)words);
        -:  205:
       33:  206:	for (i = 0; i < words; i++, buf += sizeof(u64)) {
       22:  207:		const u64 t = (u64)(buf[0]) | ((u64)(buf[1]) << 8 * 1) | ((u64)(buf[2]) << 8 * 2) |
       22:  208:					  ((u64)(buf[3]) << 8 * 3) | ((u64)(buf[4]) << 8 * 4) |
       22:  209:					  ((u64)(buf[5]) << 8 * 5) | ((u64)(buf[6]) << 8 * 6) |
       22:  210:					  ((u64)(buf[7]) << 8 * 7);
        -:  211:#if defined(__x86_64__) || defined(__i386__)
        -:  212:		SHA3_ASSERT(memcmp(&t, buf, 8) == 0);
        -:  213:#endif
       22:  214:		ctx->u.s[ctx->wordIndex] ^= t;
       22:  215:		if (++ctx->wordIndex == (SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
    #####:  216:			keccakf(ctx->u.s);
    #####:  217:			ctx->wordIndex = 0;
        -:  218:		}
        -:  219:	}
        -:  220:
        -:  221:	SHA3_TRACE("have %d bytes left to process, save them", (unsigned)tail);
        -:  222:
        -:  223:	/* finally, save the partial word */
        -:  224:	SHA3_ASSERT(ctx->byteIndex == 0 && tail < 8);
       55:  225:	while (tail--) {
        -:  226:		SHA3_TRACE("Store byte %02x '%c'", *buf, *buf);
       44:  227:		ctx->saved |= (u64)(*(buf++)) << ((ctx->byteIndex++) * 8);
        -:  228:	}
        -:  229:	SHA3_ASSERT(ctx->byteIndex < 8);
        -:  230:	SHA3_TRACE("Have saved=0x%016" PRIx64 " at the end", ctx->saved);
        -:  231:}
        -:  232:
        -:  233:/* This is simply the 'update' with the padding block.
        -:  234: * The padding block is 0x01 || 0x00* || 0x80. First 0x01 and last 0x80
        -:  235: * bytes are always present, but they can be the same byte.
        -:  236: */
       11:  237:void const *sha3_Finalize(void *priv) {
       11:  238:	sha3_context *ctx = (sha3_context *)priv;
        -:  239:
        -:  240:	SHA3_TRACE("called with %d bytes in the buffer", ctx->byteIndex);
        -:  241:
        -:  242:	/* Append 2-bit suffix 01, per SHA-3 spec. Instead of 1 for padding we
        -:  243:	 * use 1<<2 below. The 0x02 below corresponds to the suffix 01.
        -:  244:	 * Overall, we feed 0, then 1, and finally 1 to start padding. Without
        -:  245:	 * M || 01, we would simply use 1 to start padding. */
        -:  246:
        -:  247:	u64 t;
        -:  248:
       11:  249:	if (ctx->capacityWords & SHA3_USE_KECCAK_FLAG) {
        -:  250:		/* Keccak version */
    #####:  251:		t = (u64)(((u64)1) << (ctx->byteIndex * 8));
        -:  252:	} else {
        -:  253:		/* SHA3 version */
       11:  254:		t = (u64)(((u64)(0x02 | (1 << 2))) << ((ctx->byteIndex) * 8));
        -:  255:	}
        -:  256:
       11:  257:	ctx->u.s[ctx->wordIndex] ^= ctx->saved ^ t;
        -:  258:
       11:  259:	ctx->u.s[SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords) - 1] ^=
        -:  260:		SHA3_CONST(0x8000000000000000UL);
       11:  261:	keccakf(ctx->u.s);
        -:  262:
        -:  263:	/* Return first bytes of the ctx->s. This conversion is not needed for
        -:  264:	 * little-endian platforms e.g. wrap with #if !defined(__BYTE_ORDER__)
        -:  265:	 * || !defined(__ORDER_LITTLE_ENDIAN__) || __BYTE_ORDER__!=__ORDER_LITTLE_ENDIAN__
        -:  266:	 *    ... the conversion below ...
        -:  267:	 * #endif */
        -:  268:	{
        -:  269:		unsigned i;
      286:  270:		for (i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
      275:  271:			const unsigned t1 = (uint32_t)ctx->u.s[i];
      275:  272:			const unsigned t2 = (uint32_t)((ctx->u.s[i] >> 16) >> 16);
      275:  273:			ctx->u.sb[i * 8 + 0] = (uint8_t)(t1);
      275:  274:			ctx->u.sb[i * 8 + 1] = (uint8_t)(t1 >> 8);
      275:  275:			ctx->u.sb[i * 8 + 2] = (uint8_t)(t1 >> 16);
      275:  276:			ctx->u.sb[i * 8 + 3] = (uint8_t)(t1 >> 24);
      275:  277:			ctx->u.sb[i * 8 + 4] = (uint8_t)(t2);
      275:  278:			ctx->u.sb[i * 8 + 5] = (uint8_t)(t2 >> 8);
      275:  279:			ctx->u.sb[i * 8 + 6] = (uint8_t)(t2 >> 16);
      275:  280:			ctx->u.sb[i * 8 + 7] = (uint8_t)(t2 >> 24);
        -:  281:		}
        -:  282:	}
        -:  283:
        -:  284:	SHA3_TRACE_BUF("Hash: (first 32 bytes)", ctx->u.sb, 256 / 8);
        -:  285:
       11:  286:	return (ctx->u.sb);
        -:  287:}
        -:  288:
    #####:  289:sha3_return_t sha3_HashBuffer(unsigned bitSize, enum SHA3_FLAGS flags, const void *in,
        -:  290:							  unsigned inBytes, void *out, unsigned outBytes) {
        -:  291:	sha3_return_t err;
        -:  292:	sha3_context c;
        -:  293:
    #####:  294:	err = sha3_Init(&c, bitSize);
    #####:  295:	if (err != SHA3_RETURN_OK)
    #####:  296:		return err;
    #####:  297:	if (sha3_SetFlags(&c, flags) != flags) {
    #####:  298:		return SHA3_RETURN_BAD_PARAMS;
        -:  299:	}
    #####:  300:	sha3_Update(&c, in, inBytes);
    #####:  301:	const void *h = sha3_Finalize(&c);
        -:  302:
    #####:  303:	if (outBytes > bitSize / 8)
    #####:  304:		outBytes = bitSize / 8;
    #####:  305:	memcpy(out, h, outBytes);
    #####:  306:	return SHA3_RETURN_OK;
        -:  307:}
