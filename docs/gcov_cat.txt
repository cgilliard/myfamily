        -:    0:Source:alloc.c
        -:    0:Graph:alloc.gcno
        -:    0:Data:alloc.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/osdef.h>
        -:   18:#include <base/print_util.h>
        -:   19:
        -:   20:_Thread_local ResourceStats THREAD_LOCAL_RESOURCE_STATS = {0, 0, 0, 0, 0};
        -:   21:
        2:   22:unsigned int page_aligned_size(unsigned int size) {
        2:   23:	size_t slabs_page_size = getpagesize();
        2:   24:	size_t aligned_size =
        2:   25:		((size_t)size + slabs_page_size - 1) & ~(slabs_page_size - 1);
        2:   26:	if (aligned_size >= UINT32_MAX) {
    #####:   27:		SetErr(Overflow);
    #####:   28:		return UINT32_MAX;
        -:   29:	}
        2:   30:	return aligned_size;
        -:   31:}
        -:   32:
        1:   33:Alloc alloc(unsigned int size) {
        1:   34:	unsigned int aligned_size = page_aligned_size(size);
        1:   35:	if (aligned_size >= UINT32_MAX) {
    #####:   36:		SetErr(Overflow);
    #####:   37:		Alloc ret = {};
    #####:   38:		return ret;
        -:   39:	}
        1:   40:	void *ret = mmap(NULL, aligned_size, PROT_READ | PROT_WRITE,
        -:   41:					 MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
        1:   42:	if (ret) {
        1:   43:		THREAD_LOCAL_RESOURCE_STATS.alloc_sum += 1;
        -:   44:	} else {
    #####:   45:		SetErr(AllocErr);
        -:   46:	}
        -:   47:
        1:   48:	Alloc aret = {.ptr = ret, .size = aligned_size};
        1:   49:	return aret;
        -:   50:}
        -:   51:
        1:   52:void release(Alloc ptr) {
        -:   53:	int code;
        1:   54:	if ((code = munmap(ptr.ptr, ptr.size))) {
    #####:   55:		panic("munmap error = %i\n", code);
        -:   56:	}
        1:   57:	THREAD_LOCAL_RESOURCE_STATS.release_sum += 1;
        1:   58:}
        -:   59:
       10:   60:int64 alloc_sum() {
       10:   61:	return THREAD_LOCAL_RESOURCE_STATS.alloc_sum;
        -:   62:}
    #####:   63:int64 resize_sum() {
    #####:   64:	return THREAD_LOCAL_RESOURCE_STATS.resize_sum;
        -:   65:}
       10:   66:int64 release_sum() {
       10:   67:	return THREAD_LOCAL_RESOURCE_STATS.release_sum;
        -:   68:}
        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/osdef.h>
        -:   17:
    #####:   18:byte *get_dimmed() {
    #####:   19:	if (getenv("NO_COLOR") != NULL) {
    #####:   20:		return "";
        -:   21:	} else {
    #####:   22:		return "\x1b[2m";
        -:   23:	}
        -:   24:}
        -:   25:
    #####:   26:byte *get_red() {
    #####:   27:	if (getenv("NO_COLOR") != NULL) {
    #####:   28:		return "";
        -:   29:	} else {
    #####:   30:		return "\x1b[31m";
        -:   31:	}
        -:   32:}
        -:   33:
    #####:   34:byte *get_bright_red() {
    #####:   35:	if (getenv("NO_COLOR") != NULL) {
    #####:   36:		return "";
        -:   37:	} else {
    #####:   38:		return "\x1b[91m";
        -:   39:	}
        -:   40:}
        -:   41:
        2:   42:byte *get_green() {
        2:   43:	if (getenv("NO_COLOR") != NULL) {
    #####:   44:		return "";
        -:   45:	} else {
        2:   46:		return "\x1b[32m";
        -:   47:	}
        -:   48:}
        -:   49:
    #####:   50:byte *get_yellow() {
    #####:   51:	if (getenv("NO_COLOR") != NULL) {
    #####:   52:		return "";
        -:   53:	} else {
    #####:   54:		return "\x1b[33m";
        -:   55:	}
        -:   56:}
        -:   57:
    #####:   58:byte *get_cyan() {
    #####:   59:	if (getenv("NO_COLOR") != NULL) {
    #####:   60:		return "";
        -:   61:	} else {
    #####:   62:		return "\x1b[36m";
        -:   63:	}
        -:   64:}
        -:   65:
    #####:   66:byte *get_magenta() {
    #####:   67:	if (getenv("NO_COLOR") != NULL) {
    #####:   68:		return "";
        -:   69:	} else {
    #####:   70:		return "\x1b[35m";
        -:   71:	}
        -:   72:}
        -:   73:
        2:   74:byte *get_blue() {
        2:   75:	if (getenv("NO_COLOR") != NULL) {
    #####:   76:		return "";
        -:   77:	} else {
        2:   78:		return "\x1b[34m";
        -:   79:	}
        -:   80:}
        -:   81:
        4:   82:byte *get_reset() {
        4:   83:	if (getenv("NO_COLOR") != NULL) {
    #####:   84:		return "";
        -:   85:	} else {
        4:   86:		return "\x1b[0m";
        -:   87:	}
        -:   88:}
        -:    0:Source:fam_err.c
        -:    0:Graph:fam_err.gcno
        -:    0:Data:fam_err.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:// #include <base/macro_util.h>
        -:   17:// #include <base/os.h>
        -:   18://  #include <base/print_util.h>
        -:   19://  #include <base/string.h>
        -:   20:
        -:   21:_Thread_local byte fam_err_last[ERR_LEN + 1] = {""};
        -:   22:
        -:   23:_Thread_local int64 fam_err = NoErrors;
        -:   24://_Thread_local Backtrace thread_local_bt__;
        -:   25:
    #####:   26:const byte *get_err() {
        -:   27:	// return strncpy(fam_err_last, FamErrText[fam_err], ERR_LEN);
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
    #####:   31:void print_err(const byte *text) {
        -:   32:	// println("{}: {}", FamErrText[fam_err], text);
        -:   33:	// backtrace_print(&thread_local_bt__);
    #####:   34:}
        -:   35:
        -:   36:// void do_backtrace_generate(Backtrace *bt) {
        -:   37:// if (env("CBACKTRACE") != NULL) {
        -:   38://  backtrace_generate(bt);
        -:   39://	}
        -:   40://}
        -:    0:Source:lock.c
        -:    0:Graph:lock.gcno
        -:    0:Data:lock.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/lock.h>
        -:   16:#include <base/macros.h>
        -:   17:#include <base/print_util.h>
        -:   18:
        -:   19:_Thread_local bool _lock_is_write__ = false;
        -:   20:
    #####:   21:Lock lock_create() {
    #####:   22:	return 0;
        -:   23:}
        2:   24:void lock_read(Lock *lock) {
        2:   25:	_lock_is_write__ = false;
        -:   26:	unsigned long long state;
        -:   27:	unsigned long long state_update;
        -:   28:	do {
        -:   29:		// get current state set the write_pending bit to false
        2:   30:		state = ALOAD(lock) & ~0x80000000ULL;
        -:   31:		// increment the read counter and add 1 to the sequence number (upper 32
        -:   32:		// bits)
        2:   33:		state_update = (state + 0x100000000ULL) + 1ULL;
        -:   34:		// while our target state (no change including sequence number and
        -:   35:		// write_pending != false, we spin)
        2:   36:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   37:}
        2:   38:void lock_write(Lock *lock) {
        2:   39:	_lock_is_write__ = true;
        -:   40:	unsigned long long state;
        -:   41:	unsigned long long state_update;
        -:   42:
        -:   43:	// first step, set write bit true indicating a writer is waiting
        -:   44:	// this lock should be obtained soon after the previous writer
        -:   45:	// is complete indicating to readers our desire to write
        -:   46:	// this avoids write starvation
        -:   47:	do {
        2:   48:		state = ALOAD(lock) & ~0x80000000ULL;
        2:   49:		state_update = (state + 0x100000000ULL) | 0x80000000ULL;
        2:   50:	} while (!CAS(lock, &state, state_update));
        -:   51:
        -:   52:	// second step, obtain total lock before proceeding
        -:   53:	do {
        -:   54:		// get current state. We will wait for the read count to go to 0.
        2:   55:		state = ALOAD(lock) & 0xFFFFFFFF80000000ULL;
        -:   56:		// set the updated value to set the write bit true and read count to 0,
        -:   57:		// increment the sequence number
        2:   58:		state_update = (state + 0x100000000ULL) & 0xFFFFFFFF80000000ULL;
        2:   59:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   60:}
        -:   61:
        4:   62:void lock_unlock(Lock *lock) {
        -:   63:	unsigned long long state;
        -:   64:	unsigned long long state_update;
        -:   65:	// check thread local write variable
        4:   66:	if (_lock_is_write__) {
        -:   67:		// writer
        -:   68:		do {
        -:   69:			// get current state
        2:   70:			state = ALOAD(lock);
        -:   71:			// unset the write bit and increment the sequence number
        2:   72:			state_update = (state + 0x100000000ULL) & ~0x80000000ULL;
        2:   73:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   74:	} else {
        -:   75:		// reader
        -:   76:		do {
        -:   77:			// get current state
        2:   78:			state = ALOAD(lock);
       2*:   79:			if ((state & 0x7FFFFFFF) == 0) panic("underflow!");
        -:   80:			// subtract 1 from the read count and increment the sequence number
        2:   81:			state_update = (state + 0x100000000ULL) - 1ULL;
        2:   82:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   83:	}
        4:   84:}
        -:   85:
        2:   86:void lock_guard_cleanup(LockGuard *l) {
        2:   87:	lock_unlock(l);
        2:   88:}
        -:   89:
        1:   90:LockGuard lock_guard_read(Lock l) {
        1:   91:	lock_read(&l);
        1:   92:	return l;
        -:   93:}
        1:   94:LockGuard lock_guard_write(Lock l) {
        1:   95:	lock_write(&l);
        1:   96:	return l;
        -:   97:}
        -:    0:Source:memmap.c
        -:    0:Graph:memmap.gcno
        -:    0:Data:memmap.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/memmap.h>
        -:   17:#include <base/osdef.h>
        -:   18:#include <base/print_util.h>
        -:   19:
        -:   20:#define MEMMAP_ENTRY_PER_LEVEL 256
        -:   21:#define BITMAP_SIZE 32
        -:   22:#define MEMMAP_SHIFT 8
        -:   23:
        -:   24:_Thread_local int last_i = 0, last_j = 0, last_k = 0, last_l = 0;
        -:   25:
        -:   26:typedef struct MemMapImpl {
        -:   27:	byte ****data;
        -:   28:	unsigned int size;
        -:   29:} MemMapImpl;
        -:   30:
       14:   31:void __attribute__((constructor)) __memmap_check_sizes() {
        -:   32:	if (sizeof(MemMapImpl) != sizeof(MemMap))
        -:   33:		panic("sizeof(MemMapImpl) (%i) != sizeof(MemMap) (%i)",
        -:   34:			  sizeof(MemMapImpl), sizeof(MemMap));
       14:   35:}
        -:   36:
 12053890:   37:unsigned long long *memmap_itt_for(MemMapImpl *impl, int i, int j, int k,
        -:   38:								   int l) {
 12053890:   39:	bool mmapped = false;
 12053890:   40:	byte ****nullvalue1 = NULL;
 12053890:   41:	byte ****data1 = NULL;
        -:   42:	// load data
        -:   43:	do {
 12053890:   44:		if (mmapped) {
    #####:   45:			MUNMAP(data1, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        -:   46:		}
 12053890:   47:		data1 = ALOAD(&impl->data);
 12053890:   48:		if (data1 == NULL) {
        5:   49:			data1 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        5:   50:			if (data1 == NULL) {
    #####:   51:				SetErr(AllocErr);
    #####:   52:				return NULL;
        -:   53:			}
        5:   54:			mmapped = true;
        5:   55:			memset(data1, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        -:   56:		} else
 12053885:   57:			break;
        5:   58:	} while (!CAS(&impl->data, &nullvalue1, data1));
        -:   59:
        -:   60:	// load second level
 12053890:   61:	byte ***nullvalue2 = NULL;
        -:   62:	byte ***data2;
 12053890:   63:	mmapped = false;
        -:   64:	do {
 12053890:   65:		if (mmapped) {
    #####:   66:			MUNMAP(data2, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        -:   67:		}
 12053890:   68:		data2 = ALOAD(&impl->data[i]);
 12053890:   69:		if (data2 == NULL) {
        5:   70:			data2 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        5:   71:			if (data2 == NULL) {
    #####:   72:				SetErr(AllocErr);
    #####:   73:				return NULL;
        -:   74:			}
        5:   75:			mmapped = true;
        5:   76:			memset(data2, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        -:   77:		} else
 12053885:   78:			break;
        5:   79:	} while (!CAS(&impl->data[i], &nullvalue2, data2));
        -:   80:
        -:   81:	// load third level
 12053890:   82:	byte **nullvalue3 = NULL;
        -:   83:	byte **data3;
 12053890:   84:	mmapped = false;
        -:   85:	do {
 12053890:   86:		if (mmapped) {
    #####:   87:			MUNMAP(data3, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:   88:		}
 12053890:   89:		data3 = ALOAD(&impl->data[i][j]);
 12053890:   90:		if (data3 == NULL) {
        5:   91:			data3 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        5:   92:			if (data3 == NULL) {
    #####:   93:				SetErr(AllocErr);
    #####:   94:				return NULL;
        -:   95:			}
        5:   96:			mmapped = true;
        5:   97:			memset(data3, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:   98:		} else
 12053885:   99:			break;
        5:  100:	} while (!CAS(&impl->data[i][j], &nullvalue3, data3));
        -:  101:
        -:  102:	// load fourth and final level
 12053890:  103:	byte *nullvalue4 = NULL;
        -:  104:	byte *data4;
 12053890:  105:	mmapped = false;
        -:  106:	// add 32 bytes for the bitmap
        -:  107:	do {
 12053890:  108:		if (mmapped) {
    #####:  109:			MUNMAP(data4, MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  110:							  BITMAP_SIZE);
        -:  111:		}
 12053890:  112:		data4 = ALOAD(&impl->data[i][j][k]);
 12053890:  113:		if (data4 == NULL) {
      211:  114:			data4 = MMAP(MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  115:						 BITMAP_SIZE);
      211:  116:			if (data4 == NULL) {
    #####:  117:				SetErr(AllocErr);
    #####:  118:				return NULL;
        -:  119:			}
      211:  120:			mmapped = true;
      211:  121:			memset(data4, '\0',
      211:  122:				   MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  123:					   BITMAP_SIZE);
        -:  124:			// set Ptr=0 to allocated so we never return null / also reserve the
        -:  125:			// first value for other purposes
      211:  126:			if (i == 0 && j == 0 && k == 0) data4[0] = 0x3;
        -:  127:		} else
 12053679:  128:			break;
      211:  129:	} while (!CAS(&impl->data[i][j][k], &nullvalue4, data4));
        -:  130:
        -:  131:	// return the lth item at the begining of the data array (32 bytes reserved)
        -:  132:	// l is between 0-3.
 12053890:  133:	unsigned long long *ret = ((unsigned long long *)impl->data[i][j][k]) + l;
 12053890:  134:	return ret;
        -:  135:}
        -:  136:
210071249:  137:void *memmap_data(const MemMap *mm, Ptr ptr) {
210071249:  138:	const MemMapImpl *impl = (const MemMapImpl *)mm;
210071249:  139:	byte *block = impl->data[ptr >> (MEMMAP_SHIFT * 3)]
210071249:  140:							[(ptr >> (MEMMAP_SHIFT * 2)) & 0xFF]
210071249:  141:							[(ptr >> (MEMMAP_SHIFT)) & 0xFF];
210071249:  142:	return (byte *)(block + ((ptr & 0xFF) * impl->size + 32));
        -:  143:}
        5:  144:int memmap_init(MemMap *mm, unsigned int size) {
        5:  145:	MemMapImpl *impl = (MemMapImpl *)mm;
        5:  146:	impl->size = size;
        5:  147:	impl->data = NULL;
        5:  148:	return 0;
        -:  149:}
        -:  150:
 12053017:  151:Ptr memmap_allocate(MemMap *mm) {
 12053017:  152:	Ptr ret = null;
 12053017:  153:	MemMapImpl *impl = (MemMapImpl *)mm;
 12053017:  154:	int i = last_i, j = last_j, k = last_k, l = last_l;
        -:  155:	unsigned long long *current, desired, v;
        -:  156:
        -:  157:	do {
        -:  158:		loop {
        -:  159:			// load section of bitmap
 12053890:  160:			current = memmap_itt_for(impl, i, j, k, l);
12053890*:  161:			if (current == NULL) return null;
 12053890:  162:			v = ALOAD(current);
 12053890:  163:			if (v != ((unsigned long long)0) - 1) break;
        -:  164:			// l is 4 because 64 bits are used in the atomic load
        -:  165:			// the other 4 combinations cover all 256 entries
      873:  166:			if (++l >= 4) {
      217:  167:				l = 0;
      217:  168:				if (++k >= MEMMAP_ENTRY_PER_LEVEL) {
    #####:  169:					k = 0;
    #####:  170:					if (++j >= MEMMAP_ENTRY_PER_LEVEL) {
    #####:  171:						j = 0;
    #####:  172:						i++;
    #####:  173:						if (i == last_i) {
    #####:  174:							SetErr(CapacityExceeded);
    #####:  175:							return null;
        -:  176:						}
        -:  177:					}
        -:  178:				}
        -:  179:			}
        -:  180:		}
        -:  181:
        -:  182:		// find open bit
        -:  183:		int x;
 55722237:  184:		for (x = 0; (v & (0x1ULL << x)) != 0; x++);
 12053017:  185:		ret = (i << (MEMMAP_SHIFT * 3)) | (j << (2 * MEMMAP_SHIFT)) |
 12053017:  186:			  (k << MEMMAP_SHIFT) | (l << 6) | x;
        -:  187:		// set bit
 12053017:  188:		desired = v | (0x1ULL << x);
 12053017:  189:	} while (!CAS(current, &v, desired));
        -:  190:
 12053017:  191:	last_i = i;
 12053017:  192:	last_j = j;
 12053017:  193:	last_k = k;
 12053017:  194:	last_l = l;
        -:  195:
 12053017:  196:	return ret;
        -:  197:}
        -:  198:
 12050016:  199:void memmap_free(MemMap *mm, Ptr ptr) {
12050016*:  200:	if (ptr == null) panic("attempt to free null!");
12050016*:  201:	if (ptr == ptr_reserved) panic("attempt to free a reserved ptr = 1");
12050016*:  202:	if (mm == NULL) panic("invalid (null) memmap");
 12050016:  203:	MemMapImpl *impl = (MemMapImpl *)mm;
        -:  204:	unsigned long long nv, *v, vo;
        -:  205:	int i, j, k, l;
        -:  206:
 12050016:  207:	i = (ptr >> (MEMMAP_SHIFT * 3)) & 0xFF;
 12050016:  208:	j = (ptr >> (MEMMAP_SHIFT * 2)) & 0xFF;
 12050016:  209:	k = (ptr >> (MEMMAP_SHIFT)) & 0xFF;
 12050016:  210:	l = (ptr >> 6) & 0x3;
        -:  211:
        -:  212:	do {
 12050016:  213:		v = (unsigned long long *)impl->data[i][j][k] + l;
 12050016:  214:		vo = ALOAD((unsigned long long *)(v));
12050016*:  215:		if ((vo & (0x1ULL << (ptr & 0x3F))) == 0) panic("double free attempt!");
 12050016:  216:		nv = vo & ~(0x1ULL << (ptr & 0x3F));
 12050016:  217:	} while (!CAS(&*v, &vo, nv));
        -:  218:
 12050016:  219:	last_i = i;
 12050016:  220:	last_j = j;
 12050016:  221:	last_k = k;
 12050016:  222:	last_l = 0;
 12050016:  223:}
        -:  224:
        5:  225:void memmap_cleanup(MemMap *mm) {
        5:  226:	MemMapImpl *impl = (MemMapImpl *)mm;
       5*:  227:	if (impl->data == NULL) return;
       10:  228:	for (int i = 0; impl->data[i] && i < MEMMAP_ENTRY_PER_LEVEL; i++) {
       10:  229:		for (int j = 0; impl->data[i][j] && j < MEMMAP_ENTRY_PER_LEVEL; j++) {
      216:  230:			for (int k = 0; impl->data[i][j][k] && k < MEMMAP_ENTRY_PER_LEVEL;
      211:  231:				 k++) {
      211:  232:				MUNMAP(impl->data[i][j][k],
        -:  233:					   MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  234:						   BITMAP_SIZE);
      211:  235:				impl->data[i][j][k] = NULL;
        -:  236:			}
        5:  237:			MUNMAP(impl->data[i][j], MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  238:		}
        5:  239:		MUNMAP(impl->data[i], MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  240:	}
        5:  241:	MUNMAP(impl->data, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  242:}
        -:    0:Source:orbtree.c
        -:    0:Graph:orbtree.gcno
        -:    0:Data:orbtree.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/orbtree.h>
        -:   16:
    #####:   17:OrbTree orbtree_create(int (*search)(const OrbTreeNode *root, const void *value,
        -:   18:									 OrbTreeNodePair *retval)) {
    #####:   19:	return NULL;
        -:   20:}
        -:   21:
    #####:   22:OrbTreeNode *orbtree_get(const OrbTree *ptr, const void *value) {
    #####:   23:	return NULL;
        -:   24:}
    #####:   25:OrbTreeNode *orbtree_put(OrbTree *ptr, OrbTreeNode *value) {
    #####:   26:	return NULL;
        -:   27:}
        -:   28:
    #####:   29:OrbTreeNode *orbtree_remove(const OrbTree *ptr, const void *value) {
    #####:   30:	return NULL;
        -:   31:}
        -:    0:Source:print_util.c
        -:    0:Graph:print_util.gcno
        -:    0:Data:print_util.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:
        -:   18:// currently using stdio, will move to write
        -:   19:#include <stdio.h>
        -:   20:
    #####:   21:void __attribute__((no_return)) panic(const char *fmt, ...) {
        -:   22:	char buf[1024];
        -:   23:	__builtin_va_list args;
    #####:   24:	print("Panic: ");
    #####:   25:	__builtin_va_start(args, fmt);
    #####:   26:	vfprintf(stderr, fmt, args);
        -:   27:	// vsnprintf(buf, 1024, fmt, args);
    #####:   28:	__builtin_va_end(args);
    #####:   29:	fprintf(stderr, "\n");
        -:   30:
    #####:   31:	exit(-1);
        -:   32:}
        -:   33:
        2:   34:int println(const char *fmt, ...) {
        -:   35:	__builtin_va_list args;
        2:   36:	__builtin_va_start(args, fmt);
        2:   37:	vfprintf(stderr, fmt, args);
        2:   38:	__builtin_va_end(args);
        2:   39:	fprintf(stderr, "\n");
        2:   40:	return 0;
        -:   41:}
        -:   42:
    #####:   43:int print(const char *fmt, ...) {
        -:   44:	__builtin_va_list args;
    #####:   45:	__builtin_va_start(args, fmt);
    #####:   46:	vfprintf(stderr, fmt, args);
    #####:   47:	__builtin_va_end(args);
    #####:   48:	return 0;
        -:   49:}
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/lock.h>
        -:   18:#include <base/macros.h>
        -:   19:#include <base/osdef.h>
        -:   20:#include <base/print_util.h>
        -:   21:#include <base/slabs.h>
        -:   22:
        -:   23:static Ptr RESERVED_PTR = 1;
        -:   24:
        -:   25:typedef struct SlabList {
        -:   26:	Ptr next;
        -:   27:	byte data[];
        -:   28:} SlabList;
        -:   29:
        -:   30:typedef struct SlabAllocatorImpl {
        -:   31:	MemMap mm;
        -:   32:	unsigned int slab_size;
        -:   33:	unsigned int max_free_slabs;
        -:   34:	unsigned int max_total_slabs;
        -:   35:	unsigned int free_size;
        -:   36:	unsigned int total_slabs;
        -:   37:	Ptr head;
        -:   38:	Ptr tail;
        -:   39:} SlabAllocatorImpl;
        -:   40:
       14:   41:void __attribute__((constructor)) __slabs_check_sizes() {
        -:   42:	if (sizeof(SlabAllocatorImpl) != sizeof(SlabAllocator))
        -:   43:		panic("sizeof(SlabAllocatorImpl) (%i) != sizeof(SlabAllocator) (%i)",
        -:   44:			  sizeof(SlabAllocatorImpl), sizeof(SlabAllocator));
       14:   45:}
        -:   46:
   100010:   47:byte *slab_get(SlabAllocator *sa, Ptr ptr) {
   100010:   48:	if (sa == NULL || nil(ptr)) {
    #####:   49:		SetErr(IllegalArgument);
    #####:   50:		return NULL;
        -:   51:	}
   100010:   52:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
   100010:   53:	SlabList *sl = memmap_data(&impl->mm, ptr);
   100010:   54:	if (sl == NULL) {
    #####:   55:		SetErr(IllegalState);
    #####:   56:		return NULL;
        -:   57:	}
   100010:   58:	return sl->data;
        -:   59:}
        -:   60:
    50013:   61:Ptr slab_allocator_grow(SlabAllocatorImpl *impl) {
    50013:   62:	if (AADD(&impl->total_slabs, 1) > impl->max_total_slabs) {
    #####:   63:		ASUB(&impl->total_slabs, 1);
    #####:   64:		SetErr(CapacityExceeded);
    #####:   65:		return null;
        -:   66:	}
    50013:   67:	Ptr ret = memmap_allocate(&impl->mm);
   50013*:   68:	if (nil(ret)) return null;
    50013:   69:	SlabList *sl = memmap_data(&impl->mm, ret);
   50013*:   70:	if (sl == NULL) return null;
    50013:   71:	sl->next = ptr_reserved;
        -:   72:
    50013:   73:	return ret;
        -:   74:}
        -:   75:
        3:   76:int slab_allocator_init(SlabAllocator *sa, unsigned int slab_size,
        -:   77:						unsigned long long max_free_slabs,
        -:   78:						unsigned long long max_total_slabs) {
        3:   79:	if (sa == NULL || slab_size == 0 || max_free_slabs < 5 ||
        -:   80:		max_total_slabs < 5) {
    #####:   81:		SetErr(IllegalArgument);
    #####:   82:		return -1;
        -:   83:	}
        3:   84:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:   85:
       3*:   86:	if (memmap_init(&impl->mm, slab_size + sizeof(SlabList))) return -1;
        3:   87:	ASTORE(&impl->free_size, 1);
        3:   88:	ASTORE(&impl->total_slabs, 0);
        3:   89:	impl->slab_size = slab_size;
        3:   90:	impl->max_free_slabs = max_free_slabs;
        3:   91:	impl->max_total_slabs = max_total_slabs;
        -:   92:
        3:   93:	Ptr ptr = slab_allocator_grow(impl);
        3:   94:	if (ptr == null) {
    #####:   95:		return -1;
        -:   96:	}
        -:   97:
        3:   98:	SlabList *sl = memmap_data(&impl->mm, ptr);
        3:   99:	if (sl == NULL) {
    #####:  100:		SetErr(IllegalState);
    #####:  101:		return -1;
        -:  102:	}
        3:  103:	sl->next = null;
        3:  104:	impl->head = impl->tail = ptr;
        -:  105:
        3:  106:	return 0;
        -:  107:}
        -:  108:
        3:  109:void slab_allocator_cleanup(SlabAllocator *sa) {
       3*:  110:	if (sa == NULL) panic("slab_allocator_cleanup with sa = NULL!");
        -:  111:
        3:  112:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        3:  113:	Ptr itt = impl->head;
    50016:  114:	while (itt) {
    50013:  115:		Ptr to_delete = itt;
    50013:  116:		SlabList *sl = memmap_data(&impl->mm, itt);
   50013*:  117:		if (sl == NULL) panic("slab_allocator_cleanup: memmap_data ret NULL!");
    50013:  118:		itt = sl->next;
    50013:  119:		memmap_free(&impl->mm, to_delete);
        -:  120:	}
        -:  121:
        3:  122:	memmap_cleanup(&impl->mm);
        3:  123:}
        -:  124:
 52478805:  125:Ptr slab_allocator_allocate(SlabAllocator *sa) {
 52478805:  126:	if (sa == NULL) {
    #####:  127:		SetErr(IllegalArgument);
    #####:  128:		return null;
        -:  129:	}
 52478805:  130:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:  131:	Ptr head, tail, next, ret;
    #####:  132:	loop {
 52478805:  133:		head = impl->head;
 52478805:  134:		tail = impl->tail;
 52478805:  135:		SlabList *sl = memmap_data(&impl->mm, head);
 52478805:  136:		if (sl == NULL) {
    #####:  137:			SetErr(IllegalState);
    #####:  138:			return null;
        -:  139:		}
 52478805:  140:		next = sl->next;
 52478805:  141:		if (head == impl->head) {
 52478805:  142:			if (head == tail) {
    50010:  143:				if (next == null) {
    50010:  144:					return slab_allocator_grow(impl);
        -:  145:				}
    #####:  146:				CAS_SEQ(&impl->tail, &tail, next);
        -:  147:			} else {
 52428795:  148:				ret = head;
 52428795:  149:				if (CAS_SEQ(&impl->head, &head, next)) break;
        -:  150:			}
        -:  151:		}
        -:  152:	}
        -:  153:
 52428795:  154:	ASUB(&impl->free_size, 1);
 52428795:  155:	SlabList *sl = memmap_data(&impl->mm, ret);
 52428795:  156:	if (sl == NULL) {
    #####:  157:		SetErr(IllegalState);
    #####:  158:		return null;
        -:  159:	}
 52428795:  160:	sl->next = ptr_reserved;
 52428795:  161:	return ret;
        -:  162:}
 52478805:  163:void slab_allocator_free(SlabAllocator *sa, Ptr ptr) {
52478805*:  164:	if (sa == NULL) panic("slab_allocator_free with sa = NULL!");
 52478805:  165:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:  166:
 52478805:  167:	SlabList *slptr = memmap_data(&impl->mm, ptr);
52478805*:  168:	if (slptr == NULL) panic("cannot retrieve data for a freed ptr!");
        -:  169:
 52478805:  170:	if (!CAS(&slptr->next, &RESERVED_PTR, null))
    #####:  171:		panic("Double free attempt! ptr=%u", ptr);
 52478805:  172:	if (AADD(&impl->free_size, 1) > impl->max_free_slabs) {
    #####:  173:		memmap_free(&impl->mm, ptr);
    #####:  174:		ASUB(&impl->total_slabs, 1);
    #####:  175:		return;
        -:  176:	}
        -:  177:
        -:  178:	Ptr tail, next;
        -:  179:
    #####:  180:	loop {
 52478805:  181:		tail = impl->tail;
 52478805:  182:		SlabList *sltail = memmap_data(&impl->mm, tail);
52478805*:  183:		if (sltail == NULL) panic("cannot retrieve data for tail!");
 52478805:  184:		next = sltail->next;
 52478805:  185:		if (tail == impl->tail) {
 52478805:  186:			if (next == null) {
 52478805:  187:				if (CAS_SEQ(&sltail->next, &next, ptr)) {
 52478805:  188:					CAS_SEQ(&impl->tail, &tail, ptr);
 52478805:  189:					break;
        -:  190:				}
        -:  191:			} else {
    #####:  192:				CAS_SEQ(&impl->tail, &tail, next);
        -:  193:			}
        -:  194:		}
        -:  195:	}
        -:  196:}
        -:  197:
        -:  198:#ifdef TEST
    #####:  199:unsigned long long slab_allocator_free_size(SlabAllocator *sa) {
    #####:  200:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
    #####:  201:	return ALOAD(&impl->free_size);
        -:  202:}
        -:  203:
    #####:  204:unsigned long long slab_allocator_total_slabs(SlabAllocator *sa) {
    #####:  205:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
    #####:  206:	return ALOAD(&impl->total_slabs);
        -:  207:}
        -:  208:#endif	// TEST
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:14
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/types.h>
        -:   18:
       14:   19:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   20:#if !defined(__x86_64__) && !defined(_M_X64) && !defined(__aarch64__)
        -:   21:	panic("Supported architectures: __x86_64__, _M_X64, and __aarch64__");
        -:   22:#endif	// arch
        -:   23:
        -:   24:	// check size_t
        -:   25:	if (__SIZEOF_SIZE_T__ != 8) panic("size_t must be 8 bytes. Invalid arch!");
        -:   26:	// check primitive types
        -:   27:	if (sizeof(byte) != 1) panic("byte must be 1 byte. Invalid arch!");
        -:   28:
        -:   29:	if (sizeof(int64) != 8) panic("must be 8 bytes. Invalid arch!");
        -:   30:
        -:   31:	if (sizeof(int) != 4) panic("int must be 4 bytes. Invalid arch!");
        -:   32:
        -:   33:	if (sizeof(float64) != 8) panic("float64 must be 8 bytes. Invalid arch!");
        -:   34:
        -:   35:	if (sizeof(bool) != 1) panic("bool must be 1 byte. Invalid arch!");
        -:   36:
        -:   37:	// little endian check
       14:   38:	int test = 0x1;
       14:   39:	if (*(byte *)&test != 0x1) {
    #####:   40:		panic("Big endian is not supported!");
        -:   41:	}
       14:   42:}
        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:3
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <main/main.h>
        -:   16:
    #####:   17:int real_main(int argc, char **argv) {
    #####:   18:	return 0;
        -:   19:}
