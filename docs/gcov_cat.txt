        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/os.h>
        -:   17:
    #####:   18:byte *get_dimmed() {
    #####:   19:	if (env("NO_COLOR") != NULL) {
    #####:   20:		return "";
        -:   21:	} else {
    #####:   22:		return "\x1b[2m";
        -:   23:	}
        -:   24:}
        -:   25:
    #####:   26:byte *get_red() {
    #####:   27:	if (env("NO_COLOR") != NULL) {
    #####:   28:		return "";
        -:   29:	} else {
    #####:   30:		return "\x1b[31m";
        -:   31:	}
        -:   32:}
        -:   33:
    #####:   34:byte *get_bright_red() {
    #####:   35:	if (env("NO_COLOR") != NULL) {
    #####:   36:		return "";
        -:   37:	} else {
    #####:   38:		return "\x1b[91m";
        -:   39:	}
        -:   40:}
        -:   41:
    #####:   42:byte *get_green() {
    #####:   43:	if (env("NO_COLOR") != NULL) {
    #####:   44:		return "";
        -:   45:	} else {
    #####:   46:		return "\x1b[32m";
        -:   47:	}
        -:   48:}
        -:   49:
    #####:   50:byte *get_yellow() {
    #####:   51:	if (env("NO_COLOR") != NULL) {
    #####:   52:		return "";
        -:   53:	} else {
    #####:   54:		return "\x1b[33m";
        -:   55:	}
        -:   56:}
        -:   57:
    #####:   58:byte *get_cyan() {
    #####:   59:	if (env("NO_COLOR") != NULL) {
    #####:   60:		return "";
        -:   61:	} else {
    #####:   62:		return "\x1b[36m";
        -:   63:	}
        -:   64:}
        -:   65:
    #####:   66:byte *get_magenta() {
    #####:   67:	if (env("NO_COLOR") != NULL) {
    #####:   68:		return "";
        -:   69:	} else {
    #####:   70:		return "\x1b[35m";
        -:   71:	}
        -:   72:}
        -:   73:
    #####:   74:byte *get_blue() {
    #####:   75:	if (env("NO_COLOR") != NULL) {
    #####:   76:		return "";
        -:   77:	} else {
    #####:   78:		return "\x1b[34m";
        -:   79:	}
        -:   80:}
        -:   81:
    #####:   82:byte *get_reset() {
    #####:   83:	if (env("NO_COLOR") != NULL) {
    #####:   84:		return "";
        -:   85:	} else {
    #####:   86:		return "\x1b[0m";
        -:   87:	}
        -:   88:}
        -:    0:Source:fam_alloc.c
        -:    0:Graph:fam_alloc.gcno
        -:    0:Data:fam_alloc.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/macros.h>
        -:   18:#include <base/osdef.h>
        -:   19:#include <base/print_util.h>
        -:   20:
        -:   21:_Thread_local SlabAllocator tl_slab_allocator = NULL;
        -:   22:SlabAllocator global_slab_allocator = NULL;
        -:   23:pthread_mutex_t global_allocator_lock;
        -:   24:
       10:   25:void __attribute__((constructor)) __init_pthread_lock() {
       10:   26:	pthread_mutex_init(&global_allocator_lock, NULL);
       10:   27:}
        -:   28:
        -:   29:// use highest byte in aux for flags
   400034:   30:void ptr_flag_set(Ptr ptr, byte flag, bool value) {
   400034:   31:	int64 *aux = ptr_aux(ptr);
   400034:   32:	if (value)
   200006:   33:		*aux |= (0x1ULL << (unsigned long long)flag) << 56;
        -:   34:	else
   200028:   35:		*aux &= ~((0x1ULL << (unsigned long long)flag) << 56);
   400034:   36:}
        -:   37:
   400035:   38:bool ptr_flag_check(Ptr ptr, byte flag) {
   400035:   39:	int64 *aux = ptr_aux(ptr);
   400035:   40:	return (*aux) & ((0x1ULL << (unsigned long long)flag) << 56);
        -:   41:}
        -:   42:
   200018:   43:int check_initialize_default_slab_allocator() {
   200018:   44:	if (tl_slab_allocator == NULL)
        3:   45:		tl_slab_allocator = slab_allocator_create();
   200018:   46:	if (global_slab_allocator == NULL) {
        3:   47:		pthread_mutex_lock(&global_allocator_lock);
        3:   48:		if (global_slab_allocator == NULL)
        3:   49:			global_slab_allocator = slab_allocator_create();
        3:   50:		pthread_mutex_unlock(&global_allocator_lock);
        -:   51:	}
  200018*:   52:	return tl_slab_allocator && global_slab_allocator;
        -:   53:}
        -:   54:
   200017:   55:Ptr fam_alloc(unsigned int size, bool send) {
        -:   56:	// this size is reserved for 'null'
   200017:   57:	if (size == UINT32_MAX) {
    #####:   58:		SetErr(Overflow);
    #####:   59:		return NULL;
        -:   60:	}
   200017:   61:	if (!check_initialize_default_slab_allocator())
    #####:   62:		return NULL;
        -:   63:	Ptr ret;
   200017:   64:	if (size > MAX_SLAB_SIZE)
    #####:   65:		ret = ptr_direct_alloc(size);
   200017:   66:	else if (send) {
   200006:   67:		pthread_mutex_lock(&global_allocator_lock);
   200006:   68:		ret = slab_allocator_allocate(global_slab_allocator, size);
   200006:   69:		pthread_mutex_unlock(&global_allocator_lock);
        -:   70:	} else
       11:   71:		ret = slab_allocator_allocate(tl_slab_allocator, size);
        -:   72:
   200017:   73:	if (ret) {
   200017:   74:		int64 *aux = ptr_aux(ret);
   200017:   75:		*aux = 0;
   200017:   76:		ptr_flag_set(ret, PTR_FLAGS_SEND, send);
   200017:   77:		ptr_flag_set(ret, PTR_FLAGS_DIRECT, size > MAX_SLAB_SIZE);
        -:   78:	}
        -:   79:
   200017:   80:	return ret;
        -:   81:}
        1:   82:Ptr fam_resize(Ptr ptr, unsigned int size) {
        1:   83:	if (!check_initialize_default_slab_allocator())
    #####:   84:		return NULL;
        -:   85:
        1:   86:	if (ptr == NULL) {
    #####:   87:		SetErr(IllegalArgument);
    #####:   88:		return NULL;
        -:   89:	}
        -:   90:
        1:   91:	bool send = ptr_flag_check(ptr, PTR_FLAGS_SEND);
        1:   92:	Ptr ret = fam_alloc(size, send);
        1:   93:	if (ret) {
        1:   94:		unsigned int len = $len(ptr);
        1:   95:		if (len > size)
    #####:   96:			len = size;
        1:   97:		memcpy($(ret), $(ptr), len);
        1:   98:		fam_release(&ptr);
        -:   99:	}
        -:  100:
        1:  101:	return ret;
        -:  102:}
        -:  103:
   200017:  104:void fam_release(Ptr *ptr) {
  200017*:  105:	if (nil(*ptr)) {
    #####:  106:		panic("fam_free on nil ptr!");
   200017:  107:	} else if (ptr_flag_check(*ptr, PTR_FLAGS_DIRECT)) {
    #####:  108:		ptr_direct_release(*ptr);
   200017:  109:	} else if (ptr_flag_check(*ptr, PTR_FLAGS_SEND)) {
   200006:  110:		pthread_mutex_lock(&global_allocator_lock);
   200006:  111:		slab_allocator_free(global_slab_allocator, *ptr);
   200006:  112:		pthread_mutex_unlock(&global_allocator_lock);
        -:  113:	} else
       11:  114:		slab_allocator_free(tl_slab_allocator, *ptr);
   200017:  115:}
        -:  116:
        7:  117:void fam_alloc_thread_local_cleanup() {
        7:  118:	slab_allocator_cleanup(&tl_slab_allocator);
        7:  119:}
        -:  120:
        -:  121:#ifdef TEST
        7:  122:void fam_alloc_global_cleanup() {
        7:  123:	slab_allocator_cleanup(&global_slab_allocator);
        7:  124:}
        -:  125:
        7:  126:int64 fam_alloc_count_tl_slab_allocator() {
        7:  127:	if (tl_slab_allocator == NULL)
        4:  128:		return 0;
        3:  129:	return slab_allocator_cur_slabs_allocated(tl_slab_allocator);
        -:  130:}
        7:  131:int64 fam_alloc_count_global_allocator() {
        7:  132:	if (global_slab_allocator == NULL)
        4:  133:		return 0;
        3:  134:	return slab_allocator_cur_slabs_allocated(global_slab_allocator);
        -:  135:}
        -:  136:#endif // TEST
        -:    0:Source:fam_err.c
        -:    0:Graph:fam_err.gcno
        -:    0:Data:fam_err.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/macro_util.h>
        -:   17:#include <base/os.h>
        -:   18:// #include <base/print_util.h>
        -:   19:// #include <base/string.h>
        -:   20:
        -:   21:_Thread_local byte fam_err_last[ERR_LEN + 1] = {""};
        -:   22:
        -:   23:_Thread_local int64 fam_err = NoErrors;
        -:   24://_Thread_local Backtrace thread_local_bt__;
        -:   25:
    #####:   26:const byte *get_err() {
        -:   27:	// return strncpy(fam_err_last, FamErrText[fam_err], ERR_LEN);
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
    #####:   31:void print_err(const byte *text) {
        -:   32:	// println("{}: {}", FamErrText[fam_err], text);
        -:   33:	// backtrace_print(&thread_local_bt__);
    #####:   34:}
        -:   35:
        -:   36:// void do_backtrace_generate(Backtrace *bt) {
        -:   37:// if (env("CBACKTRACE") != NULL) {
        -:   38://  backtrace_generate(bt);
        -:   39://	}
        -:   40://}
        -:    0:Source:object.c
        -:    0:Graph:object.gcno
        -:    0:Data:object.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/object.h>
        -:   18:#include <base/osdef.h>
        -:   19:
        -:   20:#include <stdio.h>
        -:   21:
        -:   22:#define OBJECT_FLAG_FAM_ALLOC_RESERVED1 0
        -:   23:#define OBJECT_FLAG_FAM_ALLOC_RESERVED2 1
        -:   24:#define OBJECT_FLAG_TYPE0 2
        -:   25:#define OBJECT_FLAG_TYPE1 3
        -:   26:#define OBJECT_FLAG_TYPE2 4
        -:   27:
        -:   28:#define PTR_SIZE 16
        -:   29:
        5:   30:const void *object_box_value_of(const Object obj) {
       5*:   31:	if (nil(obj)) {
    #####:   32:		SetErr(ObjectConsumed);
    #####:   33:		return NULL;
        -:   34:	}
        5:   35:	return $(obj);
        -:   36:}
        -:   37:
   200013:   38:unsigned int object_get_size(ObjectType type) {
   200013:   39:	if (type == ObjectTypeInt)
   200005:   40:		return 0;
        8:   41:	else if (type == ObjectTypeByte)
        1:   42:		return 0;
        7:   43:	else if (type == ObjectTypeBool)
        2:   44:		return 0;
        5:   45:	else if (type == ObjectTypeFloat)
        1:   46:		return 0;
        4:   47:	else if (type == ObjectTypeWeak)
        1:   48:		return sizeof(int64);
        3:   49:	else if (type == ObjectTypeBox)
        3:   50:		return sizeof(int64);
        -:   51:
    #####:   52:	return -1;
        -:   53:}
        -:   54:
   600036:   55:void object_set_ptr_flag(Ptr ptr, unsigned long long flag, bool value) {
   600036:   56:	int64 *aux = ptr_aux(ptr);
   600036:   57:	if (value)
        9:   58:		*aux |= (0x1ULL << (unsigned long long)flag) << 56;
        -:   59:	else
   600027:   60:		*aux &= ~((0x1ULL << (unsigned long long)flag) << 56);
   600036:   61:}
        -:   62:
  2600259:   63:bool object_get_ptr_flag(Ptr ptr, unsigned long long flag) {
  2600259:   64:	int64 *aux = ptr_aux(ptr);
  2600259:   65:	return ((0x1ULL << (unsigned long long)flag) << 56) & *aux;
        -:   66:}
        -:   67:
   200012:   68:void object_set_ptr_type(Ptr ptr, ObjectType type) {
   200012:   69:	if (type == ObjectTypeWeak) {
        1:   70:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        1:   71:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
        1:   72:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
   200011:   73:	} else if (type == ObjectTypeBox) {
        2:   74:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        2:   75:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
        2:   76:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
   200009:   77:	} else if (type == ObjectTypeFloat) {
        1:   78:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
        1:   79:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
        1:   80:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
   200008:   81:	} else if (type == ObjectTypeBool) {
        2:   82:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
        2:   83:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
        2:   84:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
   200006:   85:	} else if (type == ObjectTypeByte) {
        1:   86:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
        1:   87:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
        1:   88:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
   200005:   89:	} else if (type == ObjectTypeInt) {
   200005:   90:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
   200005:   91:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
   200005:   92:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
        -:   93:	}
   200012:   94:}
        -:   95:
   200010:   96:Object object_create_impl(ObjectType type, const void *value, bool send) {
        -:   97:
   200010:   98:	unsigned int size = object_get_size(type);
   200010:   99:	Ptr ret = fam_alloc(size, send);
   200010:  100:	if (ret == NULL)
    #####:  101:		return ret;
        -:  102:
   200010:  103:	if (size)
        1:  104:		memcpy($(ret), value, size);
   200010:  105:	int64 *aux = ptr_aux(ret);
   200010:  106:	object_set_ptr_type(ret, type);
        -:  107:	// set strong count to 1
   200010:  108:	(*aux) |= 0x0000000000000001L;
        -:  109:
   200010:  110:	if (type == ObjectTypeInt || type == ObjectTypeFloat) {
        -:  111:		int v;
   200006:  112:		memcpy(&v, value, 4);
   200006:  113:		int64 count = ((unsigned long long)v << 24) & 0x00FFFFFFFFFFFFFFULL;
   200006:  114:		*aux |= count;
        4:  115:	} else if (type == ObjectTypeBool || type == ObjectTypeByte) {
        3:  116:		int v = 0;
        3:  117:		memcpy(&v, value, 1);
        3:  118:		int64 count = ((int64)v << 24);
        3:  119:		*aux |= count;
        -:  120:	}
        -:  121:
   200010:  122:	return ret;
        -:  123:}
        -:  124:
   200008:  125:Object object_create(ObjectType type, const void *value, bool send) {
   200008:  126:	if (value == NULL || type < 0 || type >= __ObjectTypeCount__ || type == ObjectTypeWeak ||
        -:  127:		type == ObjectTypeBox) {
    #####:  128:		SetErr(IllegalArgument);
    #####:  129:		return NULL;
        -:  130:	}
        -:  131:
   200008:  132:	return object_create_impl(type, value, send);
        -:  133:}
        -:  134:
        2:  135:Object object_create_box(unsigned int size, bool send) {
        2:  136:	if (size == 0) {
    #####:  137:		SetErr(IllegalArgument);
    #####:  138:		return NULL;
        -:  139:	}
        2:  140:	unsigned int box_size = object_get_size(ObjectTypeBox);
        2:  141:	Ptr ret = fam_alloc(box_size, send);
        2:  142:	if (ret == NULL)
    #####:  143:		return ret;
        2:  144:	Ptr ptr = fam_alloc(size, send);
        2:  145:	if (ptr == NULL) {
    #####:  146:		fam_release(&ret);
    #####:  147:		return NULL;
        -:  148:	}
        2:  149:	memcpy($(ret), &ptr, box_size);
        2:  150:	int64 *aux = ptr_aux(ret);
        2:  151:	object_set_ptr_type(ret, ObjectTypeBox);
        -:  152:
        -:  153:	// set strong count to 1
        2:  154:	(*aux) |= 0x0000000000000001L;
        -:  155:
        2:  156:	return ret;
        -:  157:}
        -:  158:
        1:  159:int object_mutate(Object obj, const void *value) {
       1*:  160:	if (nil(obj)) {
    #####:  161:		SetErr(ObjectConsumed);
    #####:  162:		return -1;
        -:  163:	}
        1:  164:	ObjectType type = object_type(obj);
        1:  165:	if (type == ObjectTypeWeak) {
    #####:  166:		SetErr(IllegalArgument);
    #####:  167:		return -1;
        -:  168:	}
        -:  169:
        1:  170:	unsigned int size = object_get_size(type);
        1:  171:	if (size)
        1:  172:		memcpy($(obj), value, size);
        1:  173:	return 0;
        -:  174:}
        -:  175:
        1:  176:int object_resize(Object obj, unsigned int size) {
       1*:  177:	if (nil(obj)) {
    #####:  178:		SetErr(ObjectConsumed);
    #####:  179:		return -1;
        -:  180:	}
        1:  181:	ObjectType type = object_type(obj);
        1:  182:	if (type != ObjectTypeBox) {
    #####:  183:		SetErr(UnsupportedOperation);
    #####:  184:		return -1;
        -:  185:	}
        -:  186:
        1:  187:	Ptr ptr = NULL;
        1:  188:	object_value_of(obj, &ptr, 8);
       1*:  189:	if (nil(ptr)) {
    #####:  190:		SetErr(IllegalState);
    #####:  191:		return -1;
        -:  192:	}
        -:  193:
        1:  194:	Ptr updated = fam_resize(ptr, size);
       1*:  195:	if (nil(updated)) {
    #####:  196:		SetErr(AllocErr);
    #####:  197:		return -1;
        -:  198:	}
        1:  199:	return object_mutate(obj, &updated);
        -:  200:}
        -:  201:
   200018:  202:int object_value_of(const Object obj, void *buffer, unsigned int limit) {
   200018:  203:	if (nil(obj)) {
        1:  204:		SetErr(ObjectConsumed);
        1:  205:		return -1;
        -:  206:	}
   200017:  207:	if (buffer == NULL) {
    #####:  208:		SetErr(IllegalArgument);
    #####:  209:		return -1;
        -:  210:	}
   200017:  211:	int max = limit;
   200017:  212:	ObjectType type = object_type(obj);
   200017:  213:	if (type == ObjectTypeInt || type == ObjectTypeFloat) {
        -:  214:
   200008:  215:		if (limit > 4)
    #####:  216:			max = 4;
        9:  217:	} else if (type == ObjectTypeByte || type == ObjectTypeBool) {
        3:  218:		if (limit > 1)
    #####:  219:			max = 1;
        6:  220:	} else if (type == ObjectTypeBox) {
        6:  221:		if (limit > 8)
    #####:  222:			max = 8;
        -:  223:	}
        -:  224:
   200017:  225:	int ret = 0;
   200017:  226:	if (type == ObjectTypeInt || type == ObjectTypeFloat || type == ObjectTypeByte ||
   200011:  227:		type == ObjectTypeBool) {
   200011:  228:		int64 *aux = ptr_aux(obj);
   200011:  229:		ret = max;
   200011:  230:		int count = ((*aux) & 0xFFFFFFFF000000LL) >> 24;
   200011:  231:		memcpy((byte *)buffer, &count, ret);
        6:  232:	} else if (type == ObjectTypeBox) {
        6:  233:		ret = max;
        6:  234:		memcpy((byte *)buffer, $(obj), ret);
        -:  235:	}
   200017:  236:	return ret;
        -:  237:}
        -:  238:
   800079:  239:ObjectType object_type(const Object obj) {
   800079:  240:	if (nil(obj)) {
        1:  241:		SetErr(ObjectConsumed);
        1:  242:		return -1;
        -:  243:	}
   800078:  244:	if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE0)) {
       27:  245:		if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE1)) {
        -:  246:		} else {
       27:  247:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
        3:  248:				return ObjectTypeWeak;
        -:  249:			else
       24:  250:				return ObjectTypeBox;
        -:  251:		}
        -:  252:	} else {
   800051:  253:		if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE1)) {
       18:  254:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
       10:  255:				return ObjectTypeFloat;
        -:  256:			else
        8:  257:				return ObjectTypeBool;
        -:  258:		} else {
   800033:  259:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
        4:  260:				return ObjectTypeByte;
        -:  261:			else
   800029:  262:				return ObjectTypeInt;
        -:  263:		}
        -:  264:	}
    #####:  265:	return ObjectTypeBool;
        -:  266:}
        -:  267:
    #####:  268:int object_set_property(Object obj, const char *key, const Object value) {
    #####:  269:	return 0;
        -:  270:}
    #####:  271:Object object_delete_property(Object obj, const char *key) {
    #####:  272:	return NULL;
        -:  273:}
    #####:  274:Object object_get_property(const Object obj, const char *key) {
    #####:  275:	return NULL;
        -:  276:}
        -:  277:
   200015:  278:int object_decrement_strong(Object obj) {
   200015:  279:	bool send = object_get_ptr_flag(obj, PTR_FLAGS_SEND);
   200015:  280:	ObjectType type = object_type(obj);
   200015:  281:	if (send) {
   200006:  282:		int64 *aux = ptr_aux(obj);
   200006:  283:		int64 aux_val = __sync_fetch_and_sub(aux, 1);
   200006:  284:		if ((aux_val & 0xFFFFFF) > 1) {
        -:  285:			// return strong count
        1:  286:			return aux_val - 1;
        -:  287:		} else {
        -:  288:			// return weak count
   200005:  289:			if (type == ObjectTypeInt || type == ObjectTypeFloat || type == ObjectTypeByte ||
        -:  290:				type == ObjectTypeBool)
   200004:  291:				return 0;
        -:  292:			else
        1:  293:				return (aux_val & 0xFFFFFF000000LL) >> 24;
        -:  294:		}
        -:  295:	} else {
        9:  296:		int64 *aux = ptr_aux(obj);
        9:  297:		int64 count = *aux & 0xFFFFFF;
        9:  298:		int64 flags = *aux & 0xFFFFFFFFFF000000LL;
        9:  299:		count--;
        9:  300:		*aux = count | flags;
        9:  301:		if (count) {
        -:  302:			// return strong count
        3:  303:			return count;
        -:  304:		} else {
        -:  305:			// return the weak count
        6:  306:			if (type == ObjectTypeInt || type == ObjectTypeFloat || type == ObjectTypeByte ||
        -:  307:				type == ObjectTypeBool)
        5:  308:				return 0;
        -:  309:			else
        1:  310:				return (*aux & 0xFFFFFF000000LL) >> 24;
        -:  311:		}
        -:  312:	}
        -:  313:}
        -:  314:
        3:  315:int object_increment_strong(Object obj) {
        3:  316:	bool send = object_get_ptr_flag(obj, PTR_FLAGS_SEND);
        3:  317:	if (send) {
        1:  318:		int64 *aux = ptr_aux(obj);
        -:  319:		int64 old_count;
        -:  320:		int64 new_count;
        -:  321:		do {
        1:  322:			old_count = __sync_fetch_and_add(aux, 0); // Atomically load the current count
        1:  323:			new_count = old_count + 1;
        1:  324:			if ((new_count & 0xFFFFFF) == 0xFFFFFF) { // Check for overflow
    #####:  325:				SetErr(Overflow);
    #####:  326:				return -1;
        -:  327:			}
        1:  328:		} while (!__sync_val_compare_and_swap(aux, old_count, new_count));
        -:  329:		// Try to atomically increment the count if it hasn't changed
        -:  330:
        -:  331:	} else {
        2:  332:		int64 *aux = ptr_aux(obj);
        2:  333:		if ((*aux & 0xFFFFFF) == 0xFFFFFF) {
    #####:  334:			SetErr(Overflow);
    #####:  335:			return -1;
        -:  336:		}
        -:  337:
        2:  338:		(*aux)++;
        -:  339:	}
        -:  340:
        3:  341:	return 0;
        -:  342:}
        -:  343:
        1:  344:int object_decrement_weak(Object obj) {
        1:  345:	bool send = object_get_ptr_flag(obj, PTR_FLAGS_SEND);
        -:  346:
        1:  347:	if (send) {
    #####:  348:		int64 *aux = ptr_aux(obj);
    #####:  349:		int64 aux_val = __sync_fetch_and_sub(aux, 0x1 << 24);
    #####:  350:		int64 weak_count = (aux_val & 0xFFFFFF000000LL) >> 24;
    #####:  351:		if (weak_count > 1) {
        -:  352:			// return weak count
    #####:  353:			return weak_count - 1;
        -:  354:		} else {
        -:  355:			// return strong count
    #####:  356:			return aux_val & 0xFFFFFF;
        -:  357:		}
        -:  358:	} else {
        1:  359:		int64 *aux = ptr_aux(obj);
        1:  360:		int64 count = *aux & 0xFFFFFF000000LL;
        1:  361:		int64 flags = *aux & 0xFFFF000000FFFFFFLL;
        1:  362:		count -= (0x1 << 24);
        1:  363:		*aux = count | flags;
        -:  364:
        1:  365:		if (count) {
        -:  366:			// return weak count
    #####:  367:			return count;
        -:  368:		} else {
        -:  369:			// return the strong count
        1:  370:			return ((*aux) & 0xFFFFFF);
        -:  371:		}
        -:  372:	}
        -:  373:}
        -:  374:
        1:  375:int object_increment_weak(Object obj) {
        1:  376:	bool send = object_get_ptr_flag(obj, PTR_FLAGS_SEND);
        1:  377:	if (send) {
    #####:  378:		int64 *aux = ptr_aux(obj);
        -:  379:		int64 old_count;
        -:  380:		int64 new_count;
        -:  381:		do {
    #####:  382:			old_count = __sync_fetch_and_add(aux, 0); // Atomically load the current count
    #####:  383:			new_count = old_count + (0x1 << 24);
    #####:  384:			if ((new_count & 0xFFFFFF000000LL) == 0xFFFFFF000000LL) { // Check for overflow
    #####:  385:				SetErr(Overflow);
    #####:  386:				return -1;
        -:  387:			}
    #####:  388:		} while (!__sync_val_compare_and_swap(aux, old_count, new_count));
        -:  389:		// Try to atomically increment the count if it hasn't changed
        -:  390:
        -:  391:	} else {
        1:  392:		int64 *aux = ptr_aux(obj);
        1:  393:		if ((*aux & 0xFFFFFF000000LL) == 0xFFFFFF000000LL) {
    #####:  394:			SetErr(Overflow);
    #####:  395:			return -1;
        -:  396:		}
        1:  397:		(*aux) += (0x1 << 24);
        -:  398:	}
        -:  399:
        1:  400:	return 0;
        -:  401:}
        -:  402:
        4:  403:Object object_ref_impl(Object src, bool incr) {
       4*:  404:	if (nil(src)) {
    #####:  405:		SetErr(ObjectConsumed);
    #####:  406:		return NULL;
        -:  407:	}
        4:  408:	if (object_type(src) == ObjectTypeWeak) {
    #####:  409:		SetErr(IllegalArgument);
    #####:  410:		return NULL;
        -:  411:	}
        -:  412:
        4:  413:	if (incr) {
        3:  414:		if (object_increment_strong(src))
    #####:  415:			return NULL;
        -:  416:	}
        -:  417:
        4:  418:	ObjectNc ret = src;
        4:  419:	return ret;
        -:  420:}
        -:  421:
        -:  422:// Functions that require override of const
        -:  423:#pragma clang diagnostic ignored "-Wincompatible-pointer-types-discards-qualifiers"
        -:  424:#pragma clang diagnostic ignored "-Wunknown-warning-option"
        -:  425:#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
        -:  426:
        2:  427:Object object_move(const Object src) {
       2*:  428:	if (nil(src)) {
    #####:  429:		SetErr(ObjectConsumed);
    #####:  430:		return NULL;
        -:  431:	}
        2:  432:	ObjectType type = object_type(src);
        2:  433:	if (type == ObjectTypeWeak) {
    #####:  434:		SetErr(IllegalArgument);
    #####:  435:		return NULL;
        -:  436:	}
        -:  437:
        2:  438:	bool send = object_get_ptr_flag(src, PTR_FLAGS_SEND);
        -:  439:	ObjectNc ret;
        2:  440:	if (type == ObjectTypeInt || type == ObjectTypeFloat || type == ObjectTypeByte ||
        1:  441:		type == ObjectTypeBool) {
        1:  442:		int64 *aux = ptr_aux(src);
        1:  443:		int value = ((*aux) & 0xFFFFFFFF000000LL) >> 24;
        1:  444:		ret = object_create_impl(type, &value, send);
        -:  445:
        -:  446:	} else {
        1:  447:		ret = object_ref(src);
        -:  448:		// ret = object_create_impl(type, $(src), send);
        -:  449:	}
        2:  450:	Object_cleanup(&src);
        2:  451:	return ret;
        -:  452:}
        3:  453:Object object_ref(const Object src) {
        3:  454:	ObjectType type = object_type(src);
        3:  455:	if (type == ObjectTypeWeak) {
    #####:  456:		SetErr(IllegalArgument);
    #####:  457:		return NULL;
        -:  458:	}
        3:  459:	return object_ref_impl(src, true);
        -:  460:}
        -:  461:
        3:  462:Object object_weak(const Object src) {
       3*:  463:	if (nil(src)) {
    #####:  464:		SetErr(ObjectConsumed);
    #####:  465:		return NULL;
        -:  466:	}
        3:  467:	ObjectType type = object_type(src);
        3:  468:	if (type == ObjectTypeInt || type == ObjectTypeFloat || type == ObjectTypeByte ||
        1:  469:		type == ObjectTypeBool || type == ObjectTypeWeak) {
        2:  470:		SetErr(IllegalArgument);
        2:  471:		return NULL;
        -:  472:	}
        1:  473:	unsigned long long v = (unsigned long long)src;
        1:  474:	bool send = object_get_ptr_flag(src, PTR_FLAGS_SEND);
        1:  475:	ObjectNc weak = object_create_impl(ObjectTypeWeak, &v, send);
        1:  476:	if (object_increment_weak(src))
    #####:  477:		return NULL;
        -:  478:
        1:  479:	return weak;
        -:  480:}
        -:  481:
        2:  482:Object object_upgrade(const Object src) {
       2*:  483:	if (nil(src)) {
    #####:  484:		SetErr(ObjectConsumed);
    #####:  485:		return NULL;
        -:  486:	}
        2:  487:	if (object_type(src) != ObjectTypeWeak) {
    #####:  488:		SetErr(IllegalArgument);
    #####:  489:		return NULL;
        -:  490:	}
        -:  491:
        2:  492:	unsigned long long *target = object_box_value_of(src);
        2:  493:	ObjectNc w = (ObjectNc)*target;
        2:  494:	bool send = object_get_ptr_flag(src, PTR_FLAGS_SEND);
        2:  495:	if (send) {
    #####:  496:		int64 *aux = ptr_aux(w);
        -:  497:		int64 old_count;
        -:  498:		do {
    #####:  499:			old_count = __sync_fetch_and_add(aux, 0);
    #####:  500:			if ((old_count & 0xFFFFFF) == 0) {
    #####:  501:				return NULL; // Object is already deallocated
        -:  502:			}
    #####:  503:		} while (!__sync_val_compare_and_swap(aux, old_count, old_count + 1));
        -:  504:
        -:  505:	} else {
        2:  506:		int64 *aux = ptr_aux(w);
        2:  507:		int64 strong_count = *aux & 0xFFFFFF;
        -:  508:
        2:  509:		if (!strong_count) {
        1:  510:			return NULL;
        -:  511:		}
        1:  512:		(*aux)++;
        -:  513:	}
        -:  514:
        1:  515:	return object_ref_impl(w, false);
        -:  516:}
        -:  517:
   200020:  518:void Object_cleanup(const Object *obj) {
   200020:  519:	if (!nil(*obj) && ptr_len(*obj) != UINT32_MAX) {
   200016:  520:		if (object_type(*obj) == ObjectTypeWeak) {
        1:  521:			unsigned long long *target = object_box_value_of(*obj);
        1:  522:			ObjectNc w = (ObjectNc)*target;
        -:  523:
        1:  524:			int odwval = object_decrement_weak(w);
        1:  525:			if (!odwval) {
        -:  526:				// deallocate the pointer
        1:  527:				if (object_type(w) == ObjectTypeBox) {
        1:  528:					Ptr inner = *(Ptr *)object_box_value_of(w);
        1:  529:					fam_release(&inner);
        -:  530:				}
        1:  531:				fam_release(&w);
        -:  532:			}
        1:  533:			fam_release(obj);
        -:  534:		} else {
   200015:  535:			int odsval = object_decrement_strong(*obj);
   200015:  536:			if (!odsval) {
        -:  537:				// deallocate the pointer
   200010:  538:				if (object_type(*obj) == ObjectTypeBox) {
        1:  539:					Ptr inner = *(Ptr *)object_box_value_of(*obj);
        1:  540:					fam_release(&inner);
        -:  541:				}
   200010:  542:				fam_release(obj);
        -:  543:			}
        -:  544:		}
        -:  545:	}
   200020:  546:}
        -:    0:Source:os.c
        -:    0:Graph:os.gcno
        -:    0:Data:os.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/os.h>
        -:   17:#include <base/osdef.h>
        -:   18:
        -:   19:_Thread_local ResourceStats THREAD_LOCAL_RESOURCE_STATS = {0, 0, 0, 0, 0};
        -:   20:
       85:   21:void *alloc(int64 size, int64 zeroed) {
       85:   22:	if (!size) {
    #####:   23:		SetErr(IllegalArgument);
    #####:   24:		return NULL;
        -:   25:	}
        -:   26:	void *ret;
       85:   27:	ret = malloc(size);
        -:   28:
       85:   29:	if (ret) {
       85:   30:		THREAD_LOCAL_RESOURCE_STATS.alloc_sum += 1;
       85:   31:		if (zeroed)
    #####:   32:			memset(ret, 0, size);
        -:   33:	} else {
    #####:   34:		SetErr(AllocErr);
        -:   35:	}
        -:   36:
       85:   37:	return ret;
        -:   38:}
       64:   39:void *resize(void *ptr, int64 size) {
       64:   40:	if (!ptr || !size) {
    #####:   41:		SetErr(IllegalArgument);
    #####:   42:		return NULL;
        -:   43:	}
        -:   44:	void *ret;
       64:   45:	ret = realloc(ptr, size);
        -:   46:
       64:   47:	if (ret) {
       64:   48:		THREAD_LOCAL_RESOURCE_STATS.resize_sum += 1;
        -:   49:	} else {
    #####:   50:		SetErr(AllocErr);
        -:   51:	}
       64:   52:	return ret;
        -:   53:}
        -:   54:
       85:   55:void release(void *ptr) {
       85:   56:	if (!ptr) {
    #####:   57:		SetErr(IllegalArgument);
    #####:   58:		return;
        -:   59:	}
       85:   60:	THREAD_LOCAL_RESOURCE_STATS.release_sum += 1;
       85:   61:	free(ptr);
        -:   62:}
        -:   63:
       14:   64:int64 alloc_sum() {
       14:   65:	return THREAD_LOCAL_RESOURCE_STATS.alloc_sum;
        -:   66:}
    #####:   67:int64 resize_sum() {
    #####:   68:	return THREAD_LOCAL_RESOURCE_STATS.resize_sum;
        -:   69:}
       14:   70:int64 release_sum() {
       14:   71:	return THREAD_LOCAL_RESOURCE_STATS.release_sum;
        -:   72:}
        -:   73:
        -:   74:char *getenv(const char *name);
        -:   75:
    #####:   76:byte *env(const byte *name) {
    #####:   77:	return getenv(name);
        -:   78:}
        -:    0:Source:print_util.c
        -:    0:Graph:print_util.gcno
        -:    0:Data:print_util.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <stdarg.h>
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
    #####:   18:void __attribute__((no_return)) panic(const char *fmt, ...) {
        -:   19:	char buf[1024];
        -:   20:	va_list args;
    #####:   21:	fprintf(stderr, "Panic: ");
    #####:   22:	va_start(args, fmt);
    #####:   23:	vfprintf(stderr, fmt, args);
    #####:   24:	vsnprintf(buf, 1024, fmt, args);
    #####:   25:	va_end(args);
    #####:   26:	fprintf(stderr, "\n");
        -:   27:
    #####:   28:	exit(-1);
        -:   29:}
        -:   30:
        -:   31:/*
        -:   32:#include <base/fam_err.h>
        -:   33:#include <base/macro_util.h>
        -:   34:#include <base/os.h>
        -:   35:#include <base/print_util.h>
        -:   36:#include <base/string.h>
        -:   37:
        -:   38:#define BUF_LEN 64
        -:   39:
        -:   40:// get the va functionality (with GCC/Clang use the builtin version, otherwise use stdarg)
        -:   41:#if defined(__GNUC__) || defined(__clang__)
        -:   42:typedef __builtin_va_list va_list;
        -:   43:#define va_start(ap, param) __builtin_va_start(ap, param)
        -:   44:#define va_end(ap) __builtin_va_end(ap)
        -:   45:#define va_arg(ap, type) __builtin_va_arg(ap, type)
        -:   46:#else // __GNUC__ or __clang__
        -:   47:#include <stdarg.h>
        -:   48:#endif // __GNUC__ or __clang__
        -:   49:
        -:   50:i32 write_loop(const Stream *strm, u8 *s, i32 *cur, i32 limit, const u8 *buf, u64 len) {
        -:   51:	if (s) {
        -:   52:		if (strm->handle == -1) {
        -:   53:			// length only
        -:   54:			*cur += len;
        -:   55:		} else if (*cur < limit) {
        -:   56:			u8 *res;
        -:   57:			if (*cur == 0) {
        -:   58:				res = strncpy(s, buf, len);
        -:   59:				if (res == NULL)
        -:   60:					return -1;
        -:   61:			} else {
        -:   62:				res = strncat(s, buf, len);
        -:   63:				if (res == NULL)
        -:   64:					return -1;
        -:   65:			}
        -:   66:
        -:   67:			i32 l = strlen(buf);
        -:   68:			*cur = l;
        -:   69:		}
        -:   70:	} else {
        -:   71:		while (len > 0) {
        -:   72:			i64 w = strm_write(strm, buf, len);
        -:   73:			if (w < 0) {
        -:   74:				SetErr(IO);
        -:   75:				return w;
        -:   76:			}
        -:   77:
        -:   78:			len -= w;
        -:   79:		}
        -:   80:	}
        -:   81:	return 0;
        -:   82:}
        -:   83:
        -:   84:i32 print_impl(const Stream *strm, u8 *s, i32 capacity, bool nl, bool do_exit, i32 code,
        -:   85:			   const u8 *prefix, const u8 *fmt, ...) {
        -:   86:	int ret = 0;
        -:   87:	if (capacity < 0 && s) {
        -:   88:		SetErr(IllegalArgument);
        -:   89:		ret = -1;
        -:   90:	}
        -:   91:	if (s) {
        -:   92:		memset(s, '\0', capacity);
        -:   93:	}
        -:   94:	va_list args;
        -:   95:	va_start(args, fmt);
        -:   96:	i32 max = capacity;
        -:   97:	capacity = 0;
        -:   98:
        -:   99:	if (prefix && ret != -1) {
        -:  100:		if (write_loop(strm, s, &capacity, max, prefix, strlen(prefix)))
        -:  101:			ret = -1;
        -:  102:	}
        -:  103:
        -:  104:	while (ret != -1) {
        -:  105:		bool is_hex = false;
        -:  106:		const u8 *next = strstr(fmt, "{}");
        -:  107:		const u8 *next_hex = strstr(fmt, "{hex}");
        -:  108:		if ((next_hex && !next) || (next_hex && next_hex < next)) {
        -:  109:			next = next_hex;
        -:  110:			is_hex = true;
        -:  111:		}
        -:  112:
        -:  113:		if (next == NULL) {
        -:  114:			if (write_loop(strm, s, &capacity, max, fmt, strlen(fmt))) {
        -:  115:				ret = -1;
        -:  116:				break;
        -:  117:			}
        -:  118:			if (nl)
        -:  119:				if (write_loop(strm, s, &capacity, max, "\n", 1)) {
        -:  120:					ret = -1;
        -:  121:					break;
        -:  122:				}
        -:  123:			break;
        -:  124:		} else {
        -:  125:			u64 diff = next - fmt;
        -:  126:			u8 buf[1 + diff];
        -:  127:			memset(buf, '\0', 1 + diff);
        -:  128:			strncpy(buf, fmt, diff);
        -:  129:			if (write_loop(strm, s, &capacity, max, buf, diff)) {
        -:  130:				ret = -1;
        -:  131:				break;
        -:  132:			}
        -:  133:		}
        -:  134:
        -:  135:		PrintPair arg = va_arg(args, PrintPair);
        -:  136:
        -:  137:		if (arg.type == PrintTypeTerm) {
        -:  138:			if (next) {
        -:  139:				if (write_loop(strm, s, &capacity, max, next, strlen(next))) {
        -:  140:					ret = -1;
        -:  141:					break;
        -:  142:				}
        -:  143:				if (nl)
        -:  144:					if (write_loop(strm, s, &capacity, max, "\n", 1)) {
        -:  145:						ret = -1;
        -:  146:						break;
        -:  147:					}
        -:  148:			}
        -:  149:			break;
        -:  150:		} else if (arg.type == PrintTypeBool) {
        -:  151:			bool value;
        -:  152:			memcpy(&value, arg.buf, sizeof(bool));
        -:  153:			u8 buf[BUF_LEN];
        -:  154:			if (value)
        -:  155:				strncpy(buf, "true", 5);
        -:  156:			else
        -:  157:				strncpy(buf, "false", 6);
        -:  158:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  159:				ret = -1;
        -:  160:				break;
        -:  161:			}
        -:  162:		} else if (arg.type == PrintTypeF64) {
        -:  163:			f64 value;
        -:  164:			memcpy(&value, arg.buf, sizeof(f64));
        -:  165:			u8 buf[BUF_LEN];
        -:  166:			strcpy(buf, "");
        -:  167:			snprintf(buf, BUF_LEN - 1, "%lf", value);
        -:  168:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  169:				ret = -1;
        -:  170:				break;
        -:  171:			}
        -:  172:		} else if (arg.type == PrintTypeF32) {
        -:  173:			f32 value;
        -:  174:			memcpy(&value, arg.buf, sizeof(f32));
        -:  175:			u8 buf[BUF_LEN];
        -:  176:			strcpy(buf, "");
        -:  177:			snprintf(buf, BUF_LEN - 1, "%f", value);
        -:  178:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  179:				ret = -1;
        -:  180:				break;
        -:  181:			}
        -:  182:		} else if (arg.type == PrintTypeI64) {
        -:  183:			i64 value;
        -:  184:			memcpy(&value, arg.buf, sizeof(i64));
        -:  185:			u8 buf[BUF_LEN];
        -:  186:			strcpy(buf, "");
        -:  187:			if (is_hex)
        -:  188:				snprintf(buf, BUF_LEN - 1, "%llX", value);
        -:  189:			else
        -:  190:				snprintf(buf, BUF_LEN - 1, "%lli", value);
        -:  191:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  192:				ret = -1;
        -:  193:				break;
        -:  194:			}
        -:  195:		} else if (arg.type == PrintTypeU64) {
        -:  196:			u64 value;
        -:  197:			memcpy(&value, arg.buf, sizeof(u64));
        -:  198:			u8 buf[BUF_LEN];
        -:  199:			strcpy(buf, "");
        -:  200:			if (is_hex)
        -:  201:				snprintf(buf, BUF_LEN - 1, "%llx", value);
        -:  202:			else
        -:  203:				snprintf(buf, BUF_LEN - 1, "%llu", value);
        -:  204:
        -:  205:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  206:				ret = -1;
        -:  207:				break;
        -:  208:			}
        -:  209:		} else if (arg.type == PrintTypeI32) {
        -:  210:			i32 value;
        -:  211:			memcpy(&value, arg.buf, sizeof(i32));
        -:  212:			u8 buf[BUF_LEN];
        -:  213:			strcpy(buf, "");
        -:  214:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  215:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  216:				ret = -1;
        -:  217:				break;
        -:  218:			}
        -:  219:		} else if (arg.type == PrintTypeU32) {
        -:  220:			u32 value;
        -:  221:			memcpy(&value, arg.buf, sizeof(u32));
        -:  222:			u8 buf[BUF_LEN];
        -:  223:			strcpy(buf, "");
        -:  224:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  225:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  226:				ret = -1;
        -:  227:				break;
        -:  228:			}
        -:  229:		} else if (arg.type == PrintTypeI16) {
        -:  230:			i16 value;
        -:  231:			memcpy(&value, arg.buf, sizeof(i16));
        -:  232:			u8 buf[BUF_LEN];
        -:  233:			strcpy(buf, "");
        -:  234:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  235:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  236:				ret = -1;
        -:  237:				break;
        -:  238:			}
        -:  239:		} else if (arg.type == PrintTypeU16) {
        -:  240:			u16 value;
        -:  241:			memcpy(&value, arg.buf, sizeof(u16));
        -:  242:			u8 buf[BUF_LEN];
        -:  243:			strcpy(buf, "");
        -:  244:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  245:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  246:				ret = -1;
        -:  247:				break;
        -:  248:			}
        -:  249:		} else if (arg.type == PrintTypeI8) {
        -:  250:			i8 value;
        -:  251:			memcpy(&value, arg.buf, sizeof(i8));
        -:  252:			u8 buf[BUF_LEN];
        -:  253:			strcpy(buf, "");
        -:  254:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  255:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  256:				ret = -1;
        -:  257:				break;
        -:  258:			}
        -:  259:		} else if (arg.type == PrintTypeU8) {
        -:  260:			u8 value;
        -:  261:			memcpy(&value, arg.buf, sizeof(u8));
        -:  262:			u8 buf[BUF_LEN];
        -:  263:			strcpy(buf, "");
        -:  264:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  265:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  266:				ret = -1;
        -:  267:				break;
        -:  268:			}
        -:  269:		} else if (arg.type == PrintTypeString) {
        -:  270:			if (write_loop(strm, s, &capacity, max, arg.data, strlen(arg.data))) {
        -:  271:				ret = -1;
        -:  272:				break;
        -:  273:			}
        -:  274:		}
        -:  275:		if (is_hex)
        -:  276:			fmt = next + 5;
        -:  277:		else
        -:  278:			fmt = next + 2;
        -:  279:	}
        -:  280:
        -:  281:	va_end(args);
        -:  282:
        -:  283:	if (do_exit) {
        -:  284:		Backtrace bt;
        -:  285:		backtrace_generate(&bt);
        -:  286:		backtrace_print(&bt);
        -:  287:
        -:  288:		exit(code);
        -:  289:	}
        -:  290:
        -:  291:	if (ret == -1)
        -:  292:		return ret;
        -:  293:	return capacity;
        -:  294:}
        -:  295:*/
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/os.h>
        -:   17:#include <base/print_util.h>
        -:   18:#include <base/slabs.h>
        -:   19:
        -:   20:#define MAX_SLAB_TYPES 256
        -:   21:#define SLAB_SIZES 257
        -:   22:#define SLABS_PER_RESIZE 128
        -:   23:#define INITIAL_CHUNKS 0
        -:   24:
        -:   25:typedef struct Type {
        -:   26:	// slab id used internally by sa
        -:   27:	unsigned int id;
        -:   28:	// len of slab
        -:   29:	unsigned int len;
        -:   30:	int64 aux; // aux data can be used by caller as desired
        -:   31:	// user data
        -:   32:	byte data[];
        -:   33:} Type;
        -:   34:
        -:   35:const Type null_impl = {.id = 0, .len = UINT32_MAX};
        -:   36:const struct Type *null = &null_impl;
        -:   37:const struct Type not_null_impl = {.id = 1, .len = UINT32_MAX};
        -:   38:const struct Type *Ok = &not_null_impl;
        -:   39:
        -:   40:#define SLAB_OVERHEAD sizeof(Type)
        -:   41:
  1822219:   42:unsigned int ptr_len(const Ptr ptr) {
  1822219:   43:	return ptr->len;
        -:   44:}
        -:   45:
     9228:   46:unsigned int ptr_id(const Ptr ptr) {
     9228:   47:	return ptr->id;
        -:   48:}
        -:   49:
        -:   50:// reutrn pointer to slab data
     9681:   51:void *ptr_data(const Ptr ptr) {
     9681:   52:	return ptr->data;
        -:   53:}
        -:   54:
  4800427:   55:void *ptr_aux(const Ptr ptr) {
  4800427:   56:	return &ptr->aux;
        -:   57:}
        -:   58:
        -:   59:// Direct alloc (len not used)
    #####:   60:Ptr ptr_direct_alloc(unsigned int size) {
        -:   61:	if (size < 0) {
        -:   62:		SetErr(IllegalArgument);
        -:   63:		return NULL;
        -:   64:	}
    #####:   65:	Ptr ret = alloc(size, false);
    #####:   66:	ret->len = size;
    #####:   67:	return ret;
        -:   68:}
    #####:   69:void ptr_direct_release(Ptr ptr) {
    #####:   70:	release(ptr);
    #####:   71:}
        -:   72:
        -:   73:// Slab Type definition
        -:   74:typedef struct SlabType {
        -:   75:	unsigned int slab_size;
        -:   76:	unsigned int slabs_per_resize;
        -:   77:	unsigned int initial_chunks;
        -:   78:	unsigned int max_slabs;
        -:   79:} SlabType;
        -:   80:
        -:   81:typedef struct SlabData {
        -:   82:	SlabType type;
        -:   83:	byte **data;
        -:   84:	unsigned int *free_list;
        -:   85:	unsigned int cur_chunks;
        -:   86:	unsigned int cur_slabs;
        -:   87:	unsigned int free_list_head;
        -:   88:} SlabData;
        -:   89:
        -:   90:typedef struct SlabAllocatorImpl {
        -:   91:	int64 sd_count;
        -:   92:	SlabData sd_arr[];
        -:   93:} SlabAllocatorImpl;
        -:   94:
       18:   95:void slab_allocator_cleanup(SlabAllocator *ptr) {
       18:   96:	SlabAllocatorNc sa = *ptr;
       18:   97:	if (sa) {
       10:   98:		if (sa->sd_count) {
     2580:   99:			for (int i = 0; i < sa->sd_count; i++) {
     2570:  100:				SlabData *sd = &sa->sd_arr[i];
     2570:  101:				if (sd->cur_chunks) {
       14:  102:					release(sd->free_list);
       60:  103:					for (int64 j = 0; j < sd->cur_chunks; j++)
       46:  104:						release(sd->data[j]);
       14:  105:					release(sd->data);
       14:  106:					sd->cur_chunks = 0;
        -:  107:				}
        -:  108:			}
        -:  109:		}
       10:  110:		release(sa);
       10:  111:		*ptr = NULL;
        -:  112:	}
       18:  113:}
        -:  114:
   204633:  115:int64 slab_allocator_slab_data_index(SlabData *sd, int64 id) {
   204633:  116:	return id / sd->type.slabs_per_resize;
        -:  117:}
        -:  118:
   204633:  119:int64 slab_allocator_slab_data_offset(SlabData *sd, int64 id) {
   204633:  120:	return (id % sd->type.slabs_per_resize) * (SLAB_OVERHEAD + sd->type.slab_size);
        -:  121:}
        -:  122:
       46:  123:void slab_allocator_init_free_list(SlabData *sd, int64 chunks) {
       46:  124:	sd->free_list_head = sd->cur_chunks * sd->type.slabs_per_resize;
       46:  125:	int64 count = chunks * (int64)sd->type.slabs_per_resize;
     5934:  126:	for (int64 i = 0; i < count; i++) {
     5888:  127:		if (i == count - 1) {
       46:  128:			sd->free_list[i + sd->free_list_head] = UINT32_MAX;
        -:  129:		} else {
     5842:  130:			sd->free_list[i + sd->free_list_head] = 1 + i + sd->free_list_head;
        -:  131:		}
        -:  132:	}
       46:  133:}
        -:  134:
       46:  135:int slab_allocator_increase_chunks(SlabData *sd, int64 chunks) {
       46:  136:	if (sd->cur_chunks == 0) {
       14:  137:		sd->free_list = alloc(chunks * sd->type.slabs_per_resize * sizeof(unsigned int), false);
       14:  138:		if (sd->free_list == NULL)
    #####:  139:			return -1;
       14:  140:		sd->data = alloc(chunks * sizeof(byte *), false);
       14:  141:		if (sd->data == NULL) {
    #####:  142:			release(sd->free_list);
    #####:  143:			return -1;
        -:  144:		}
       28:  145:		for (int64 i = 0; i < chunks; i++) {
       28:  146:			sd->data[i] =
       14:  147:				alloc(sd->type.slabs_per_resize * (SLAB_OVERHEAD + sd->type.slab_size), false);
       14:  148:			if (sd->data[i] == NULL) {
    #####:  149:				release(sd->free_list);
    #####:  150:				for (int64 j = i - 1; j >= 0; j--) {
    #####:  151:					release(sd->data[j]);
        -:  152:				}
    #####:  153:				release(sd->data);
    #####:  154:				return -1;
        -:  155:			}
        -:  156:		}
        -:  157:	} else {
       32:  158:		if ((chunks + (int64)sd->cur_chunks) * (int64)sd->type.slabs_per_resize >
       32:  159:			sd->type.max_slabs) {
    #####:  160:			SetErr(Overflow);
    #####:  161:			return -1;
        -:  162:		}
       32:  163:		void *tmp = resize(sd->free_list, (chunks + sd->cur_chunks) * sd->type.slabs_per_resize *
        -:  164:											  sizeof(unsigned int));
       32:  165:		if (tmp == NULL)
    #####:  166:			return -1;
       32:  167:		sd->free_list = tmp;
       32:  168:		void *tmp2 = resize(sd->data, (chunks + sd->cur_chunks) * sizeof(byte *));
       32:  169:		if (tmp2 == NULL) {
    #####:  170:			release(sd->free_list);
    #####:  171:			return -1;
        -:  172:		}
       32:  173:		sd->data = tmp2;
       64:  174:		for (int64 i = 0; i < chunks; i++) {
       64:  175:			sd->data[i + sd->cur_chunks] =
       32:  176:				alloc(sd->type.slabs_per_resize * (SLAB_OVERHEAD + sd->type.slab_size), false);
       32:  177:			if (sd->data[i + sd->cur_chunks] == NULL) {
    #####:  178:				release(sd->free_list);
    #####:  179:				for (int64 j = i - 1; j >= 0; j--) {
    #####:  180:					release(sd->data[j + sd->cur_chunks]);
        -:  181:				}
    #####:  182:				release(sd->data);
    #####:  183:				return -1;
        -:  184:			}
        -:  185:		}
        -:  186:	}
        -:  187:
       46:  188:	slab_allocator_init_free_list(sd, chunks);
       46:  189:	sd->cur_chunks += chunks;
       46:  190:	return 0;
        -:  191:}
        -:  192:
     2570:  193:int slab_allocator_init_data(SlabData *sd) {
     2570:  194:	sd->cur_slabs = 0;
     2570:  195:	sd->cur_chunks = 0;
     2570:  196:	sd->free_list_head = UINT32_MAX;
     2570:  197:	sd->free_list = NULL;
     2570:  198:	sd->data = NULL;
        -:  199:
     2570:  200:	if (sd->type.initial_chunks) {
    #####:  201:		if (slab_allocator_increase_chunks(sd, sd->type.initial_chunks))
    #####:  202:			return -1;
        -:  203:	}
     2570:  204:	return 0;
        -:  205:}
        -:  206:
       10:  207:int slab_allocator_init_state(SlabAllocator sa) {
     2580:  208:	for (int i = 0; i < sa->sd_count; i++) {
     2570:  209:		if (slab_allocator_init_data(&sa->sd_arr[i]))
    #####:  210:			return -1;
        -:  211:	}
        -:  212:
       10:  213:	return 0;
        -:  214:}
        -:  215:
       10:  216:SlabAllocator slab_allocator_create() {
       10:  217:	SlabAllocatorNc ret = (SlabAllocatorImpl *)alloc(
        -:  218:		sizeof(SlabAllocatorImpl) + SLAB_SIZES * sizeof(SlabData), false);
       10:  219:	if (ret == NULL)
    #####:  220:		return NULL;
       10:  221:	ret->sd_count = SLAB_SIZES;
     2580:  222:	for (int i = 0; i < ret->sd_count; i++) {
     2570:  223:		SlabData *sd = &ret->sd_arr[i];
     2570:  224:		sd->type = (const SlabType) {.slab_size = i * 16,
        -:  225:									 .slabs_per_resize = SLABS_PER_RESIZE,
        -:  226:									 .initial_chunks = INITIAL_CHUNKS,
        -:  227:									 .max_slabs = UINT32_MAX};
     2570:  228:		sd->cur_chunks = 0;
        -:  229:	}
        -:  230:
       10:  231:	if (slab_allocator_init_state(ret)) {
    #####:  232:		slab_allocator_cleanup(&ret);
    #####:  233:		return NULL;
        -:  234:	}
       10:  235:	return ret;
        -:  236:}
        -:  237:
   409261:  238:int slab_allocator_index(SlabAllocator sa, unsigned int size) {
   409261:  239:	int ret = (15 + size) / 16;
   409261:  240:	if (size < 0 || ret >= SLAB_SIZES)
        1:  241:		return -1;
   409260:  242:	return ret;
        -:  243:}
        -:  244:
   204633:  245:Ptr slab_allocator_allocate_sd(SlabData *sd) {
   204633:  246:	if (sd->free_list_head == UINT32_MAX) {
       46:  247:		if (slab_allocator_increase_chunks(sd, 1)) {
    #####:  248:			return NULL;
        -:  249:		}
       46:  250:		if (sd->free_list_head == UINT32_MAX) {
    #####:  251:			SetErr(CapacityExceeded);
    #####:  252:			return NULL;
        -:  253:		}
        -:  254:	}
   204633:  255:	int64 index = slab_allocator_slab_data_index(sd, sd->free_list_head);
   204633:  256:	int64 offset = slab_allocator_slab_data_offset(sd, sd->free_list_head);
   204633:  257:	Ptr ptr = (Type *)(sd->data[index] + offset);
   204633:  258:	ptr->id = sd->free_list_head;
   204633:  259:	ptr->len = sd->type.slab_size;
   204633:  260:	sd->free_list_head = sd->free_list[ptr->id];
   204633:  261:	sd->cur_slabs++;
        -:  262:
   204633:  263:	return ptr;
        -:  264:}
        -:  265:
   204627:  266:void slab_allocator_data_free(SlabData *sd, int64 id) {
   204627:  267:	sd->free_list[id] = sd->free_list_head;
   204627:  268:	sd->free_list_head = id;
   204627:  269:	sd->cur_slabs--;
   204627:  270:}
        -:  271:
   204634:  272:Ptr slab_allocator_allocate(SlabAllocator sa, unsigned int size) {
   204634:  273:	int index = slab_allocator_index(sa, size);
   204634:  274:	if (index < 0)
        1:  275:		return NULL;
        -:  276:
   204633:  277:	return slab_allocator_allocate_sd(&sa->sd_arr[index]);
        -:  278:}
        -:  279:
   204627:  280:void slab_allocator_free(SlabAllocator sa, Ptr ptr) {
   204627:  281:	if (ptr == NULL || sa == NULL) {
    #####:  282:		panic("Invalid ptr sent to slab_allocator free!");
        -:  283:	}
   204627:  284:	unsigned int len = ptr_len(ptr);
   204627:  285:	int index = slab_allocator_index(sa, len);
   204627:  286:	if (index < 0) {
    #####:  287:		panic("Invalid ptr sent to slab_allocator free! Unknown size %lli.", len);
        -:  288:	}
   204627:  289:	if (sa->sd_arr[index].type.slab_size != len) {
    #####:  290:		panic("Invalid ptr sent to slab_allocator free! Size mismatch %lli vs. %lli.",
        -:  291:			  sa->sd_arr[index].type.slab_size, len);
        -:  292:	}
        -:  293:
   204627:  294:	slab_allocator_data_free(&sa->sd_arr[index], ptr->id);
        -:  295:
   204627:  296:	*ptr = null_impl;
   204627:  297:}
       16:  298:int64 slab_allocator_cur_slabs_allocated(const SlabAllocator sa) {
       16:  299:	int64 slabs = 0;
     4128:  300:	for (int i = 0; i < sa->sd_count; i++) {
     4112:  301:		SlabData *sd = &sa->sd_arr[i];
     4112:  302:		slabs += sd->cur_slabs;
        -:  303:	}
       16:  304:	return slabs;
        -:  305:}
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/types.h>
        -:   18:
       10:   19:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   20:#if !defined(__x86_64__) && !defined(_M_X64) && !defined(__aarch64__)
        -:   21:	panic("Supported architectures: __x86_64__, _M_X64, and __aarch64__");
        -:   22:#endif // arch
        -:   23:
        -:   24:	// check size_t
        -:   25:	if (__SIZEOF_SIZE_T__ != 8)
        -:   26:		panic("size_t must be 8 bytes. Invalid arch!");
        -:   27:	// check primitive types
        -:   28:	if (sizeof(byte) != 1)
        -:   29:		panic("byte must be 1 byte. Invalid arch!");
        -:   30:
        -:   31:	if (sizeof(int64) != 8)
        -:   32:		panic("must be 8 bytes. Invalid arch!");
        -:   33:
        -:   34:	if (sizeof(int) != 4)
        -:   35:		panic("int must be 4 bytes. Invalid arch!");
        -:   36:
        -:   37:	if (sizeof(float64) != 8)
        -:   38:		panic("float64 must be 8 bytes. Invalid arch!");
        -:   39:
        -:   40:	if (sizeof(bool) != 1)
        -:   41:		panic("bool must be 1 byte. Invalid arch!");
        -:   42:
        -:   43:	if (sizeof(aint64) != 8)
        -:   44:		panic("aint64 must be 8 bytes. Invalid arch!");
        -:   45:
        -:   46:	if (sizeof(abool) != 1)
        -:   47:		panic("abool must be 1 byte. Invalid arch!");
        -:   48:
        -:   49:	// little endian check
       10:   50:	int test = 0x1;
       10:   51:	if (*(byte *)&test != 0x1) {
    #####:   52:		panic("Big endian is not supported!");
        -:   53:	}
       10:   54:}
        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:2
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <main/main.h>
        -:   16:
    #####:   17:int real_main(int argc, char **argv) {
    #####:   18:	return 0;
        -:   19:}
