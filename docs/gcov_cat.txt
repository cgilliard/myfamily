        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/osdef.h>
        -:   17:
    #####:   18:byte *get_dimmed() {
    #####:   19:	if (getenv("NO_COLOR") != NULL) {
    #####:   20:		return "";
        -:   21:	} else {
    #####:   22:		return "\x1b[2m";
        -:   23:	}
        -:   24:}
        -:   25:
    #####:   26:byte *get_red() {
    #####:   27:	if (getenv("NO_COLOR") != NULL) {
    #####:   28:		return "";
        -:   29:	} else {
    #####:   30:		return "\x1b[31m";
        -:   31:	}
        -:   32:}
        -:   33:
    #####:   34:byte *get_bright_red() {
    #####:   35:	if (getenv("NO_COLOR") != NULL) {
    #####:   36:		return "";
        -:   37:	} else {
    #####:   38:		return "\x1b[91m";
        -:   39:	}
        -:   40:}
        -:   41:
        4:   42:byte *get_green() {
        4:   43:	if (getenv("NO_COLOR") != NULL) {
    #####:   44:		return "";
        -:   45:	} else {
        4:   46:		return "\x1b[32m";
        -:   47:	}
        -:   48:}
        -:   49:
    #####:   50:byte *get_yellow() {
    #####:   51:	if (getenv("NO_COLOR") != NULL) {
    #####:   52:		return "";
        -:   53:	} else {
    #####:   54:		return "\x1b[33m";
        -:   55:	}
        -:   56:}
        -:   57:
    #####:   58:byte *get_cyan() {
    #####:   59:	if (getenv("NO_COLOR") != NULL) {
    #####:   60:		return "";
        -:   61:	} else {
    #####:   62:		return "\x1b[36m";
        -:   63:	}
        -:   64:}
        -:   65:
    #####:   66:byte *get_magenta() {
    #####:   67:	if (getenv("NO_COLOR") != NULL) {
    #####:   68:		return "";
        -:   69:	} else {
    #####:   70:		return "\x1b[35m";
        -:   71:	}
        -:   72:}
        -:   73:
        4:   74:byte *get_blue() {
        4:   75:	if (getenv("NO_COLOR") != NULL) {
    #####:   76:		return "";
        -:   77:	} else {
        4:   78:		return "\x1b[34m";
        -:   79:	}
        -:   80:}
        -:   81:
        8:   82:byte *get_reset() {
        8:   83:	if (getenv("NO_COLOR") != NULL) {
    #####:   84:		return "";
        -:   85:	} else {
        8:   86:		return "\x1b[0m";
        -:   87:	}
        -:   88:}
        -:    0:Source:fam_err.c
        -:    0:Graph:fam_err.gcno
        -:    0:Data:fam_err.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:// #include <base/macro_util.h>
        -:   17:// #include <base/os.h>
        -:   18://  #include <base/print_util.h>
        -:   19://  #include <base/string.h>
        -:   20:
        -:   21:_Thread_local byte fam_err_last[ERR_LEN + 1] = {""};
        -:   22:
        -:   23:_Thread_local int64 fam_err = NoErrors;
        -:   24://_Thread_local Backtrace thread_local_bt__;
        -:   25:
    #####:   26:const byte *get_err() {
        -:   27:	// return strncpy(fam_err_last, FamErrText[fam_err], ERR_LEN);
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
    #####:   31:void print_err(const byte *text) {
        -:   32:	// println("{}: {}", FamErrText[fam_err], text);
        -:   33:	// backtrace_print(&thread_local_bt__);
    #####:   34:}
        -:   35:
        -:   36:// void do_backtrace_generate(Backtrace *bt) {
        -:   37:// if (env("CBACKTRACE") != NULL) {
        -:   38://  backtrace_generate(bt);
        -:   39://	}
        -:   40://}
        -:    0:Source:lock.c
        -:    0:Graph:lock.gcno
        -:    0:Data:lock.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/lock.h>
        -:   16:#include <base/macros.h>
        -:   17:#include <base/print_util.h>
        -:   18:
        -:   19:_Thread_local bool _lock_is_write__ = false;
        -:   20:
    #####:   21:Lock lock_create() {
    #####:   22:	return 0;
        -:   23:}
        2:   24:void lock_read(Lock *lock) {
        2:   25:	_lock_is_write__ = false;
        -:   26:	unsigned long long state;
        -:   27:	unsigned long long state_update;
        -:   28:	do {
        -:   29:		// get current state set the write_pending bit to false
        2:   30:		state = ALOAD(lock) & ~0x80000000ULL;
        -:   31:		// increment the read counter and add 1 to the sequence number (upper 32
        -:   32:		// bits)
        2:   33:		state_update = (state + 0x100000000ULL) + 1ULL;
        -:   34:		// while our target state (no change including sequence number and
        -:   35:		// write_pending != false, we spin)
        2:   36:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   37:}
        2:   38:void lock_write(Lock *lock) {
        2:   39:	_lock_is_write__ = true;
        -:   40:	unsigned long long state;
        -:   41:	unsigned long long state_update;
        -:   42:
        -:   43:	// first step, set write bit true indicating a writer is waiting
        -:   44:	// this lock should be obtained soon after the previous writer
        -:   45:	// is complete indicating to readers our desire to write
        -:   46:	// this avoids write starvation
        -:   47:	do {
        2:   48:		state = ALOAD(lock) & ~0x80000000ULL;
        2:   49:		state_update = (state + 0x100000000ULL) | 0x80000000ULL;
        2:   50:	} while (!CAS(lock, &state, state_update));
        -:   51:
        -:   52:	// second step, obtain total lock before proceeding
        -:   53:	do {
        -:   54:		// get current state. We will wait for the read count to go to 0.
        2:   55:		state = ALOAD(lock) & 0xFFFFFFFF80000000ULL;
        -:   56:		// set the updated value to set the write bit true and read count to 0,
        -:   57:		// increment the sequence number
        2:   58:		state_update = (state + 0x100000000ULL) & 0xFFFFFFFF80000000ULL;
        2:   59:	} while (!CAS_ACQUIRE(lock, &state, state_update));
        2:   60:}
        -:   61:
        4:   62:void lock_unlock(Lock *lock) {
        -:   63:	unsigned long long state;
        -:   64:	unsigned long long state_update;
        -:   65:	// check thread local write variable
        4:   66:	if (_lock_is_write__) {
        -:   67:		// writer
        -:   68:		do {
        -:   69:			// get current state
        2:   70:			state = ALOAD(lock);
        -:   71:			// unset the write bit and increment the sequence number
        2:   72:			state_update = (state + 0x100000000ULL) & ~0x80000000ULL;
        2:   73:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   74:	} else {
        -:   75:		// reader
        -:   76:		do {
        -:   77:			// get current state
        2:   78:			state = ALOAD(lock);
       2*:   79:			if ((state & 0x7FFFFFFF) == 0) panic("underflow!");
        -:   80:			// subtract 1 from the read count and increment the sequence number
        2:   81:			state_update = (state + 0x100000000ULL) - 1ULL;
        2:   82:		} while (!CAS_RELEASE(lock, &state, state_update));
        -:   83:	}
        4:   84:}
        -:   85:
        2:   86:void lock_guard_cleanup(LockGuard *l) {
        2:   87:	lock_unlock(l);
        2:   88:}
        -:   89:
        1:   90:LockGuard lock_guard_read(Lock l) {
        1:   91:	lock_read(&l);
        1:   92:	return l;
        -:   93:}
        1:   94:LockGuard lock_guard_write(Lock l) {
        1:   95:	lock_write(&l);
        1:   96:	return l;
        -:   97:}
        -:    0:Source:memmap.c
        -:    0:Graph:memmap.gcno
        -:    0:Data:memmap.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/memmap.h>
        -:   17:#include <base/osdef.h>
        -:   18:#include <base/print_util.h>
        -:   19:#include <sys/mman.h>
        -:   20:
        -:   21:void *memset(void *ptr, int x, size_t n);
        -:   22:size_t getpagesize();
        -:   23:
        -:   24:#define MEMMAP_ENTRY_PER_LEVEL 256
        -:   25:#define BITMAP_SIZE 32
        -:   26:#define MEMMAP_SHIFT 8
        -:   27:
        -:   28:_Thread_local int last_i = 0, last_j = 0, last_k = 0, last_l = 0;
        -:   29:
        -:   30:typedef struct MemMapImpl {
        -:   31:	byte ****data;
        -:   32:	unsigned int size;
        -:   33:} MemMapImpl;
        -:   34:
       21:   35:void __attribute__((constructor)) __memmap_check_sizes() {
        -:   36:	if (sizeof(MemMapImpl) != sizeof(MemMap))
        -:   37:		panic("sizeof(MemMapImpl) (%i) != sizeof(MemMap) (%i)",
        -:   38:			  sizeof(MemMapImpl), sizeof(MemMap));
       21:   39:}
        -:   40:
 12058974:   41:unsigned long long *memmap_itt_for(MemMapImpl *impl, int i, int j, int k,
        -:   42:								   int l) {
 12058974:   43:	bool mmapped = false;
 12058974:   44:	byte ****nullvalue1 = NULL;
 12058974:   45:	byte ****data1 = NULL;
        -:   46:	// load data
        -:   47:	do {
 12058974:   48:		if (mmapped) {
    #####:   49:			MUNMAP(data1, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        -:   50:		}
 12058974:   51:		data1 = ALOAD(&impl->data);
 12058974:   52:		if (data1 == NULL) {
        7:   53:			data1 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        7:   54:			if (data1 == NULL) {
    #####:   55:				SetErr(AllocErr);
    #####:   56:				return NULL;
        -:   57:			}
        7:   58:			mmapped = true;
        7:   59:			memset(data1, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte ***));
        -:   60:		} else
 12058967:   61:			break;
        7:   62:	} while (!CAS(&impl->data, &nullvalue1, data1));
        -:   63:
        -:   64:	// load second level
 12058974:   65:	byte ***nullvalue2 = NULL;
        -:   66:	byte ***data2;
 12058974:   67:	mmapped = false;
        -:   68:	do {
 12058974:   69:		if (mmapped) {
    #####:   70:			MUNMAP(data2, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        -:   71:		}
 12058974:   72:		data2 = ALOAD(&impl->data[i]);
 12058974:   73:		if (data2 == NULL) {
        7:   74:			data2 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        7:   75:			if (data2 == NULL) {
    #####:   76:				SetErr(AllocErr);
    #####:   77:				return NULL;
        -:   78:			}
        7:   79:			mmapped = true;
        7:   80:			memset(data2, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte **));
        -:   81:		} else
 12058967:   82:			break;
        7:   83:	} while (!CAS(&impl->data[i], &nullvalue2, data2));
        -:   84:
        -:   85:	// load third level
 12058974:   86:	byte **nullvalue3 = NULL;
        -:   87:	byte **data3;
 12058974:   88:	mmapped = false;
        -:   89:	do {
 12058974:   90:		if (mmapped) {
    #####:   91:			MUNMAP(data3, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:   92:		}
 12058974:   93:		data3 = ALOAD(&impl->data[i][j]);
 12058974:   94:		if (data3 == NULL) {
        7:   95:			data3 = MMAP(MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        7:   96:			if (data3 == NULL) {
    #####:   97:				SetErr(AllocErr);
    #####:   98:				return NULL;
        -:   99:			}
        7:  100:			mmapped = true;
        7:  101:			memset(data3, '\0', MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  102:		} else
 12058967:  103:			break;
        7:  104:	} while (!CAS(&impl->data[i][j], &nullvalue3, data3));
        -:  105:
        -:  106:	// load fourth and final level
 12058974:  107:	byte *nullvalue4 = NULL;
        -:  108:	byte *data4;
 12058974:  109:	mmapped = false;
        -:  110:	// add 32 bytes for the bitmap
        -:  111:	do {
 12058974:  112:		if (mmapped) {
    #####:  113:			MUNMAP(data4, MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  114:							  BITMAP_SIZE);
        -:  115:		}
 12058974:  116:		data4 = ALOAD(&impl->data[i][j][k]);
 12058974:  117:		if (data4 == NULL) {
      232:  118:			data4 = MMAP(MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  119:						 BITMAP_SIZE);
      232:  120:			if (data4 == NULL) {
    #####:  121:				SetErr(AllocErr);
    #####:  122:				return NULL;
        -:  123:			}
      232:  124:			mmapped = true;
      232:  125:			memset(data4, '\0',
      232:  126:				   MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  127:					   BITMAP_SIZE);
        -:  128:			// set Ptr=0 to allocated so we never return null / also reserve the
        -:  129:			// first value for other purposes
      232:  130:			if (i == 0 && j == 0 && k == 0) data4[0] = 0x3;
        -:  131:		} else
 12058742:  132:			break;
      232:  133:	} while (!CAS(&impl->data[i][j][k], &nullvalue4, data4));
        -:  134:
        -:  135:	// return the lth item at the begining of the data array (32 bytes reserved)
        -:  136:	// l is between 0-3.
 12058974:  137:	unsigned long long *ret = ((unsigned long long *)impl->data[i][j][k]) + l;
 12058974:  138:	return ret;
        -:  139:}
        -:  140:
118677291:  141:void *memmap_data(const MemMap *mm, Ptr ptr) {
118677291:  142:	const MemMapImpl *impl = (const MemMapImpl *)mm;
118677291:  143:	byte *block = impl->data[ptr >> (MEMMAP_SHIFT * 3)]
118677291:  144:							[(ptr >> (MEMMAP_SHIFT * 2)) & 0xFF]
118677291:  145:							[(ptr >> (MEMMAP_SHIFT)) & 0xFF];
118677291:  146:	return (byte *)(block + ((ptr & 0xFF) * impl->size + 32));
        -:  147:}
        7:  148:int memmap_init(MemMap *mm, unsigned int size) {
        7:  149:	MemMapImpl *impl = (MemMapImpl *)mm;
        7:  150:	impl->size = size;
        7:  151:	impl->data = NULL;
        7:  152:	return 0;
        -:  153:}
        -:  154:
 12058023:  155:Ptr memmap_allocate(MemMap *mm) {
 12058023:  156:	Ptr ret = null;
 12058023:  157:	MemMapImpl *impl = (MemMapImpl *)mm;
 12058023:  158:	int i = last_i, j = last_j, k = last_k, l = last_l;
        -:  159:	unsigned long long *current, desired, v;
        -:  160:
        -:  161:	do {
        -:  162:		loop {
        -:  163:			// load section of bitmap
 12058974:  164:			current = memmap_itt_for(impl, i, j, k, l);
12058974*:  165:			if (current == NULL) return null;
 12058974:  166:			v = ALOAD(current);
 12058974:  167:			if (v != ((unsigned long long)0) - 1) break;
        -:  168:			// l is 4 because 64 bits are used in the atomic load
        -:  169:			// the other 4 combinations cover all 256 entries
      951:  170:			if (++l >= 4) {
      236:  171:				l = 0;
      236:  172:				if (++k >= MEMMAP_ENTRY_PER_LEVEL) {
    #####:  173:					k = 0;
    #####:  174:					if (++j >= MEMMAP_ENTRY_PER_LEVEL) {
    #####:  175:						j = 0;
    #####:  176:						i++;
    #####:  177:						if (i == last_i) {
    #####:  178:							SetErr(CapacityExceeded);
    #####:  179:							return null;
        -:  180:						}
        -:  181:					}
        -:  182:				}
        -:  183:			}
        -:  184:		}
        -:  185:
        -:  186:		// find open bit
        -:  187:		int x;
 55884570:  188:		for (x = 0; (v & (0x1ULL << x)) != 0; x++);
 12058023:  189:		ret = (i << (MEMMAP_SHIFT * 3)) | (j << (2 * MEMMAP_SHIFT)) |
 12058023:  190:			  (k << MEMMAP_SHIFT) | (l << 6) | x;
        -:  191:		// set bit
 12058023:  192:		desired = v | (0x1ULL << x);
 12058023:  193:	} while (!CAS(current, &v, desired));
        -:  194:
 12058023:  195:	last_i = i;
 12058023:  196:	last_j = j;
 12058023:  197:	last_k = k;
 12058023:  198:	last_l = l;
        -:  199:
 12058023:  200:	return ret;
        -:  201:}
        -:  202:
 12055022:  203:void memmap_free(MemMap *mm, Ptr ptr) {
12055022*:  204:	if (ptr == null) panic("attempt to free null!");
12055022*:  205:	if (ptr == ptr_reserved) panic("attempt to free a reserved ptr = 1");
12055022*:  206:	if (mm == NULL) panic("invalid (null) memmap");
 12055022:  207:	MemMapImpl *impl = (MemMapImpl *)mm;
        -:  208:	unsigned long long nv, *v, vo;
        -:  209:	int i, j, k, l;
        -:  210:
 12055022:  211:	i = (ptr >> (MEMMAP_SHIFT * 3)) & 0xFF;
 12055022:  212:	j = (ptr >> (MEMMAP_SHIFT * 2)) & 0xFF;
 12055022:  213:	k = (ptr >> (MEMMAP_SHIFT)) & 0xFF;
 12055022:  214:	l = (ptr >> 6) & 0x3;
        -:  215:
        -:  216:	do {
 12055022:  217:		v = (unsigned long long *)impl->data[i][j][k] + l;
 12055022:  218:		vo = ALOAD((unsigned long long *)(v));
12055022*:  219:		if ((vo & (0x1ULL << (ptr & 0x3F))) == 0) panic("double free attempt!");
 12055022:  220:		nv = vo & ~(0x1ULL << (ptr & 0x3F));
 12055022:  221:	} while (!CAS(&*v, &vo, nv));
        -:  222:
 12055022:  223:	last_i = i;
 12055022:  224:	last_j = j;
 12055022:  225:	last_k = k;
 12055022:  226:	last_l = 0;
 12055022:  227:}
        -:  228:
        7:  229:void memmap_cleanup(MemMap *mm) {
        7:  230:	MemMapImpl *impl = (MemMapImpl *)mm;
       7*:  231:	if (impl->data == NULL) return;
       14:  232:	for (int i = 0; impl->data[i] && i < MEMMAP_ENTRY_PER_LEVEL; i++) {
       14:  233:		for (int j = 0; impl->data[i][j] && j < MEMMAP_ENTRY_PER_LEVEL; j++) {
      239:  234:			for (int k = 0; impl->data[i][j][k] && k < MEMMAP_ENTRY_PER_LEVEL;
      232:  235:				 k++) {
      232:  236:				MUNMAP(impl->data[i][j][k],
        -:  237:					   MEMMAP_ENTRY_PER_LEVEL * impl->size * sizeof(byte) +
        -:  238:						   BITMAP_SIZE);
      232:  239:				impl->data[i][j][k] = NULL;
        -:  240:			}
        7:  241:			MUNMAP(impl->data[i][j], MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  242:		}
        7:  243:		MUNMAP(impl->data[i], MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  244:	}
        7:  245:	MUNMAP(impl->data, MEMMAP_ENTRY_PER_LEVEL * sizeof(byte *));
        -:  246:}
        -:    0:Source:print_util.c
        -:    0:Graph:print_util.gcno
        -:    0:Data:print_util.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:
        -:   18:// currently using stdio, will move to write
        -:   19:#include <stdio.h>
        -:   20:
    #####:   21:void __attribute__((no_return)) panic(const char *fmt, ...) {
        -:   22:	char buf[1024];
        -:   23:	__builtin_va_list args;
    #####:   24:	print("Panic: ");
    #####:   25:	__builtin_va_start(args, fmt);
    #####:   26:	vfprintf(stderr, fmt, args);
        -:   27:	// vsnprintf(buf, 1024, fmt, args);
    #####:   28:	__builtin_va_end(args);
    #####:   29:	fprintf(stderr, "\n");
        -:   30:
    #####:   31:	exit(-1);
        -:   32:}
        -:   33:
        4:   34:int println(const char *fmt, ...) {
        -:   35:	__builtin_va_list args;
        4:   36:	__builtin_va_start(args, fmt);
        4:   37:	vfprintf(stderr, fmt, args);
        4:   38:	__builtin_va_end(args);
        4:   39:	fprintf(stderr, "\n");
        4:   40:	return 0;
        -:   41:}
        -:   42:
    #####:   43:int print(const char *fmt, ...) {
        -:   44:	__builtin_va_list args;
    #####:   45:	__builtin_va_start(args, fmt);
    #####:   46:	vfprintf(stderr, fmt, args);
    #####:   47:	__builtin_va_end(args);
    #####:   48:	return 0;
        -:   49:}
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/lock.h>
        -:   17:#include <base/macros.h>
        -:   18:#include <base/osdef.h>
        -:   19:#include <base/print_util.h>
        -:   20:#include <base/slabs.h>
        -:   21:
        -:   22:static Ptr RESERVED_PTR = 1;
        -:   23:
        -:   24:typedef struct SlabList {
        -:   25:	Ptr next;
        -:   26:	byte data[];
        -:   27:} SlabList;
        -:   28:
        -:   29:typedef struct SlabAllocatorImpl {
        -:   30:	MemMap mm;
        -:   31:	unsigned int slab_size;
        -:   32:	unsigned int max_free_slabs;
        -:   33:	unsigned int max_total_slabs;
        -:   34:	unsigned int free_size;
        -:   35:	unsigned int total_slabs;
        -:   36:	Ptr head;
        -:   37:	Ptr tail;
        -:   38:} SlabAllocatorImpl;
        -:   39:
       21:   40:void __attribute__((constructor)) __slabs_check_sizes() {
        -:   41:	if (sizeof(SlabAllocatorImpl) != sizeof(SlabAllocator))
        -:   42:		panic("sizeof(SlabAllocatorImpl) (%i) != sizeof(SlabAllocator) (%i)",
        -:   43:			  sizeof(SlabAllocatorImpl), sizeof(SlabAllocator));
       21:   44:}
        -:   45:
 97406414:   46:byte *slab_get(const SlabAllocator *sa, Ptr ptr) {
 97406414:   47:	if (sa == NULL || nil(ptr)) {
    21728:   48:		SetErr(IllegalArgument);
    21728:   49:		return NULL;
        -:   50:	}
 97384686:   51:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
 97384686:   52:	SlabList *sl = memmap_data(&impl->mm, ptr);
 97384686:   53:	if (sl == NULL) {
    #####:   54:		SetErr(IllegalState);
    #####:   55:		return NULL;
        -:   56:	}
 97384686:   57:	return sl->data;
        -:   58:}
        -:   59:
    55019:   60:Ptr slab_allocator_grow(SlabAllocatorImpl *impl) {
    55019:   61:	if (AADD(&impl->total_slabs, 1) > impl->max_total_slabs) {
    #####:   62:		ASUB(&impl->total_slabs, 1);
    #####:   63:		SetErr(CapacityExceeded);
    #####:   64:		return null;
        -:   65:	}
    55019:   66:	Ptr ret = memmap_allocate(&impl->mm);
   55019*:   67:	if (nil(ret)) return null;
    55019:   68:	SlabList *sl = memmap_data(&impl->mm, ret);
   55019*:   69:	if (sl == NULL) return null;
    55019:   70:	sl->next = ptr_reserved;
        -:   71:
    55019:   72:	return ret;
        -:   73:}
        -:   74:
        5:   75:int slab_allocator_init(SlabAllocator *sa, unsigned int slab_size,
        -:   76:						unsigned long long max_free_slabs,
        -:   77:						unsigned long long max_total_slabs) {
        5:   78:	if (sa == NULL || slab_size == 0 || max_free_slabs < 5 ||
        -:   79:		max_total_slabs < 5) {
    #####:   80:		SetErr(IllegalArgument);
    #####:   81:		return -1;
        -:   82:	}
        5:   83:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:   84:
       5*:   85:	if (memmap_init(&impl->mm, slab_size + sizeof(SlabList))) return -1;
        5:   86:	ASTORE(&impl->free_size, 1);
        5:   87:	ASTORE(&impl->total_slabs, 0);
        5:   88:	impl->slab_size = slab_size;
        5:   89:	impl->max_free_slabs = max_free_slabs;
        5:   90:	impl->max_total_slabs = max_total_slabs;
        -:   91:
        5:   92:	Ptr ptr = slab_allocator_grow(impl);
        5:   93:	if (ptr == null) {
    #####:   94:		return -1;
        -:   95:	}
        -:   96:
        5:   97:	SlabList *sl = memmap_data(&impl->mm, ptr);
        5:   98:	if (sl == NULL) {
    #####:   99:		SetErr(IllegalState);
    #####:  100:		return -1;
        -:  101:	}
        5:  102:	sl->next = null;
        5:  103:	impl->head = impl->tail = ptr;
        -:  104:
        5:  105:	return 0;
        -:  106:}
        -:  107:
        5:  108:void slab_allocator_cleanup(SlabAllocator *sa) {
       5*:  109:	if (sa == NULL) panic("slab_allocator_cleanup with sa = NULL!");
        -:  110:
        5:  111:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        5:  112:	Ptr itt = impl->head;
    55024:  113:	while (itt) {
    55019:  114:		Ptr to_delete = itt;
    55019:  115:		SlabList *sl = memmap_data(&impl->mm, itt);
   55019*:  116:		if (sl == NULL) panic("slab_allocator_cleanup: memmap_data ret NULL!");
    55019:  117:		itt = sl->next;
    55019:  118:		memmap_free(&impl->mm, to_delete);
        -:  119:	}
        -:  120:
        5:  121:	memmap_cleanup(&impl->mm);
        5:  122:}
        -:  123:
  5307894:  124:Ptr slab_allocator_allocate(SlabAllocator *sa) {
  5307894:  125:	if (sa == NULL) {
    #####:  126:		SetErr(IllegalArgument);
    #####:  127:		return null;
        -:  128:	}
  5307894:  129:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:  130:	Ptr head, tail, next, ret;
    #####:  131:	loop {
  5307894:  132:		head = impl->head;
  5307894:  133:		tail = impl->tail;
  5307894:  134:		SlabList *sl = memmap_data(&impl->mm, head);
  5307894:  135:		if (sl == NULL) {
    #####:  136:			SetErr(IllegalState);
    #####:  137:			return null;
        -:  138:		}
  5307894:  139:		next = sl->next;
  5307894:  140:		if (head == impl->head) {
  5307894:  141:			if (head == tail) {
    55014:  142:				if (next == null) {
    55014:  143:					return slab_allocator_grow(impl);
        -:  144:				}
    #####:  145:				CAS_SEQ(&impl->tail, &tail, next);
        -:  146:			} else {
  5252880:  147:				ret = head;
  5252880:  148:				if (CAS_SEQ(&impl->head, &head, next)) break;
        -:  149:			}
        -:  150:		}
        -:  151:	}
        -:  152:
  5252880:  153:	ASUB(&impl->free_size, 1);
  5252880:  154:	SlabList *sl = memmap_data(&impl->mm, ret);
  5252880:  155:	if (sl == NULL) {
    #####:  156:		SetErr(IllegalState);
    #####:  157:		return null;
        -:  158:	}
  5252880:  159:	sl->next = ptr_reserved;
  5252880:  160:	return ret;
        -:  161:}
  5307894:  162:void slab_allocator_free(SlabAllocator *sa, Ptr ptr) {
 5307894*:  163:	if (sa == NULL) panic("slab_allocator_free with sa = NULL!");
  5307894:  164:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        -:  165:
  5307894:  166:	SlabList *slptr = memmap_data(&impl->mm, ptr);
 5307894*:  167:	if (slptr == NULL) panic("cannot retrieve data for a freed ptr!");
        -:  168:
  5307894:  169:	if (!CAS(&slptr->next, &RESERVED_PTR, null))
    #####:  170:		panic("Double free attempt! ptr=%u", ptr);
  5307894:  171:	if (AADD(&impl->free_size, 1) > impl->max_free_slabs) {
    #####:  172:		memmap_free(&impl->mm, ptr);
    #####:  173:		ASUB(&impl->total_slabs, 1);
    #####:  174:		return;
        -:  175:	}
        -:  176:
        -:  177:	Ptr tail, next;
        -:  178:
    #####:  179:	loop {
  5307894:  180:		tail = impl->tail;
  5307894:  181:		SlabList *sltail = memmap_data(&impl->mm, tail);
 5307894*:  182:		if (sltail == NULL) panic("cannot retrieve data for tail!");
  5307894:  183:		next = sltail->next;
  5307894:  184:		if (tail == impl->tail) {
  5307894:  185:			if (next == null) {
  5307894:  186:				if (CAS_SEQ(&sltail->next, &next, ptr)) {
  5307894:  187:					CAS_SEQ(&impl->tail, &tail, ptr);
  5307894:  188:					break;
        -:  189:				}
        -:  190:			} else {
    #####:  191:				CAS_SEQ(&impl->tail, &tail, next);
        -:  192:			}
        -:  193:		}
        -:  194:	}
        -:  195:}
        -:  196:
        -:  197:#ifdef TEST
        1:  198:unsigned long long slab_allocator_free_size(SlabAllocator *sa) {
        1:  199:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        1:  200:	return ALOAD(&impl->free_size);
        -:  201:}
        -:  202:
        1:  203:unsigned long long slab_allocator_total_slabs(SlabAllocator *sa) {
        1:  204:	SlabAllocatorImpl *impl = (SlabAllocatorImpl *)sa;
        1:  205:	return ALOAD(&impl->total_slabs);
        -:  206:}
        -:  207:#endif	// TEST
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/types.h>
        -:   18:
       21:   19:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   20:#if !defined(__x86_64__) && !defined(_M_X64) && !defined(__aarch64__)
        -:   21:	panic("Supported architectures: __x86_64__, _M_X64, and __aarch64__");
        -:   22:#endif	// arch
        -:   23:
        -:   24:	// check size_t
        -:   25:	if (__SIZEOF_SIZE_T__ != 8) panic("size_t must be 8 bytes. Invalid arch!");
        -:   26:	// check primitive types
        -:   27:	if (sizeof(byte) != 1) panic("byte must be 1 byte. Invalid arch!");
        -:   28:
        -:   29:	if (sizeof(int64) != 8) panic("must be 8 bytes. Invalid arch!");
        -:   30:
        -:   31:	if (sizeof(int) != 4) panic("int must be 4 bytes. Invalid arch!");
        -:   32:
        -:   33:	if (sizeof(float64) != 8) panic("float64 must be 8 bytes. Invalid arch!");
        -:   34:
        -:   35:	if (sizeof(bool) != 1) panic("bool must be 1 byte. Invalid arch!");
        -:   36:
        -:   37:	// little endian check
       21:   38:	int test = 0x1;
       21:   39:	if (*(byte *)&test != 0x1) {
    #####:   40:		panic("Big endian is not supported!");
        -:   41:	}
       21:   42:}
        -:    0:Source:util.c
        -:    0:Graph:util.gcno
        -:    0:Data:util.gcda
        -:    0:Runs:21
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/types.h>
        -:   16:#include <base/util.h>
        -:   17:
     5010:   18:void *mymemcpy(void *dst, const void *src, unsigned long long n) {
     5010:   19:	byte *bsrc = (byte *)src;
     5010:   20:	byte *bdst = (byte *)dst;
        -:   21:
    85157:   22:	for (unsigned long long i = 0; i < n; i++) bdst[i] = bsrc[i];
     5010:   23:	return bdst;
        -:   24:}
        -:   25:
        1:   26:void *mymemset(void *ptr, byte x, unsigned long long n) {
        6:   27:	for (unsigned long long i = 0; i < n; i++) ((byte *)ptr)[i] = x;
        1:   28:	return ptr;
        -:   29:}
        -:    0:Source:aes.c
        -:    0:Graph:aes.gcno
        -:    0:Data:aes.gcda
        -:    0:Runs:7
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/types.h>
        -:   16:
        -:   17:/*
        -:   18:
        -:   19:This is an implementation of the AES algorithm, specifically ECB, CTR and CBC
        -:   20:mode. Block size can be chosen in aes.h - available choices are AES128, AES192,
        -:   21:AES256.
        -:   22:
        -:   23:The implementation is verified against the test vectors in:
        -:   24:  National Institute of Standards and Technology Special Publication 800-38A
        -:   25:2001 ED
        -:   26:
        -:   27:ECB-AES128
        -:   28:----------
        -:   29:
        -:   30:  plain-text:
        -:   31:	6bc1bee22e409f96e93d7e117393172a
        -:   32:	ae2d8a571e03ac9c9eb76fac45af8e51
        -:   33:	30c81c46a35ce411e5fbc1191a0a52ef
        -:   34:	f69f2445df4f9b17ad2b417be66c3710
        -:   35:
        -:   36:  key:
        -:   37:	2b7e151628aed2a6abf7158809cf4f3c
        -:   38:
        -:   39:  resulting cipher
        -:   40:	3ad77bb40d7a3660a89ecaf32466ef97
        -:   41:	f5d3d58503b9699de785895a96fdbaaf
        -:   42:	43b1cd7f598ece23881b00e3ed030688
        -:   43:	7b0c785e27e8ad3f8223207104725dd4
        -:   44:
        -:   45:
        -:   46:NOTE:   String length must be evenly divisible by 16byte (str_len % 16 == 0)
        -:   47:		You should pad the end of the string with zeros if this is not the case.
        -:   48:		For AES192/256 the key size is proportionally larger.
        -:   49:
        -:   50:*/
        -:   51:
        -:   52:/*****************************************************************************/
        -:   53:/* Includes:                                                                 */
        -:   54:/*****************************************************************************/
        -:   55:#include <base/util.h>
        -:   56:#include <crypto/aes.h>
        -:   57:#define memcpy(...) mymemcpy(__VA_ARGS__)
        -:   58:
        -:   59:/*****************************************************************************/
        -:   60:/* Defines:                                                                  */
        -:   61:/*****************************************************************************/
        -:   62:// The number of columns comprising a state in AES. This is a constant in AES.
        -:   63:// Value=4
        -:   64:#define Nb 4
        -:   65:
        -:   66:#if defined(AES256) && (AES256 == 1)
        -:   67:#define Nk 8
        -:   68:#define Nr 14
        -:   69:#elif defined(AES192) && (AES192 == 1)
        -:   70:#define Nk 6
        -:   71:#define Nr 12
        -:   72:#else
        -:   73:#define Nk 4   // The number of 32 bit words in a key.
        -:   74:#define Nr 10  // The number of rounds in AES Cipher.
        -:   75:#endif
        -:   76:
        -:   77:// jcallan@github points out that declaring Multiply as a function
        -:   78:// reduces code size considerably with the Keil ARM compiler.
        -:   79:// See this link for more information:
        -:   80:// https://github.com/kokke/tiny-AES-C/pull/3
        -:   81:#ifndef MULTIPLY_AS_A_FUNCTION
        -:   82:#define MULTIPLY_AS_A_FUNCTION 0
        -:   83:#endif
        -:   84:
        -:   85:/*****************************************************************************/
        -:   86:/* Private variables:                                                        */
        -:   87:/*****************************************************************************/
        -:   88:// state - array holding the intermediate results during decryption.
        -:   89:typedef byte state_t[4][4];
        -:   90:
        -:   91:// The lookup-tables are marked const so they can be placed in read-only storage
        -:   92:// instead of RAM The numbers below can be computed dynamically trading ROM for
        -:   93:// RAM - This can be useful in (embedded) bootloader applications, where ROM is
        -:   94:// often limited.
        -:   95:static const byte sbox[256] = {
        -:   96:	// 0     1    2      3     4    5     6     7      8    9     A      B    C
        -:   97:	// D     E     F
        -:   98:	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,
        -:   99:	0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
        -:  100:	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,
        -:  101:	0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        -:  102:	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
        -:  103:	0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
        -:  104:	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,
        -:  105:	0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        -:  106:	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,
        -:  107:	0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
        -:  108:	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        -:  109:	0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        -:  110:	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
        -:  111:	0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
        -:  112:	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
        -:  113:	0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        -:  114:	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,
        -:  115:	0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
        -:  116:	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
        -:  117:	0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        -:  118:	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
        -:  119:	0xb0, 0x54, 0xbb, 0x16};
        -:  120:
        -:  121:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  122:static const byte rsbox[256] = {
        -:  123:	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,
        -:  124:	0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
        -:  125:	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,
        -:  126:	0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        -:  127:	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49,
        -:  128:	0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
        -:  129:	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,
        -:  130:	0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        -:  131:	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,
        -:  132:	0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
        -:  133:	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
        -:  134:	0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        -:  135:	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,
        -:  136:	0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
        -:  137:	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,
        -:  138:	0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        -:  139:	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59,
        -:  140:	0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
        -:  141:	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,
        -:  142:	0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        -:  143:	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,
        -:  144:	0x55, 0x21, 0x0c, 0x7d};
        -:  145:#endif
        -:  146:
        -:  147:// The round constant word array, Rcon[i], contains the values given by
        -:  148:// x to the power (i-1) being powers of x (x is denoted as {02}) in the field
        -:  149:// GF(2^8)
        -:  150:static const byte Rcon[11] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10,
        -:  151:							  0x20, 0x40, 0x80, 0x1b, 0x36};
        -:  152:
        -:  153:/*
        -:  154: * Jordan Goulder points out in PR #12
        -:  155: * (https://github.com/kokke/tiny-AES-C/pull/12), that you can remove most of
        -:  156: * the elements in the Rcon array, because they are unused.
        -:  157: *
        -:  158: * From Wikipedia's article on the Rijndael key schedule @
        -:  159: * https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon
        -:  160: *
        -:  161: * "Only the first some of these constants are actually used – up to rcon[10]
        -:  162: * for AES-128 (as 11 round keys are needed), up to rcon[8] for AES-192, up to
        -:  163: * rcon[7] for AES-256. rcon[0] is not used in AES algorithm."
        -:  164: */
        -:  165:
        -:  166:/*****************************************************************************/
        -:  167:/* Private functions:                                                        */
        -:  168:/*****************************************************************************/
        -:  169:/*
        -:  170:static byte getSBoxValue(byte num)
        -:  171:{
        -:  172:  return sbox[num];
        -:  173:}
        -:  174:*/
        -:  175:#define getSBoxValue(num) (sbox[(num)])
        -:  176:
        -:  177:// This function produces Nb(Nr+1) round keys. The round keys are used in each
        -:  178:// round to decrypt the states.
        8:  179:static void KeyExpansion(byte *RoundKey, const byte *Key) {
        -:  180:	unsigned i, j, k;
        -:  181:	byte tempa[4];	// Used for the column/row operations
        -:  182:
        -:  183:	// The first round key is the key itself.
       72:  184:	for (i = 0; i < Nk; ++i) {
       64:  185:		RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
       64:  186:		RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
       64:  187:		RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
       64:  188:		RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
        -:  189:	}
        -:  190:
        -:  191:	// All other round keys are found from the previous round keys.
      424:  192:	for (i = Nk; i < Nb * (Nr + 1); ++i) {
        -:  193:		{
      416:  194:			k = (i - 1) * 4;
      416:  195:			tempa[0] = RoundKey[k + 0];
      416:  196:			tempa[1] = RoundKey[k + 1];
      416:  197:			tempa[2] = RoundKey[k + 2];
      416:  198:			tempa[3] = RoundKey[k + 3];
        -:  199:		}
        -:  200:
      416:  201:		if (i % Nk == 0) {
        -:  202:			// This function shifts the 4 bytes in a word to the left once.
        -:  203:			// [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
        -:  204:
        -:  205:			// Function RotWord()
        -:  206:			{
       56:  207:				const byte bytetmp = tempa[0];
       56:  208:				tempa[0] = tempa[1];
       56:  209:				tempa[1] = tempa[2];
       56:  210:				tempa[2] = tempa[3];
       56:  211:				tempa[3] = bytetmp;
        -:  212:			}
        -:  213:
        -:  214:			// SubWord() is a function that takes a four-byte input word and
        -:  215:			// applies the S-box to each of the four bytes to produce an output
        -:  216:			// word.
        -:  217:
        -:  218:			// Function Subword()
        -:  219:			{
       56:  220:				tempa[0] = getSBoxValue(tempa[0]);
       56:  221:				tempa[1] = getSBoxValue(tempa[1]);
       56:  222:				tempa[2] = getSBoxValue(tempa[2]);
       56:  223:				tempa[3] = getSBoxValue(tempa[3]);
        -:  224:			}
        -:  225:
       56:  226:			tempa[0] = tempa[0] ^ Rcon[i / Nk];
        -:  227:		}
        -:  228:#if defined(AES256) && (AES256 == 1)
      416:  229:		if (i % Nk == 4) {
        -:  230:			// Function Subword()
        -:  231:			{
       48:  232:				tempa[0] = getSBoxValue(tempa[0]);
       48:  233:				tempa[1] = getSBoxValue(tempa[1]);
       48:  234:				tempa[2] = getSBoxValue(tempa[2]);
       48:  235:				tempa[3] = getSBoxValue(tempa[3]);
        -:  236:			}
        -:  237:		}
        -:  238:#endif
      416:  239:		j = i * 4;
      416:  240:		k = (i - Nk) * 4;
      416:  241:		RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
      416:  242:		RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
      416:  243:		RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
      416:  244:		RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
        -:  245:	}
        8:  246:}
        -:  247:
    #####:  248:void AES_init_ctx(struct AES_ctx *ctx, const byte *key) {
    #####:  249:	KeyExpansion(ctx->RoundKey, key);
    #####:  250:}
        -:  251:#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
        8:  252:void AES_init_ctx_iv(struct AES_ctx *ctx, const byte *key, const byte *iv) {
        8:  253:	KeyExpansion(ctx->RoundKey, key);
        8:  254:	memcpy(ctx->Iv, iv, AES_BLOCKLEN);
        8:  255:}
    #####:  256:void AES_ctx_set_iv(struct AES_ctx *ctx, const byte *iv) {
    #####:  257:	memcpy(ctx->Iv, iv, AES_BLOCKLEN);
    #####:  258:}
        -:  259:#endif
        -:  260:
        -:  261:// This function adds the round key to state.
        -:  262:// The round key is added to the state by an XOR function.
    75015:  263:static void AddRoundKey(byte round, state_t *state, const byte *RoundKey) {
        -:  264:	byte i, j;
   375075:  265:	for (i = 0; i < 4; ++i) {
  1500300:  266:		for (j = 0; j < 4; ++j) {
  1200240:  267:			(*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
        -:  268:		}
        -:  269:	}
    75015:  270:}
        -:  271:
        -:  272:// The SubBytes Function Substitutes the values in the
        -:  273:// state matrix with values in an S-box.
    70014:  274:static void SubBytes(state_t *state) {
        -:  275:	byte i, j;
   350070:  276:	for (i = 0; i < 4; ++i) {
  1400280:  277:		for (j = 0; j < 4; ++j) {
  1120224:  278:			(*state)[j][i] = getSBoxValue((*state)[j][i]);
        -:  279:		}
        -:  280:	}
    70014:  281:}
        -:  282:
        -:  283:// The ShiftRows() function shifts the rows in the state to the left.
        -:  284:// Each row is shifted with different offset.
        -:  285:// Offset = Row number. So the first row is not shifted.
    70014:  286:static void ShiftRows(state_t *state) {
        -:  287:	byte temp;
        -:  288:
        -:  289:	// Rotate first row 1 columns to left
    70014:  290:	temp = (*state)[0][1];
    70014:  291:	(*state)[0][1] = (*state)[1][1];
    70014:  292:	(*state)[1][1] = (*state)[2][1];
    70014:  293:	(*state)[2][1] = (*state)[3][1];
    70014:  294:	(*state)[3][1] = temp;
        -:  295:
        -:  296:	// Rotate second row 2 columns to left
    70014:  297:	temp = (*state)[0][2];
    70014:  298:	(*state)[0][2] = (*state)[2][2];
    70014:  299:	(*state)[2][2] = temp;
        -:  300:
    70014:  301:	temp = (*state)[1][2];
    70014:  302:	(*state)[1][2] = (*state)[3][2];
    70014:  303:	(*state)[3][2] = temp;
        -:  304:
        -:  305:	// Rotate third row 3 columns to left
    70014:  306:	temp = (*state)[0][3];
    70014:  307:	(*state)[0][3] = (*state)[3][3];
    70014:  308:	(*state)[3][3] = (*state)[2][3];
    70014:  309:	(*state)[2][3] = (*state)[1][3];
    70014:  310:	(*state)[1][3] = temp;
    70014:  311:}
        -:  312:
  1040208:  313:static byte xtime(byte x) {
  1040208:  314:	return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
        -:  315:}
        -:  316:
        -:  317:// MixColumns function mixes the columns of the state matrix
    65013:  318:static void MixColumns(state_t *state) {
        -:  319:	byte i;
        -:  320:	byte Tmp, Tm, t;
   325065:  321:	for (i = 0; i < 4; ++i) {
   260052:  322:		t = (*state)[i][0];
   260052:  323:		Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
   260052:  324:		Tm = (*state)[i][0] ^ (*state)[i][1];
   260052:  325:		Tm = xtime(Tm);
   260052:  326:		(*state)[i][0] ^= Tm ^ Tmp;
   260052:  327:		Tm = (*state)[i][1] ^ (*state)[i][2];
   260052:  328:		Tm = xtime(Tm);
   260052:  329:		(*state)[i][1] ^= Tm ^ Tmp;
   260052:  330:		Tm = (*state)[i][2] ^ (*state)[i][3];
   260052:  331:		Tm = xtime(Tm);
   260052:  332:		(*state)[i][2] ^= Tm ^ Tmp;
   260052:  333:		Tm = (*state)[i][3] ^ t;
   260052:  334:		Tm = xtime(Tm);
   260052:  335:		(*state)[i][3] ^= Tm ^ Tmp;
        -:  336:	}
    65013:  337:}
        -:  338:
        -:  339:// Multiply is used to multiply numbers in the field GF(2^8)
        -:  340:// Note: The last call to xtime() is unneeded, but often ends up generating a
        -:  341:// smaller binary
        -:  342://       The compiler seems to be able to vectorize the operation better this
        -:  343://       way. See https://github.com/kokke/tiny-AES-c/pull/34
        -:  344:#if MULTIPLY_AS_A_FUNCTION
        -:  345:static byte Multiply(byte x, byte y) {
        -:  346:	return (((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^
        -:  347:			((y >> 2 & 1) * xtime(xtime(x))) ^
        -:  348:			((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^
        -:  349:			((y >> 4 & 1) *
        -:  350:			 xtime(xtime(xtime(
        -:  351:				 xtime(x)))))); /* this last call to xtime() can be omitted */
        -:  352:}
        -:  353:#else
        -:  354:#define Multiply(x, y)                           \
        -:  355:	(((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ \
        -:  356:	 ((y >> 2 & 1) * xtime(xtime(x))) ^          \
        -:  357:	 ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^   \
        -:  358:	 ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x))))))
        -:  359:
        -:  360:#endif
        -:  361:
        -:  362:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  363:/*
        -:  364:static byte getSBoxInvert(byte num)
        -:  365:{
        -:  366:  return rsbox[num];
        -:  367:}
        -:  368:*/
        -:  369:#define getSBoxInvert(num) (rsbox[(num)])
        -:  370:
        -:  371:// MixColumns function mixes the columns of the state matrix.
        -:  372:// The method used to multiply may be difficult to understand for the
        -:  373:// inexperienced. Please use the references to gain more information.
    #####:  374:static void InvMixColumns(state_t *state) {
        -:  375:	int i;
        -:  376:	byte a, b, c, d;
    #####:  377:	for (i = 0; i < 4; ++i) {
    #####:  378:		a = (*state)[i][0];
    #####:  379:		b = (*state)[i][1];
    #####:  380:		c = (*state)[i][2];
    #####:  381:		d = (*state)[i][3];
        -:  382:
    #####:  383:		(*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^
    #####:  384:						 Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    #####:  385:		(*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^
    #####:  386:						 Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    #####:  387:		(*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^
    #####:  388:						 Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    #####:  389:		(*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^
    #####:  390:						 Multiply(c, 0x09) ^ Multiply(d, 0x0e);
        -:  391:	}
    #####:  392:}
        -:  393:
        -:  394:// The SubBytes Function Substitutes the values in the
        -:  395:// state matrix with values in an S-box.
    #####:  396:static void InvSubBytes(state_t *state) {
        -:  397:	byte i, j;
    #####:  398:	for (i = 0; i < 4; ++i) {
    #####:  399:		for (j = 0; j < 4; ++j) {
    #####:  400:			(*state)[j][i] = getSBoxInvert((*state)[j][i]);
        -:  401:		}
        -:  402:	}
    #####:  403:}
        -:  404:
    #####:  405:static void InvShiftRows(state_t *state) {
        -:  406:	byte temp;
        -:  407:
        -:  408:	// Rotate first row 1 columns to right
    #####:  409:	temp = (*state)[3][1];
    #####:  410:	(*state)[3][1] = (*state)[2][1];
    #####:  411:	(*state)[2][1] = (*state)[1][1];
    #####:  412:	(*state)[1][1] = (*state)[0][1];
    #####:  413:	(*state)[0][1] = temp;
        -:  414:
        -:  415:	// Rotate second row 2 columns to right
    #####:  416:	temp = (*state)[0][2];
    #####:  417:	(*state)[0][2] = (*state)[2][2];
    #####:  418:	(*state)[2][2] = temp;
        -:  419:
    #####:  420:	temp = (*state)[1][2];
    #####:  421:	(*state)[1][2] = (*state)[3][2];
    #####:  422:	(*state)[3][2] = temp;
        -:  423:
        -:  424:	// Rotate third row 3 columns to right
    #####:  425:	temp = (*state)[0][3];
    #####:  426:	(*state)[0][3] = (*state)[1][3];
    #####:  427:	(*state)[1][3] = (*state)[2][3];
    #####:  428:	(*state)[2][3] = (*state)[3][3];
    #####:  429:	(*state)[3][3] = temp;
    #####:  430:}
        -:  431:#endif	// #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  432:
        -:  433:// Cipher is the main function that encrypts the PlainText.
     5001:  434:static void Cipher(state_t *state, const byte *RoundKey) {
     5001:  435:	byte round = 0;
        -:  436:
        -:  437:	// Add the First round key to the state before starting the rounds.
     5001:  438:	AddRoundKey(0, state, RoundKey);
        -:  439:
        -:  440:	// There will be Nr rounds.
        -:  441:	// The first Nr-1 rounds are identical.
        -:  442:	// These Nr rounds are executed in the loop below.
        -:  443:	// Last one without MixColumns()
    70014:  444:	for (round = 1;; ++round) {
    70014:  445:		SubBytes(state);
    70014:  446:		ShiftRows(state);
    70014:  447:		if (round == Nr) {
     5001:  448:			break;
        -:  449:		}
    65013:  450:		MixColumns(state);
    65013:  451:		AddRoundKey(round, state, RoundKey);
        -:  452:	}
        -:  453:	// Add round key to last round
     5001:  454:	AddRoundKey(Nr, state, RoundKey);
     5001:  455:}
        -:  456:
        -:  457:#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
    #####:  458:static void InvCipher(state_t *state, const byte *RoundKey) {
    #####:  459:	byte round = 0;
        -:  460:
        -:  461:	// Add the First round key to the state before starting the rounds.
    #####:  462:	AddRoundKey(Nr, state, RoundKey);
        -:  463:
        -:  464:	// There will be Nr rounds.
        -:  465:	// The first Nr-1 rounds are identical.
        -:  466:	// These Nr rounds are executed in the loop below.
        -:  467:	// Last one without InvMixColumn()
    #####:  468:	for (round = (Nr - 1);; --round) {
    #####:  469:		InvShiftRows(state);
    #####:  470:		InvSubBytes(state);
    #####:  471:		AddRoundKey(round, state, RoundKey);
    #####:  472:		if (round == 0) {
    #####:  473:			break;
        -:  474:		}
    #####:  475:		InvMixColumns(state);
        -:  476:	}
    #####:  477:}
        -:  478:#endif	// #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
        -:  479:
        -:  480:/*****************************************************************************/
        -:  481:/* Public functions:                                                         */
        -:  482:/*****************************************************************************/
        -:  483:#if defined(ECB) && (ECB == 1)
        -:  484:
    #####:  485:void AES_ECB_encrypt(const struct AES_ctx *ctx, byte *buf) {
        -:  486:	// The next function call encrypts the PlainText with the Key using AES
        -:  487:	// algorithm.
    #####:  488:	Cipher((state_t *)buf, ctx->RoundKey);
    #####:  489:}
        -:  490:
    #####:  491:void AES_ECB_decrypt(const struct AES_ctx *ctx, byte *buf) {
        -:  492:	// The next function call decrypts the PlainText with the Key using AES
        -:  493:	// algorithm.
    #####:  494:	InvCipher((state_t *)buf, ctx->RoundKey);
    #####:  495:}
        -:  496:
        -:  497:#endif	// #if defined(ECB) && (ECB == 1)
        -:  498:
        -:  499:#if defined(CBC) && (CBC == 1)
        -:  500:
    #####:  501:static void XorWithIv(byte *buf, const byte *Iv) {
        -:  502:	byte i;
    #####:  503:	for (i = 0; i < AES_BLOCKLEN;
    #####:  504:		 ++i)  // The block in AES is always 128bit no matter the key size
        -:  505:	{
    #####:  506:		buf[i] ^= Iv[i];
        -:  507:	}
    #####:  508:}
        -:  509:
    #####:  510:void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, byte *buf,
        -:  511:							unsigned long long length) {
        -:  512:	unsigned long long i;
    #####:  513:	byte *Iv = ctx->Iv;
    #####:  514:	for (i = 0; i < length; i += AES_BLOCKLEN) {
    #####:  515:		XorWithIv(buf, Iv);
    #####:  516:		Cipher((state_t *)buf, ctx->RoundKey);
    #####:  517:		Iv = buf;
    #####:  518:		buf += AES_BLOCKLEN;
        -:  519:	}
        -:  520:	/* store Iv in ctx for next call */
    #####:  521:	memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
    #####:  522:}
        -:  523:
    #####:  524:void AES_CBC_decrypt_buffer(struct AES_ctx *ctx, byte *buf,
        -:  525:							unsigned long long length) {
        -:  526:	unsigned long long i;
        -:  527:	byte storeNextIv[AES_BLOCKLEN];
    #####:  528:	for (i = 0; i < length; i += AES_BLOCKLEN) {
    #####:  529:		memcpy(storeNextIv, buf, AES_BLOCKLEN);
    #####:  530:		InvCipher((state_t *)buf, ctx->RoundKey);
    #####:  531:		XorWithIv(buf, ctx->Iv);
    #####:  532:		memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
    #####:  533:		buf += AES_BLOCKLEN;
        -:  534:	}
    #####:  535:}
        -:  536:
        -:  537:#endif	// #if defined(CBC) && (CBC == 1)
        -:  538:
        -:  539:#if defined(CTR) && (CTR == 1)
        -:  540:
        -:  541:/* Symmetrical operation: same function for encrypting as for decrypting. Note
        -:  542: * any IV/nonce should never be reused with the same key */
     5001:  543:void AES_CTR_xcrypt_buffer(struct AES_ctx *ctx, byte *buf,
        -:  544:						   unsigned long long length) {
        -:  545:	byte buffer[AES_BLOCKLEN];
        -:  546:
        -:  547:	unsigned long long i;
        -:  548:	int bi;
    25009:  549:	for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi) {
    20008:  550:		if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
        -:  551:		{
     5001:  552:			memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
     5001:  553:			Cipher((state_t *)buffer, ctx->RoundKey);
        -:  554:
        -:  555:			/* Increment Iv and handle overflow */
     5020:  556:			for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi) {
        -:  557:				/* inc will overflow */
     5020:  558:				if (ctx->Iv[bi] == 255) {
       19:  559:					ctx->Iv[bi] = 0;
       19:  560:					continue;
        -:  561:				}
     5001:  562:				ctx->Iv[bi] += 1;
     5001:  563:				break;
        -:  564:			}
     5001:  565:			bi = 0;
        -:  566:		}
        -:  567:
    20008:  568:		buf[i] = (buf[i] ^ buffer[bi]);
        -:  569:	}
     5001:  570:}
        -:  571:
        -:  572:#endif	// #if defined(CTR) && (CTR == 1)
        -:    0:Source:cpsrng.c
        -:    0:Graph:cpsrng.gcno
        -:    0:Data:cpsrng.gcda
        -:    0:Runs:7
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/print_util.h>
        -:   16:#include <crypto/aes.h>
        -:   17:#include <crypto/cpsrng.h>
        -:   18:#include <crypto/rand.h>
        -:   19:
        -:   20:static struct AES_ctx aes_ctx;
        -:   21:
        7:   22:void cpsrng_reseed() {
        -:   23:	byte iv[16];
        -:   24:	byte key[32];
        7:   25:	if (rand_bytes(key, 32)) {
    #####:   26:		panic("Could not generate entropy for AES key generation");
        -:   27:	}
        7:   28:	if (rand_bytes(iv, 16)) {
    #####:   29:		panic("Could not generate entropy for AES iv generation");
        -:   30:	}
        -:   31:
        7:   32:	AES_init_ctx_iv(&aes_ctx, key, iv);
        7:   33:}
        -:   34:
        -:   35:// __attribute__ ((constructor)) guaranteed to be called before main.
        -:   36:// This will either succeed or exit before main is called.
        7:   37:void __attribute__((constructor)) __init_cpsrng() {
        7:   38:	cpsrng_reseed();
        7:   39:}
        -:   40:
        -:   41:// note: not thread safe as user must ensure thread safety. This allows for
        -:   42:// flexible usage in a single thread, no locking is needed. In multi-threaded
        -:   43:// environments, locking may be used.
    #####:   44:void cpsrng_rand_byte(byte *v) {
    #####:   45:	AES_CTR_xcrypt_buffer(&aes_ctx, v, sizeof(byte));
    #####:   46:}
        -:   47:
        -:   48:// note: not thread safe as user must ensure thread safety. This allows for
        -:   49:// flexible usage in a single thread, no locking is needed. In multi-threaded
        -:   50:// environments, locking may be used.
        1:   51:void cpsrng_rand_int64(int64 *v) {
        1:   52:	AES_CTR_xcrypt_buffer(&aes_ctx, (byte *)v, sizeof(int64));
        1:   53:}
        -:   54:
        -:   55:// note: not thread safe as user must ensure thread safety. This allows for
        -:   56:// flexible usage in a single thread, no locking is needed. In multi-threaded
        -:   57:// environments, locking may be used.
     5000:   58:void cpsrng_rand_int(int *v) {
     5000:   59:	AES_CTR_xcrypt_buffer(&aes_ctx, (byte *)v, sizeof(int));
     5000:   60:}
        -:   61:
        -:   62:// note: not thread safe as user must ensure thread safety. This allows for
        -:   63:// flexible usage in a single thread, no locking is needed. In multi-threaded
        -:   64:// environments, locking may be used.
    #####:   65:void cpsrng_rand_bytes(void *v, unsigned long long size) {
    #####:   66:	AES_CTR_xcrypt_buffer(&aes_ctx, (byte *)v, size);
    #####:   67:}
        -:   68:
        -:   69:// only available in test mode for tests. Not used in production environments.
        -:   70:#ifdef TEST
        1:   71:void cpsrng_test_seed(byte iv[16], byte key[32]) {
        1:   72:	AES_init_ctx_iv(&aes_ctx, key, iv);
        1:   73:	int64 v0 = 0;
        1:   74:	cpsrng_rand_int64(&v0);
        1:   75:}
        -:   76:#endif	// TEST
        -:    0:Source:murmurhash.c
        -:    0:Graph:murmurhash.gcno
        -:    0:Data:murmurhash.gcda
        -:    0:Runs:7
        -:    1:/**
        -:    2: * `murmurhash.h' - murmurhash
        -:    3: *
        -:    4: * copyright (c) 2014-2022 joseph werle <joseph.werle@gmail.com>
        -:    5: */
        -:    6:
        -:    7:#include <crypto/murmurhash.h>
        -:    8:
    #####:    9:unsigned int murmurhash(const byte *key, unsigned int len, unsigned int seed) {
    #####:   10:	unsigned int c1 = 0xcc9e2d51;
    #####:   11:	unsigned int c2 = 0x1b873593;
    #####:   12:	unsigned int r1 = 15;
    #####:   13:	unsigned int r2 = 13;
    #####:   14:	unsigned int m = 5;
    #####:   15:	unsigned int n = 0xe6546b64;
    #####:   16:	unsigned int h = 0;
    #####:   17:	unsigned int k = 0;
    #####:   18:	byte *d = (byte *)key;	// 32 bit extract from `key'
    #####:   19:	const unsigned int *chunks = NULL;
    #####:   20:	const byte *tail = NULL;  // tail - last 8 bytes
    #####:   21:	int i = 0;
    #####:   22:	int l = len / 4;  // chunk length
        -:   23:
    #####:   24:	h = seed;
        -:   25:
    #####:   26:	chunks = (const unsigned int *)(d + l * 4);	 // body
    #####:   27:	tail = (const byte *)(d + l * 4);			 // last 8 byte chunk of `key'
        -:   28:
        -:   29:	// for each 4 byte chunk of `key'
    #####:   30:	for (i = -l; i != 0; ++i) {
        -:   31:		// next 4 byte chunk of `key'
    #####:   32:		k = chunks[i];
        -:   33:
        -:   34:		// encode next 4 byte chunk of `key'
    #####:   35:		k *= c1;
    #####:   36:		k = (k << r1) | (k >> (32 - r1));
    #####:   37:		k *= c2;
        -:   38:
        -:   39:		// append to hash
    #####:   40:		h ^= k;
    #####:   41:		h = (h << r2) | (h >> (32 - r2));
    #####:   42:		h = h * m + n;
        -:   43:	}
        -:   44:
    #####:   45:	k = 0;
        -:   46:
        -:   47:	// remainder
    #####:   48:	switch (len & 3) {	// `len % 4'
    #####:   49:		case 3:
    #####:   50:			k ^= (tail[2] << 16);
    #####:   51:		case 2:
    #####:   52:			k ^= (tail[1] << 8);
        -:   53:
    #####:   54:		case 1:
    #####:   55:			k ^= tail[0];
    #####:   56:			k *= c1;
    #####:   57:			k = (k << r1) | (k >> (32 - r1));
    #####:   58:			k *= c2;
    #####:   59:			h ^= k;
        -:   60:	}
        -:   61:
    #####:   62:	h ^= len;
        -:   63:
    #####:   64:	h ^= (h >> 16);
    #####:   65:	h *= 0x85ebca6b;
    #####:   66:	h ^= (h >> 13);
    #####:   67:	h *= 0xc2b2ae35;
    #####:   68:	h ^= (h >> 16);
        -:   69:
    #####:   70:	return h;
        -:   71:}
        -:    0:Source:rand.c
        -:    0:Graph:rand.gcno
        -:    0:Data:rand.gcda
        -:    0:Runs:7
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/types.h>
        -:   16:#include <crypto/rand.h>
        -:   17:#include <sys/random.h>
        -:   18:
    #####:   19:int rand_byte(byte *v) {
    #####:   20:	return getentropy(v, sizeof(byte));
        -:   21:}
        -:   22:
    #####:   23:int rand_int(int *v) {
    #####:   24:	return getentropy(v, sizeof(int));
        -:   25:}
        -:   26:
    #####:   27:int rand_int64(int64 *v) {
    #####:   28:	return getentropy(v, sizeof(int64));
        -:   29:}
        -:   30:
       14:   31:int rand_bytes(void *buf, int64 length) {
       14:   32:	return getentropy(buf, length);
        -:   33:}
        -:    0:Source:sha3.c
        -:    0:Graph:sha3.gcno
        -:    0:Data:sha3.gcda
        -:    0:Runs:7
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:/* -------------------------------------------------------------------------
        -:   16: * Works when compiled for either 32-bit or 64-bit targets, optimized for
        -:   17: * 64 bit.
        -:   18: *
        -:   19: * Canonical implementation of Init/Update/Finalize for SHA-3 byte input.
        -:   20: *
        -:   21: * SHA3-256, SHA3-384, SHA-512 are implemented. SHA-224 can easily be added.
        -:   22: *
        -:   23: * Based on code from http://keccak.noekeon.org/ .
        -:   24: *
        -:   25: * I place the code that I wrote into public domain, free to use.
        -:   26: *
        -:   27: * I would appreciate if you give credits to this work if you used it to
        -:   28: * write or test * your code.
        -:   29: *
        -:   30: * Aug 2015. Andrey Jivsov. crypto@brainhub.org
        -:   31: * ---------------------------------------------------------------------- */
        -:   32:
        -:   33:#include <base/util.h>
        -:   34:#include <crypto/sha3.h>
        -:   35:#define memcpy(...) mymemcpy(__VA_ARGS__)
        -:   36:
        -:   37:#define SHA3_ASSERT(x)
        -:   38:#define SHA3_TRACE(format, ...)
        -:   39:#define SHA3_TRACE_BUF(format, buf, l)
        -:   40:
        -:   41:/*
        -:   42: * This flag is used to configure "pure" Keccak, as opposed to NIST SHA3.
        -:   43: */
        -:   44:#define SHA3_USE_KECCAK_FLAG 0x80000000
        -:   45:#define SHA3_CW(x) ((x) & (~SHA3_USE_KECCAK_FLAG))
        -:   46:
        -:   47:#if defined(_MSC_VER)
        -:   48:#define SHA3_CONST(x) x
        -:   49:#else
        -:   50:#define SHA3_CONST(x) x##L
        -:   51:#endif
        -:   52:
        -:   53:#ifndef SHA3_ROTL64
        -:   54:#define SHA3_ROTL64(x, y) \
        -:   55:	(((x) << (y)) | ((x) >> ((sizeof(unsigned long long) * 8) - (y))))
        -:   56:#endif
        -:   57:
        -:   58:static const unsigned long long keccakf_rndc[24] = {
        -:   59:	SHA3_CONST(0x0000000000000001UL), SHA3_CONST(0x0000000000008082UL),
        -:   60:	SHA3_CONST(0x800000000000808aUL), SHA3_CONST(0x8000000080008000UL),
        -:   61:	SHA3_CONST(0x000000000000808bUL), SHA3_CONST(0x0000000080000001UL),
        -:   62:	SHA3_CONST(0x8000000080008081UL), SHA3_CONST(0x8000000000008009UL),
        -:   63:	SHA3_CONST(0x000000000000008aUL), SHA3_CONST(0x0000000000000088UL),
        -:   64:	SHA3_CONST(0x0000000080008009UL), SHA3_CONST(0x000000008000000aUL),
        -:   65:	SHA3_CONST(0x000000008000808bUL), SHA3_CONST(0x800000000000008bUL),
        -:   66:	SHA3_CONST(0x8000000000008089UL), SHA3_CONST(0x8000000000008003UL),
        -:   67:	SHA3_CONST(0x8000000000008002UL), SHA3_CONST(0x8000000000000080UL),
        -:   68:	SHA3_CONST(0x000000000000800aUL), SHA3_CONST(0x800000008000000aUL),
        -:   69:	SHA3_CONST(0x8000000080008081UL), SHA3_CONST(0x8000000000008080UL),
        -:   70:	SHA3_CONST(0x0000000080000001UL), SHA3_CONST(0x8000000080008008UL)};
        -:   71:
        -:   72:static const unsigned keccakf_rotc[24] = {1,  3,  6,  10, 15, 21, 28, 36,
        -:   73:										  45, 55, 2,  14, 27, 41, 56, 8,
        -:   74:										  25, 43, 62, 18, 39, 61, 20, 44};
        -:   75:
        -:   76:static const unsigned keccakf_piln[24] = {10, 7,  11, 17, 18, 3,  5,  16,
        -:   77:										  8,  21, 24, 4,  15, 23, 19, 13,
        -:   78:										  12, 2,  20, 14, 22, 9,  6,  1};
        -:   79:
        -:   80:/* generally called after SHA3_KECCAK_SPONGE_WORDS-ctx->capacityWords words
        -:   81: * are XORed into the state s
        -:   82: */
    #####:   83:static void keccakf(unsigned long long s[25]) {
        -:   84:	int i, j, round;
        -:   85:	unsigned long long t, bc[5];
        -:   86:#define KECCAK_ROUNDS 24
        -:   87:
    #####:   88:	for (round = 0; round < KECCAK_ROUNDS; round++) {
        -:   89:		/* Theta */
    #####:   90:		for (i = 0; i < 5; i++)
    #####:   91:			bc[i] = s[i] ^ s[i + 5] ^ s[i + 10] ^ s[i + 15] ^ s[i + 20];
        -:   92:
    #####:   93:		for (i = 0; i < 5; i++) {
    #####:   94:			t = bc[(i + 4) % 5] ^ SHA3_ROTL64(bc[(i + 1) % 5], 1);
    #####:   95:			for (j = 0; j < 25; j += 5) s[j + i] ^= t;
        -:   96:		}
        -:   97:
        -:   98:		/* Rho Pi */
    #####:   99:		t = s[1];
    #####:  100:		for (i = 0; i < 24; i++) {
    #####:  101:			j = keccakf_piln[i];
    #####:  102:			bc[0] = s[j];
    #####:  103:			s[j] = SHA3_ROTL64(t, keccakf_rotc[i]);
    #####:  104:			t = bc[0];
        -:  105:		}
        -:  106:
        -:  107:		/* Chi */
    #####:  108:		for (j = 0; j < 25; j += 5) {
    #####:  109:			for (i = 0; i < 5; i++) bc[i] = s[j + i];
    #####:  110:			for (i = 0; i < 5; i++)
    #####:  111:				s[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
        -:  112:		}
        -:  113:
        -:  114:		/* Iota */
    #####:  115:		s[0] ^= keccakf_rndc[round];
        -:  116:	}
    #####:  117:}
        -:  118:
        -:  119:/* *************************** Public Inteface ************************ */
        -:  120:
        -:  121:/* For Init or Reset call these: */
    #####:  122:sha3_return_t sha3_Init(void *priv, unsigned bitSize) {
    #####:  123:	sha3_context *ctx = (sha3_context *)priv;
    #####:  124:	if (bitSize != 256 && bitSize != 384 && bitSize != 512)
    #####:  125:		return SHA3_RETURN_BAD_PARAMS;
    #####:  126:	mymemset(ctx, 0, sizeof(*ctx));
    #####:  127:	ctx->capacityWords = 2 * bitSize / (8 * sizeof(unsigned long long));
    #####:  128:	return SHA3_RETURN_OK;
        -:  129:}
        -:  130:
    #####:  131:void sha3_Init256(void *priv) {
    #####:  132:	sha3_Init(priv, 256);
    #####:  133:}
        -:  134:
    #####:  135:void sha3_Init384(void *priv) {
    #####:  136:	sha3_Init(priv, 384);
    #####:  137:}
        -:  138:
    #####:  139:void sha3_Init512(void *priv) {
    #####:  140:	sha3_Init(priv, 512);
    #####:  141:}
        -:  142:
    #####:  143:enum SHA3_FLAGS sha3_SetFlags(void *priv, enum SHA3_FLAGS flags) {
    #####:  144:	sha3_context *ctx = (sha3_context *)priv;
    #####:  145:	flags &= SHA3_FLAGS_KECCAK;
    #####:  146:	ctx->capacityWords |=
    #####:  147:		(flags == SHA3_FLAGS_KECCAK ? SHA3_USE_KECCAK_FLAG : 0);
    #####:  148:	return flags;
        -:  149:}
        -:  150:
    #####:  151:void sha3_Update(void *priv, void const *bufIn, unsigned long long len) {
    #####:  152:	sha3_context *ctx = (sha3_context *)priv;
        -:  153:
        -:  154:	/* 0...7 -- how much is needed to have a word */
    #####:  155:	unsigned old_tail = (8 - ctx->byteIndex) & 7;
        -:  156:
        -:  157:	unsigned long long words;
        -:  158:	unsigned tail;
        -:  159:	unsigned long long i;
        -:  160:
    #####:  161:	const byte *buf = bufIn;
        -:  162:
        -:  163:	SHA3_TRACE_BUF("called to update with:", buf, len);
        -:  164:
        -:  165:	SHA3_ASSERT(ctx->byteIndex < 8);
        -:  166:	SHA3_ASSERT(ctx->wordIndex < sizeof(ctx->u.s) / sizeof(ctx->u.s[0]));
        -:  167:
    #####:  168:	if (len < old_tail) { /* have no complete word or haven't started
        -:  169:						   * the word yet */
        -:  170:		SHA3_TRACE("because %d<%d, store it and return", (unsigned)len,
        -:  171:				   (unsigned)old_tail);
        -:  172:		/* endian-independent code follows: */
    #####:  173:		while (len--)
    #####:  174:			ctx->saved |= (unsigned long long)(*(buf++))
    #####:  175:						  << ((ctx->byteIndex++) * 8);
        -:  176:		SHA3_ASSERT(ctx->byteIndex < 8);
    #####:  177:		return;
        -:  178:	}
        -:  179:
    #####:  180:	if (old_tail) { /* will have one word to process */
        -:  181:		SHA3_TRACE("completing one word with %d bytes", (unsigned)old_tail);
        -:  182:		/* endian-independent code follows: */
    #####:  183:		len -= old_tail;
    #####:  184:		while (old_tail--)
    #####:  185:			ctx->saved |= (unsigned long long)(*(buf++))
    #####:  186:						  << ((ctx->byteIndex++) * 8);
        -:  187:
        -:  188:		/* now ready to add saved to the sponge */
    #####:  189:		ctx->u.s[ctx->wordIndex] ^= ctx->saved;
        -:  190:		SHA3_ASSERT(ctx->byteIndex == 8);
    #####:  191:		ctx->byteIndex = 0;
    #####:  192:		ctx->saved = 0;
    #####:  193:		if (++ctx->wordIndex ==
    #####:  194:			(SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
    #####:  195:			keccakf(ctx->u.s);
    #####:  196:			ctx->wordIndex = 0;
        -:  197:		}
        -:  198:	}
        -:  199:
        -:  200:	/* now work in full words directly from input */
        -:  201:
        -:  202:	SHA3_ASSERT(ctx->byteIndex == 0);
        -:  203:
    #####:  204:	words = len / sizeof(unsigned long long);
    #####:  205:	tail = len - words * sizeof(unsigned long long);
        -:  206:
        -:  207:	SHA3_TRACE("have %d full words to process", (unsigned)words);
        -:  208:
    #####:  209:	for (i = 0; i < words; i++, buf += sizeof(unsigned long long)) {
    #####:  210:		const unsigned long long t = (unsigned long long)(buf[0]) |
    #####:  211:									 ((unsigned long long)(buf[1]) << 8 * 1) |
    #####:  212:									 ((unsigned long long)(buf[2]) << 8 * 2) |
    #####:  213:									 ((unsigned long long)(buf[3]) << 8 * 3) |
    #####:  214:									 ((unsigned long long)(buf[4]) << 8 * 4) |
    #####:  215:									 ((unsigned long long)(buf[5]) << 8 * 5) |
    #####:  216:									 ((unsigned long long)(buf[6]) << 8 * 6) |
    #####:  217:									 ((unsigned long long)(buf[7]) << 8 * 7);
        -:  218:#if defined(__x86_64__) || defined(__i386__)
        -:  219:		SHA3_ASSERT(memcmp(&t, buf, 8) == 0);
        -:  220:#endif
    #####:  221:		ctx->u.s[ctx->wordIndex] ^= t;
    #####:  222:		if (++ctx->wordIndex ==
    #####:  223:			(SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords))) {
    #####:  224:			keccakf(ctx->u.s);
    #####:  225:			ctx->wordIndex = 0;
        -:  226:		}
        -:  227:	}
        -:  228:
        -:  229:	SHA3_TRACE("have %d bytes left to process, save them", (unsigned)tail);
        -:  230:
        -:  231:	/* finally, save the partial word */
        -:  232:	SHA3_ASSERT(ctx->byteIndex == 0 && tail < 8);
    #####:  233:	while (tail--) {
        -:  234:		SHA3_TRACE("Store byte %02x '%c'", *buf, *buf);
    #####:  235:		ctx->saved |= (unsigned long long)(*(buf++))
    #####:  236:					  << ((ctx->byteIndex++) * 8);
        -:  237:	}
        -:  238:	SHA3_ASSERT(ctx->byteIndex < 8);
        -:  239:	SHA3_TRACE("Have saved=0x%016" PRIx64 " at the end", ctx->saved);
        -:  240:}
        -:  241:
        -:  242:/* This is simply the 'update' with the padding block.
        -:  243: * The padding block is 0x01 || 0x00* || 0x80. First 0x01 and last 0x80
        -:  244: * bytes are always present, but they can be the same byte.
        -:  245: */
    #####:  246:void const *sha3_Finalize(void *priv) {
    #####:  247:	sha3_context *ctx = (sha3_context *)priv;
        -:  248:
        -:  249:	SHA3_TRACE("called with %d bytes in the buffer", ctx->byteIndex);
        -:  250:
        -:  251:	/* Append 2-bit suffix 01, per SHA-3 spec. Instead of 1 for padding we
        -:  252:	 * use 1<<2 below. The 0x02 below corresponds to the suffix 01.
        -:  253:	 * Overall, we feed 0, then 1, and finally 1 to start padding. Without
        -:  254:	 * M || 01, we would simply use 1 to start padding. */
        -:  255:
        -:  256:	unsigned long long t;
        -:  257:
    #####:  258:	if (ctx->capacityWords & SHA3_USE_KECCAK_FLAG) {
        -:  259:		/* Keccak version */
    #####:  260:		t = (unsigned long long)(((unsigned long long)1)
    #####:  261:								 << (ctx->byteIndex * 8));
        -:  262:	} else {
        -:  263:		/* SHA3 version */
    #####:  264:		t = (unsigned long long)(((unsigned long long)(0x02 | (1 << 2)))
    #####:  265:								 << ((ctx->byteIndex) * 8));
        -:  266:	}
        -:  267:
    #####:  268:	ctx->u.s[ctx->wordIndex] ^= ctx->saved ^ t;
        -:  269:
    #####:  270:	ctx->u.s[SHA3_KECCAK_SPONGE_WORDS - SHA3_CW(ctx->capacityWords) - 1] ^=
        -:  271:		SHA3_CONST(0x8000000000000000UL);
    #####:  272:	keccakf(ctx->u.s);
        -:  273:
        -:  274:	/* Return first bytes of the ctx->s. This conversion is not needed for
        -:  275:	 * little-endian platforms e.g. wrap with #if !defined(__BYTE_ORDER__)
        -:  276:	 * || !defined(__ORDER_LITTLE_ENDIAN__) ||
        -:  277:	 * __BYTE_ORDER__!=__ORDER_LITTLE_ENDIAN__
        -:  278:	 *    ... the conversion below ...
        -:  279:	 * #endif */
        -:  280:	{
        -:  281:		unsigned i;
    #####:  282:		for (i = 0; i < SHA3_KECCAK_SPONGE_WORDS; i++) {
    #####:  283:			const unsigned t1 = (unsigned int)ctx->u.s[i];
    #####:  284:			const unsigned t2 = (unsigned int)((ctx->u.s[i] >> 16) >> 16);
    #####:  285:			ctx->u.sb[i * 8 + 0] = (byte)(t1);
    #####:  286:			ctx->u.sb[i * 8 + 1] = (byte)(t1 >> 8);
    #####:  287:			ctx->u.sb[i * 8 + 2] = (byte)(t1 >> 16);
    #####:  288:			ctx->u.sb[i * 8 + 3] = (byte)(t1 >> 24);
    #####:  289:			ctx->u.sb[i * 8 + 4] = (byte)(t2);
    #####:  290:			ctx->u.sb[i * 8 + 5] = (byte)(t2 >> 8);
    #####:  291:			ctx->u.sb[i * 8 + 6] = (byte)(t2 >> 16);
    #####:  292:			ctx->u.sb[i * 8 + 7] = (byte)(t2 >> 24);
        -:  293:		}
        -:  294:	}
        -:  295:
        -:  296:	SHA3_TRACE_BUF("Hash: (first 32 bytes)", ctx->u.sb, 256 / 8);
        -:  297:
    #####:  298:	return (ctx->u.sb);
        -:  299:}
        -:  300:
    #####:  301:sha3_return_t sha3_HashBuffer(unsigned bitSize, enum SHA3_FLAGS flags,
        -:  302:							  const void *in, unsigned inBytes, void *out,
        -:  303:							  unsigned outBytes) {
        -:  304:	sha3_return_t err;
        -:  305:	sha3_context c;
        -:  306:
    #####:  307:	err = sha3_Init(&c, bitSize);
    #####:  308:	if (err != SHA3_RETURN_OK) return err;
    #####:  309:	if (sha3_SetFlags(&c, flags) != flags) {
    #####:  310:		return SHA3_RETURN_BAD_PARAMS;
        -:  311:	}
    #####:  312:	sha3_Update(&c, in, inBytes);
    #####:  313:	const void *h = sha3_Finalize(&c);
        -:  314:
    #####:  315:	if (outBytes > bitSize / 8) outBytes = bitSize / 8;
    #####:  316:	memcpy(out, h, outBytes);
    #####:  317:	return SHA3_RETURN_OK;
        -:  318:}
        -:    0:Source:orbtree.c
        -:    0:Graph:orbtree.gcno
        -:    0:Data:orbtree.gcda
        -:    0:Runs:4
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/macro_util.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/slabs.h>
        -:   18:#include <core/orbtree.h>
        -:   19:
        -:   20:typedef struct OrbTreeNodeImpl {
        -:   21:	Ptr parent;
        -:   22:	Ptr right;
        -:   23:	Ptr left;
        -:   24:	unsigned int right_subtree_height_color;
        -:   25:	unsigned int left_subtree_height;
        -:   26:} OrbTreeNodeImpl;
        -:   27:
        -:   28:typedef struct OrbTreeImpl {
        -:   29:	const SlabAllocator *sa;
        -:   30:	Ptr root;
        -:   31:} OrbTreeImpl;
        -:   32:
        -:   33:typedef struct OrbTreeCtx {
        -:   34:	const SlabAllocator *sa;
        -:   35:	OrbTreeImpl *tree;
        -:   36:	unsigned int offset;
        -:   37:} OrbTreeCtx;
        -:   38:
        -:   39:_Thread_local OrbTreeCtx orbtree_tl_ctx = {};
        -:   40:
        4:   41:void __attribute__((constructor)) __orbtree_check_sizes() {
        -:   42:	if (sizeof(OrbTreeNodeImpl) != sizeof(OrbTreeNode))
        -:   43:		panic("sizeof(OrbTreeNodeImpl) (%i) != sizeof(OrbTreeNode) (%i)",
        -:   44:			  sizeof(OrbTreeNodeImpl), sizeof(OrbTreeNode));
        -:   45:	if (sizeof(OrbTreeImpl) != sizeof(OrbTree))
        -:   46:		panic("sizeof(OrbTreeImpl) (%i) != sizeof(OrbTree) (%i)",
        -:   47:			  sizeof(OrbTreeImpl), sizeof(OrbTree));
        4:   48:}
        -:   49:
 35799632:   50:void *orbtree_value(Ptr ptr) {
 35799632:   51:	return slab_get(orbtree_tl_ctx.sa, ptr);
        -:   52:}
        -:   53:
 36314725:   54:OrbTreeNodeImpl *orbtree_node(Ptr ptr) {
 36314725:   55:	byte *slab = slab_get(orbtree_tl_ctx.sa, ptr);
 36314725:   56:	if (slab == NULL) return NULL;
 36292997:   57:	return (OrbTreeNodeImpl *)(slab + orbtree_tl_ctx.offset);
        -:   58:}
        -:   59:
        -:   60:#define RED_NODE 0x80000000
        -:   61:#define IS_RED(k)                                                    \
        -:   62:	({                                                               \
        -:   63:		OrbTreeNodeImpl *_impl__ = orbtree_node(k);                  \
        -:   64:		int _ret__;                                                  \
        -:   65:		if (_impl__ == NULL)                                         \
        -:   66:			_ret__ = 0;                                              \
        -:   67:		else                                                         \
        -:   68:			_ret__ = _impl__->right_subtree_height_color & RED_NODE; \
        -:   69:		_ret__;                                                      \
        -:   70:	})
        -:   71:#define IS_BLACK(k) !IS_RED(k)
        -:   72:#define SET_BLACK(k)                                      \
        -:   73:	({                                                    \
        -:   74:		OrbTreeNodeImpl *_impl__ = orbtree_node(k);       \
        -:   75:		_impl__->right_subtree_height_color &= ~RED_NODE; \
        -:   76:	})
        -:   77:#define SET_RED(k)                                       \
        -:   78:	({                                                   \
        -:   79:		OrbTreeNodeImpl *_impl__ = orbtree_node(k);      \
        -:   80:		_impl__->right_subtree_height_color |= RED_NODE; \
        -:   81:	})
        -:   82:
     2461:   83:void orbtree_rotate_right(Ptr x_ptr) {
     2461:   84:	OrbTreeNodeImpl *x = orbtree_node(x_ptr);
     2461:   85:	Ptr y_ptr = x->left;
     2461:   86:	OrbTreeNodeImpl *y = orbtree_node(y_ptr);
        -:   87:
        -:   88:	// Move subtree
     2461:   89:	x->left = y->right;
        -:   90:
     2461:   91:	if (y->right != null) {
      860:   92:		OrbTreeNodeImpl *yright = orbtree_node(y->right);
      860:   93:		yright->parent = x_ptr;
        -:   94:	}
        -:   95:
        -:   96:	// Update y's parent to x's parent
     2461:   97:	y->parent = x->parent;
        -:   98:
        -:   99:	// If x was the root, now y becomes the root
     2461:  100:	OrbTreeNodeImpl *xparent = orbtree_node(x->parent);
     2461:  101:	if (x->parent == null) {
        2:  102:		orbtree_tl_ctx.tree->root = y_ptr;
     2459:  103:	} else if (x_ptr == xparent->right) {
     1591:  104:		xparent->right = y_ptr;
        -:  105:	} else {
      868:  106:		xparent->left = y_ptr;
        -:  107:	}
        -:  108:
        -:  109:	// Place x as y's left child
     2461:  110:	y->right = x_ptr;
     2461:  111:	x->parent = y_ptr;
     2461:  112:}
        -:  113:
     2568:  114:void orbtree_rotate_left(Ptr x_ptr) {
     2568:  115:	OrbTreeNodeImpl *x = orbtree_node(x_ptr);
     2568:  116:	Ptr y_ptr = x->right;
     2568:  117:	OrbTreeNodeImpl *y = orbtree_node(y_ptr);
        -:  118:
        -:  119:	// Move subtree
     2568:  120:	x->right = y->left;
        -:  121:
     2568:  122:	if (y->left != null) {
      893:  123:		OrbTreeNodeImpl *yleft = orbtree_node(y->left);
      893:  124:		yleft->parent = x_ptr;
        -:  125:	}
        -:  126:
        -:  127:	// Update y's parent to x's parent
     2568:  128:	y->parent = x->parent;
        -:  129:
        -:  130:	// If x was the root, now y becomes the root
     2568:  131:	OrbTreeNodeImpl *xparent = orbtree_node(x->parent);
     2568:  132:	if (x->parent == null) {
    #####:  133:		orbtree_tl_ctx.tree->root = y_ptr;
     2568:  134:	} else if (x_ptr == xparent->left) {
     1670:  135:		xparent->left = y_ptr;
        -:  136:	} else {
      898:  137:		xparent->right = y_ptr;
        -:  138:	}
        -:  139:
        -:  140:	// Place x as y's left child
     2568:  141:	y->left = x_ptr;
     2568:  142:	x->parent = y_ptr;
     2568:  143:}
        -:  144:
     5003:  145:int orbtree_put_fixup(Ptr k_ptr) {
     5003:  146:	OrbTreeNodeImpl *k = orbtree_node(k_ptr);
    9486*:  147:	while (k_ptr != orbtree_tl_ctx.tree->root && IS_RED(k->parent)) {
     4483:  148:		k = orbtree_node(k_ptr);
     4483:  149:		OrbTreeNodeImpl *parent = orbtree_node(k->parent);
     4483:  150:		OrbTreeNodeImpl *gparent = orbtree_node(parent->parent);
        -:  151:
     4483:  152:		if (k->parent == gparent->left) {
        -:  153:			// Case 1: Uncle is on the right
     2229:  154:			OrbTreeNodeImpl *u = orbtree_node(gparent->right);
     2229:  155:			Ptr u_ptr = gparent->right;
     2229:  156:			if (IS_RED(u_ptr)) {
        -:  157:				// Case 1a: Uncle is red
        -:  158:				// Recolor the parent and uncle to black
     1259:  159:				SET_BLACK(k->parent);
     1259:  160:				SET_BLACK(u_ptr);
        -:  161:				// Recolor the grandparent to red
     1259:  162:				SET_RED(parent->parent);
        -:  163:
        -:  164:				// Move up the tree
     1259:  165:				k_ptr = parent->parent;
     1259:  166:				k = orbtree_node(k_ptr);
        -:  167:			} else {
        -:  168:				// Case 1b: Uncle is black
      970:  169:				if (k_ptr == parent->right) {
        -:  170:					// Case 1b1: Node is a right child
        -:  171:					// Rotate left to make the node the left child
      498:  172:					k_ptr = k->parent;
      498:  173:					k = orbtree_node(k_ptr);
      498:  174:					orbtree_rotate_left(k_ptr);
        -:  175:				}
        -:  176:				// Recolor and rotate
      970:  177:				OrbTreeNodeImpl *kparent = orbtree_node(k->parent);
      970:  178:				SET_BLACK(k->parent);
      970:  179:				SET_RED(kparent->parent);
        -:  180:
      970:  181:				orbtree_rotate_right(kparent->parent);
        -:  182:			}
        -:  183:		} else {
        -:  184:			// Case 2: Uncle is on the left
     2254:  185:			OrbTreeNodeImpl *u = orbtree_node(gparent->left);
     2254:  186:			Ptr u_ptr = gparent->left;
     2254:  187:			if (IS_RED(u_ptr)) {
        -:  188:				// Case 2a: Uncle is red
        -:  189:				// Recolor the parent and uncle to black
     1290:  190:				SET_BLACK(k->parent);
     1290:  191:				SET_BLACK(u_ptr);
        -:  192:				// Recolor the grandparent to red
     1290:  193:				SET_RED(parent->parent);
        -:  194:
        -:  195:				// Move up the tree
     1290:  196:				k_ptr = parent->parent;
     1290:  197:				k = orbtree_node(k_ptr);
        -:  198:			} else {
        -:  199:				// Case 2b: Uncle is black
      964:  200:				if (k_ptr == parent->left) {
        -:  201:					// Case 2b1: Node is a left child
        -:  202:					// Rotate right to make the node the right child
      508:  203:					k_ptr = k->parent;
      508:  204:					k = orbtree_node(k_ptr);
      508:  205:					orbtree_rotate_right(k_ptr);
        -:  206:				}
        -:  207:				// Recolor and rotate
      964:  208:				SET_BLACK(k->parent);
      964:  209:				OrbTreeNodeImpl *kparent = orbtree_node(k->parent);
      964:  210:				SET_RED(kparent->parent);
      964:  211:				orbtree_rotate_left(kparent->parent);
        -:  212:			}
        -:  213:		}
        -:  214:	}
        -:  215:	// Ensure the root is always black
     5003:  216:	SET_BLACK(orbtree_tl_ctx.tree->root);
     5003:  217:	return 0;
        -:  218:}
        -:  219:
     5003:  220:void orbtree_init_node(OrbTreeNodeImpl *node, bool red, Ptr parent) {
     5003:  221:	node->right = null;
     5003:  222:	node->left = null;
     5003:  223:	node->parent = parent;
     5003:  224:	if (red)
     5001:  225:		node->right_subtree_height_color = RED_NODE;
        -:  226:	else
        2:  227:		node->right_subtree_height_color = 0;
     5003:  228:	node->left_subtree_height = 0;
     5003:  229:}
        -:  230:
        2:  231:void orbtree_insert_transplant(OrbTreeImpl *impl, const OrbTreeNodeImpl *prev,
        -:  232:							   OrbTreeNodeImpl *next, Ptr ptr, bool is_right) {
        2:  233:	next->parent = prev->parent;
        2:  234:	next->right = prev->right;
        2:  235:	next->left = prev->left;
        2:  236:	next->right_subtree_height_color = prev->right_subtree_height_color;
        2:  237:	next->left_subtree_height = prev->left_subtree_height;
        -:  238:
        2:  239:	if (next->parent != null) {
        2:  240:		OrbTreeNodeImpl *parent = orbtree_node(next->parent);
        2:  241:		if (is_right) {
        1:  242:			parent->right = ptr;
        -:  243:		} else
        1:  244:			parent->left = ptr;
        -:  245:	}
        2:  246:	if (next->left != null) {
        2:  247:		OrbTreeNodeImpl *left = orbtree_node(next->left);
        2:  248:		left->parent = ptr;
        -:  249:	}
        2:  250:	if (next->right != null) {
        2:  251:		OrbTreeNodeImpl *right = orbtree_node(next->right);
        2:  252:		right->parent = ptr;
        -:  253:	}
        2:  254:}
        -:  255:
     5005:  256:Ptr orbtree_insert(OrbTreeImpl *impl, OrbTreeNodePair *pair, Ptr ptr) {
     5005:  257:	if (pair->parent == null) {
        2:  258:		impl->root = pair->self;
        2:  259:		OrbTreeNodeImpl *self = (OrbTreeNodeImpl *)orbtree_node(pair->self);
        2:  260:		orbtree_init_node(self, false, null);
        -:  261:	} else {
     5003:  262:		OrbTreeNodeImpl *self = (OrbTreeNodeImpl *)orbtree_node(pair->self);
     5003:  263:		if (self == NULL) {
        -:  264:			OrbTreeNodeImpl *parent =
     5001:  265:				(OrbTreeNodeImpl *)orbtree_node(pair->parent);
     5001:  266:			if (pair->is_right)
     2499:  267:				parent->right = ptr;
        -:  268:			else
     2502:  269:				parent->left = ptr;
     5001:  270:			self = (OrbTreeNodeImpl *)orbtree_node(ptr);
     5001:  271:			orbtree_init_node(self, true, pair->parent);
        -:  272:		} else {
        2:  273:			OrbTreeNodeImpl *next = orbtree_value(ptr) + orbtree_tl_ctx.offset;
        -:  274:			Ptr ret =
        2:  275:				orbtree_node_ptr((const OrbTreeNode *)self, pair->is_right);
        2:  276:			orbtree_insert_transplant(impl, self, next, ptr, pair->is_right);
        2:  277:			return ret;
        -:  278:		}
        -:  279:	}
     5003:  280:	return null;
        -:  281:}
        -:  282:
     6801:  283:void orbtree_remove_transplant(Ptr dst, Ptr src) {
     6801:  284:	OrbTreeNodeImpl *dst_node = orbtree_node(dst);
     6801:  285:	OrbTreeNodeImpl *dst_parent = orbtree_node(dst_node->parent);
        -:  286:
     6801:  287:	if (dst_node->parent == null)
        7:  288:		orbtree_tl_ctx.tree->root = src;
     6794:  289:	else if (dst == dst_parent->left) {
     4214:  290:		dst_parent->left = src;
        -:  291:	} else {
     2580:  292:		dst_parent->right = src;
        -:  293:	}
     6801:  294:	if (src != null) {
     3672:  295:		OrbTreeNodeImpl *src_node = orbtree_node(src);
     3672:  296:		src_node->parent = dst_node->parent;
        -:  297:	}
     6801:  298:}
        -:  299:
     2629:  300:Ptr orbtree_find_successor(Ptr x_ptr) {
     2629:  301:	OrbTreeNodeImpl *x = orbtree_node(x_ptr);
     2629:  302:	Ptr successor_ptr = x->right;
     2629:  303:	OrbTreeNodeImpl *successor = orbtree_node(x->right);
     6432:  304:	while (successor && successor->left != null) {
     3803:  305:		successor_ptr = successor->left;
     3803:  306:		successor = orbtree_node(successor->left);
        -:  307:	}
     2629:  308:	return successor_ptr;
        -:  309:}
        -:  310:
        -:  311:// set child's color to parent's
     3755:  312:void orbtree_set_color_based_on_parent(Ptr child, Ptr parent) {
     3755:  313:	if (child != null) {
    3755*:  314:		if (IS_RED(parent)) {
     1460:  315:			SET_RED(child);
        -:  316:		} else {
     2295:  317:			SET_BLACK(child);
        -:  318:		}
        -:  319:	}
     3755:  320:}
        -:  321:
     3771:  322:void orbtree_remove_fixup(Ptr p_ptr, Ptr w_ptr, Ptr x_ptr) {
     7446:  323:	while (x_ptr != orbtree_tl_ctx.tree->root && IS_BLACK(x_ptr)) {
     3675:  324:		OrbTreeNodeImpl *parent_node = orbtree_node(p_ptr);
     3675:  325:		OrbTreeNodeImpl *w_node = orbtree_node(w_ptr);
     3675:  326:		OrbTreeNodeImpl *x_node = orbtree_node(x_ptr);
     3675:  327:		if (w_ptr == parent_node->right) {
        -:  328:			// Case 1: Sibling is
        -:  329:			// red
    1953*:  330:			if (IS_RED(w_ptr)) {
      198:  331:				SET_BLACK(w_ptr);
      198:  332:				SET_RED(p_ptr);
      198:  333:				orbtree_rotate_left(p_ptr);
      198:  334:				w_ptr = parent_node->right;
      198:  335:				w_node = orbtree_node(w_ptr);
        -:  336:			}
        -:  337:
        -:  338:			// Case 2: Sibling's
        -:  339:			// children are both
        -:  340:			// black
     3284:  341:			if (IS_BLACK(w_node->left) && IS_BLACK(w_node->right)) {
     1331:  342:				SET_RED(w_ptr);
     1331:  343:				x_ptr = p_ptr;
     1331:  344:				x_node = orbtree_node(x_ptr);
     1331:  345:				p_ptr = parent_node->parent;
     1331:  346:				parent_node = orbtree_node(p_ptr);
     1331:  347:				OrbTreeNodeImpl *x_parent = orbtree_node(x_node->parent);
     1331:  348:				if (x_parent == NULL) {
        2:  349:					w_ptr = null;
        2:  350:					w_node = NULL;
     1329:  351:				} else if (x_ptr == x_parent->left) {
      743:  352:					w_ptr = x_parent->right;
      743:  353:					w_node = orbtree_node(w_ptr);
        -:  354:				} else {
      586:  355:					w_ptr = x_parent->left;
      586:  356:					w_node = orbtree_node(w_ptr);
        -:  357:				}
        -:  358:			} else {
        -:  359:				// Case 3: Sibling's
        -:  360:				// right child is
        -:  361:				// black, left child
        -:  362:				// is red
      622:  363:				if (IS_BLACK(w_node->right)) {
      298:  364:					SET_BLACK(w_node->left);
      298:  365:					SET_RED(w_ptr);
      298:  366:					orbtree_rotate_right(w_ptr);
      298:  367:					w_ptr = parent_node->right;
      298:  368:					w_node = orbtree_node(w_ptr);
        -:  369:				}
        -:  370:
        -:  371:				// Case 4: Sibling's
        -:  372:				// right child is
        -:  373:				// red
      622:  374:				orbtree_set_color_based_on_parent(w_ptr, p_ptr);
      622:  375:				SET_BLACK(p_ptr);
      622:  376:				SET_BLACK(w_node->right);
      622:  377:				orbtree_rotate_left(p_ptr);
      622:  378:				x_ptr = orbtree_tl_ctx.tree->root;
      622:  379:				x_node = orbtree_node(x_ptr);
        -:  380:			}
        -:  381:		} else {
        -:  382:			// Case 1: Sibling is
        -:  383:			// red
    1722*:  384:			if (IS_RED(w_ptr)) {
      181:  385:				SET_BLACK(w_ptr);
      181:  386:				SET_RED(p_ptr);
      181:  387:				orbtree_rotate_right(p_ptr);
      181:  388:				w_ptr = parent_node->left;
      181:  389:				w_node = orbtree_node(w_ptr);
        -:  390:			}
        -:  391:
        -:  392:			// Case 2: Sibling's
        -:  393:			// children are both
        -:  394:			// black
     2940:  395:			if (IS_BLACK(w_node->right) && IS_BLACK(w_node->left)) {
     1218:  396:				SET_RED(w_ptr);
     1218:  397:				x_ptr = p_ptr;
     1218:  398:				x_node = orbtree_node(x_ptr);
     1218:  399:				p_ptr = parent_node->parent;
     1218:  400:				parent_node = orbtree_node(p_ptr);
     1218:  401:				OrbTreeNodeImpl *x_parent = orbtree_node(x_node->parent);
     1218:  402:				if (x_parent == NULL) {
        5:  403:					w_ptr = null;
        5:  404:					w_node = NULL;
     1213:  405:				} else if (x_ptr == x_parent->left) {
      544:  406:					w_ptr = x_parent->right;
      544:  407:					w_node = orbtree_node(w_ptr);
        -:  408:				} else {
      669:  409:					w_ptr = x_parent->left;
      669:  410:					w_node = orbtree_node(w_ptr);
        -:  411:				}
        -:  412:			} else {
        -:  413:				// Case 3: Sibling's
        -:  414:				// right child is
        -:  415:				// black, left child
        -:  416:				// is red
      504:  417:				if (IS_BLACK(w_node->left)) {
      286:  418:					SET_BLACK(w_node->right);
      286:  419:					SET_RED(w_ptr);
      286:  420:					orbtree_rotate_left(w_ptr);
      286:  421:					w_ptr = parent_node->left;
      286:  422:					w_node = orbtree_node(w_ptr);
        -:  423:				}
        -:  424:
        -:  425:				// Case 4: Sibling's
        -:  426:				// right child is
        -:  427:				// red
      504:  428:				orbtree_set_color_based_on_parent(w_ptr, p_ptr);
      504:  429:				SET_BLACK(p_ptr);
      504:  430:				SET_BLACK(w_node->left);
      504:  431:				orbtree_rotate_right(p_ptr);
      504:  432:				x_ptr = orbtree_tl_ctx.tree->root;
      504:  433:				x_node = orbtree_node(x_ptr);
        -:  434:			}
        -:  435:		}
        -:  436:	}
        -:  437:
        -:  438:	// Ensure x is black at the end
        -:  439:	// of fixup
     3771:  440:	SET_BLACK(x_ptr);
     3771:  441:}
        -:  442:
     5000:  443:void orbtree_remove_impl(Ptr ptr) {
    5000*:  444:	bool do_fixup = IS_BLACK(ptr);
     5000:  445:	OrbTreeNodeImpl *node_to_delete = orbtree_node(ptr);
        -:  446:
     5000:  447:	Ptr x_ptr = null, w_ptr = null, p_ptr = null;
     5000:  448:	OrbTreeNodeImpl *x = NULL, *w = NULL, *p = NULL;
        -:  449:
     5000:  450:	if (node_to_delete->left == null) {
     2073:  451:		x_ptr = node_to_delete->right;
     2073:  452:		x = orbtree_node(x_ptr);
     2073:  453:		orbtree_remove_transplant(ptr, node_to_delete->right);
        -:  454:		OrbTreeNodeImpl *node_to_delete_parent =
     2073:  455:			orbtree_node(node_to_delete->parent);
     2073:  456:		if (node_to_delete->parent != null) {
     2072:  457:			if (node_to_delete_parent->left == null) {
     1063:  458:				w_ptr = node_to_delete_parent->right;
     1063:  459:				w = orbtree_node(w_ptr);
     1009:  460:			} else if (node_to_delete_parent) {
     1009:  461:				w_ptr = node_to_delete_parent->left;
     1009:  462:				w = orbtree_node(w_ptr);
        -:  463:			}
        -:  464:		}
     2073:  465:		if (x_ptr != null) {
      423:  466:			x = orbtree_node(x_ptr);
      423:  467:			p_ptr = x->parent;
      423:  468:			p = orbtree_node(p_ptr);
     1650:  469:		} else if (w_ptr != null) {
     1187:  470:			p_ptr = w->parent;
     1187:  471:			p = orbtree_node(p_ptr);
        -:  472:		}
     2927:  473:	} else if (node_to_delete->right == null) {
      298:  474:		x_ptr = node_to_delete->left;
      298:  475:		x = orbtree_node(x_ptr);
      298:  476:		orbtree_remove_transplant(ptr, node_to_delete->left);
        -:  477:		OrbTreeNodeImpl *node_to_delete_parent =
      298:  478:			orbtree_node(node_to_delete->parent);
      298:  479:		if (node_to_delete_parent) {
      298:  480:			w_ptr = node_to_delete_parent->left;
      298:  481:			w = orbtree_node(w_ptr);
        -:  482:		}
      298:  483:		p_ptr = x->parent;
      298:  484:		p = orbtree_node(p_ptr);
        -:  485:	} else {
     2629:  486:		Ptr successor_ptr = orbtree_find_successor(ptr);
     2629:  487:		OrbTreeNodeImpl *successor = orbtree_node(successor_ptr);
    2629*:  488:		do_fixup = IS_BLACK(successor_ptr);
        -:  489:
     2629:  490:		x_ptr = successor->right;
     2629:  491:		OrbTreeNodeImpl *successor_parent = orbtree_node(successor->parent);
     2629:  492:		w_ptr = successor_parent->right;
     2629:  493:		x = orbtree_node(x_ptr);
     2629:  494:		w = orbtree_node(w_ptr);
        -:  495:
     2629:  496:		if (w == NULL) {
      461:  497:			p_ptr = null;
      461:  498:			p = NULL;
     2168:  499:		} else if (w->parent == ptr) {
      828:  500:			w_ptr = node_to_delete->left;
      828:  501:			w = orbtree_node(w_ptr);
      828:  502:			p_ptr = successor_ptr;
      828:  503:			p = successor;
        -:  504:		} else {
     1340:  505:			p_ptr = w->parent;
     1340:  506:			p = orbtree_node(p_ptr);
        -:  507:		}
        -:  508:
     2629:  509:		if (successor->parent != ptr) {
     1801:  510:			orbtree_remove_transplant(successor_ptr, successor->right);
     1801:  511:			successor->right = node_to_delete->right;
     1801:  512:			OrbTreeNodeImpl *successor_right = orbtree_node(successor->right);
     1801:  513:			if (successor_right) {
     1801:  514:				successor_right->parent = successor_ptr;
        -:  515:			}
        -:  516:		}
        -:  517:
     2629:  518:		orbtree_remove_transplant(ptr, successor_ptr);
     2629:  519:		successor->left = node_to_delete->left;
        -:  520:
     2629:  521:		OrbTreeNodeImpl *successor_left = orbtree_node(successor->left);
     2629:  522:		successor_left->parent = successor_ptr;
     2629:  523:		orbtree_set_color_based_on_parent(successor_ptr, ptr);
        -:  524:	}
        -:  525:
     5000:  526:	if (do_fixup) {
     3772:  527:		if (w_ptr != null && p_ptr != null) {
     3771:  528:			orbtree_remove_fixup(p_ptr, w_ptr, x_ptr);
        -:  529:		} else {
       1*:  530:			if (orbtree_tl_ctx.tree->root) SET_BLACK(orbtree_tl_ctx.tree->root);
        -:  531:		}
        -:  532:	}
     5000:  533:}
        -:  534:
 25096581:  535:void *orbtree_node_right(const OrbTreeNode *node) {
 25096581:  536:	const OrbTreeNodeImpl *impl = (const OrbTreeNodeImpl *)node;
 25096581:  537:	if (impl->right == null) return NULL;
 12727619:  538:	return orbtree_value(impl->right);
        -:  539:}
        -:  540:
 25095458:  541:void *orbtree_node_left(const OrbTreeNode *node) {
 25095458:  542:	const OrbTreeNodeImpl *impl = (const OrbTreeNodeImpl *)node;
 25095458:  543:	if (impl->left == null) return NULL;
 12429411:  544:	return orbtree_value(impl->left);
        -:  545:}
        -:  546:
 10637594:  547:void *orbtree_node_parent(const OrbTreeNode *node) {
 10637594:  548:	const OrbTreeNodeImpl *impl = (const OrbTreeNodeImpl *)node;
10637594*:  549:	if (impl->parent == null) return NULL;
 10637594:  550:	return orbtree_value(impl->parent);
        -:  551:}
        -:  552:
 46305195:  553:bool orbtree_node_is_red(const OrbTreeNode *node) {
 46305195:  554:	const OrbTreeNodeImpl *impl = (const OrbTreeNodeImpl *)node;
 46305195:  555:	return (impl->right_subtree_height_color & RED_NODE) != 0;
        -:  556:}
        -:  557:
 36103698:  558:Ptr orbtree_node_ptr(const OrbTreeNode *node, bool is_right) {
36103698*:  559:	if (node == NULL) return null;
 36103698:  560:	const OrbTreeNodeImpl *impl = (const OrbTreeNodeImpl *)node;
 36103698:  561:	if (impl->parent == null) {
    34316:  562:		return orbtree_tl_ctx.tree->root;
        -:  563:	} else {
 36069382:  564:		OrbTreeNodeImpl *node = (OrbTreeNodeImpl *)orbtree_node(impl->parent);
 36069382:  565:		if (is_right)
 18323482:  566:			return node->right;
        -:  567:		else
 17745900:  568:			return node->left;
        -:  569:	}
        -:  570:}
        -:  571:
        2:  572:int orbtree_init(OrbTree *tree, const SlabAllocator *sa) {
        2:  573:	OrbTreeImpl *impl = (OrbTreeImpl *)tree;
        2:  574:	impl->sa = sa;
        2:  575:	impl->root = null;
        2:  576:	return 0;
        -:  577:}
        -:  578:
    15012:  579:void orbtree_set_tl_context(OrbTreeImpl *impl,
        -:  580:							const OrbTreeNodeWrapper *value) {
    15012:  581:	orbtree_tl_ctx.sa = impl->sa;
    15012:  582:	orbtree_tl_ctx.tree = impl;
    15012:  583:	orbtree_tl_ctx.offset = value->offset_of_orbtree_node;
    15012:  584:}
        -:  585:
     5007:  586:void *orbtree_get(const OrbTree *tree, const OrbTreeNodeWrapper *value,
        -:  587:				  OrbTreeSearch search, unsigned int offset) {
     5007:  588:	OrbTreeImpl *impl = (OrbTreeImpl *)tree;
    5007*:  589:	if (impl->root == null) return NULL;
     5007:  590:	orbtree_set_tl_context(impl, value);
     5007:  591:	OrbTreeNode *root = (OrbTreeNode *)orbtree_node(impl->root);
     5007:  592:	OrbTreeNode *target = (OrbTreeNode *)orbtree_node(value->ptr);
     5007:  593:	OrbTreeNodePair retval = {};
     5007:  594:	search(root, target, &retval);
        -:  595:
     5007:  596:	if (retval.self != null)
     5006:  597:		return orbtree_value(retval.self);
        -:  598:	else
        1:  599:		return NULL;
        -:  600:}
        -:  601:
     5005:  602:Ptr orbtree_put(OrbTree *tree, const OrbTreeNodeWrapper *value,
        -:  603:				OrbTreeSearch search) {
     5005:  604:	OrbTreeImpl *impl = (OrbTreeImpl *)tree;
     5005:  605:	orbtree_set_tl_context(impl, value);
        -:  606:
     5005:  607:	OrbTreeNode *target = (OrbTreeNode *)orbtree_node(value->ptr);
        -:  608:
     5005:  609:	OrbTreeNodePair pair = {.parent = null, .self = value->ptr};
     5005:  610:	if (impl->root != null) {
     5003:  611:		OrbTreeNode *root = (OrbTreeNode *)orbtree_node(impl->root);
     5003:  612:		search(root, target, &pair);
        -:  613:	}
        -:  614:
     5005:  615:	Ptr ret = orbtree_insert(impl, &pair, value->ptr);
     5005:  616:	if (ret == null) orbtree_put_fixup(value->ptr);
        -:  617:
     5005:  618:	return ret;
        -:  619:}
        -:  620:
     5000:  621:Ptr orbtree_remove(OrbTree *tree, const OrbTreeNodeWrapper *value,
        -:  622:				   OrbTreeSearch search) {
     5000:  623:	OrbTreeImpl *impl = (OrbTreeImpl *)tree;
     5000:  624:	orbtree_set_tl_context(impl, value);
        -:  625:
     5000:  626:	OrbTreeNode *target = (OrbTreeNode *)orbtree_node(value->ptr);
        -:  627:
     5000:  628:	OrbTreeNodePair pair = {.parent = null, .self = value->ptr};
     5000:  629:	if (impl->root != null) {
     5000:  630:		OrbTreeNode *root = (OrbTreeNode *)orbtree_node(impl->root);
     5000:  631:		search(root, target, &pair);
        -:  632:	}
        -:  633:
     5000:  634:	if (pair.self == null) {
    #####:  635:		return null;
        -:  636:	}
        -:  637:
     5000:  638:	orbtree_remove_impl(pair.self);
        -:  639:
     5000:  640:	return pair.self;
        -:  641:}
        -:  642:
    10005:  643:Ptr orbtree_root(const OrbTree *tree) {
    10005:  644:	OrbTreeImpl *impl = (OrbTreeImpl *)tree;
    10005:  645:	return impl->root;
        -:  646:}
        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:3
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <main/main.h>
        -:   16:
    #####:   17:int real_main(int argc, char **argv) {
    #####:   18:	return 0;
        -:   19:}
