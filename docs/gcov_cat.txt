        -:    0:Source:colors.c
        -:    0:Graph:colors.gcno
        -:    0:Data:colors.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/colors.h>
        -:   16:#include <base/os.h>
        -:   17:
    #####:   18:byte *get_dimmed() {
    #####:   19:	if (env("NO_COLOR") != NULL) {
    #####:   20:		return "";
        -:   21:	} else {
    #####:   22:		return "\x1b[2m";
        -:   23:	}
        -:   24:}
        -:   25:
    #####:   26:byte *get_red() {
    #####:   27:	if (env("NO_COLOR") != NULL) {
    #####:   28:		return "";
        -:   29:	} else {
    #####:   30:		return "\x1b[31m";
        -:   31:	}
        -:   32:}
        -:   33:
    #####:   34:byte *get_bright_red() {
    #####:   35:	if (env("NO_COLOR") != NULL) {
    #####:   36:		return "";
        -:   37:	} else {
    #####:   38:		return "\x1b[91m";
        -:   39:	}
        -:   40:}
        -:   41:
    #####:   42:byte *get_green() {
    #####:   43:	if (env("NO_COLOR") != NULL) {
    #####:   44:		return "";
        -:   45:	} else {
    #####:   46:		return "\x1b[32m";
        -:   47:	}
        -:   48:}
        -:   49:
    #####:   50:byte *get_yellow() {
    #####:   51:	if (env("NO_COLOR") != NULL) {
    #####:   52:		return "";
        -:   53:	} else {
    #####:   54:		return "\x1b[33m";
        -:   55:	}
        -:   56:}
        -:   57:
    #####:   58:byte *get_cyan() {
    #####:   59:	if (env("NO_COLOR") != NULL) {
    #####:   60:		return "";
        -:   61:	} else {
    #####:   62:		return "\x1b[36m";
        -:   63:	}
        -:   64:}
        -:   65:
    #####:   66:byte *get_magenta() {
    #####:   67:	if (env("NO_COLOR") != NULL) {
    #####:   68:		return "";
        -:   69:	} else {
    #####:   70:		return "\x1b[35m";
        -:   71:	}
        -:   72:}
        -:   73:
    #####:   74:byte *get_blue() {
    #####:   75:	if (env("NO_COLOR") != NULL) {
    #####:   76:		return "";
        -:   77:	} else {
    #####:   78:		return "\x1b[34m";
        -:   79:	}
        -:   80:}
        -:   81:
    #####:   82:byte *get_reset() {
    #####:   83:	if (env("NO_COLOR") != NULL) {
    #####:   84:		return "";
        -:   85:	} else {
    #####:   86:		return "\x1b[0m";
        -:   87:	}
        -:   88:}
        -:    0:Source:fam_alloc.c
        -:    0:Graph:fam_alloc.gcno
        -:    0:Data:fam_alloc.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/osdef.h>
        -:   18:#include <base/print_util.h>
        -:   19:#include <base/string.h>
        -:   20:#include <pthread.h>
        -:   21:
        -:   22:#define PTR_FLAGS_SEND 0
        -:   23:#define PTR_FLAGS_DIRECT 1
        -:   24:
        -:   25:_Thread_local SlabAllocator tl_slab_allocator = NULL;
        -:   26:SlabAllocator global_slab_allocator = NULL;
        -:   27:pthread_mutex_t global_allocator_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   28:
        -:   29:// use highest byte in aux for flags
       34:   30:void ptr_flag_set(Ptr ptr, byte flag, bool value) {
       34:   31:	int64 *aux = ptr_aux(ptr);
       34:   32:	if (value)
    #####:   33:		*aux |= (0x1ULL << (unsigned long long)flag) << 56;
        -:   34:	else
       34:   35:		*aux &= ~((0x1ULL << (unsigned long long)flag) << 56);
       34:   36:}
        -:   37:
       34:   38:bool ptr_flag_check(Ptr ptr, byte flag) {
       34:   39:	int64 *aux = ptr_aux(ptr);
       34:   40:	return (*aux) & ((0x1ULL << (unsigned long long)flag) << 56);
        -:   41:}
        -:   42:
       17:   43:int check_initialize_default_slab_allocator() {
       17:   44:	if (tl_slab_allocator == NULL)
        3:   45:		tl_slab_allocator = slab_allocator_create();
       17:   46:	if (global_slab_allocator == NULL) {
        3:   47:		pthread_mutex_lock(&global_allocator_lock);
        3:   48:		if (global_slab_allocator == NULL)
        3:   49:			global_slab_allocator = slab_allocator_create();
        3:   50:		pthread_mutex_unlock(&global_allocator_lock);
        -:   51:	}
      17*:   52:	return tl_slab_allocator && global_slab_allocator;
        -:   53:}
        -:   54:
       17:   55:Ptr fam_alloc(unsigned int size, bool send) {
        -:   56:	// this size is reserved for 'null'
       17:   57:	if (size == UINT32_MAX) {
    #####:   58:		SetErr(Overflow);
    #####:   59:		return NULL;
        -:   60:	}
       17:   61:	if (!check_initialize_default_slab_allocator())
    #####:   62:		return NULL;
        -:   63:	Ptr ret;
       17:   64:	if (size > MAX_SLAB_SIZE)
    #####:   65:		ret = ptr_direct_alloc(size);
       17:   66:	else if (send) {
    #####:   67:		pthread_mutex_lock(&global_allocator_lock);
    #####:   68:		ret = slab_allocator_allocate(global_slab_allocator, size);
    #####:   69:		pthread_mutex_unlock(&global_allocator_lock);
        -:   70:	} else
       17:   71:		ret = slab_allocator_allocate(tl_slab_allocator, size);
        -:   72:
       17:   73:	if (ret) {
       17:   74:		int64 *aux = ptr_aux(ret);
       17:   75:		*aux = 0;
       17:   76:		ptr_flag_set(ret, PTR_FLAGS_SEND, send);
       17:   77:		ptr_flag_set(ret, PTR_FLAGS_DIRECT, size > MAX_SLAB_SIZE);
        -:   78:	}
        -:   79:
       17:   80:	return ret;
        -:   81:}
    #####:   82:Ptr fam_resize(Ptr ptr, unsigned int size) {
    #####:   83:	if (!check_initialize_default_slab_allocator())
    #####:   84:		return NULL;
        -:   85:
    #####:   86:	if (ptr == NULL) {
    #####:   87:		SetErr(IllegalArgument);
    #####:   88:		return NULL;
        -:   89:	}
        -:   90:
    #####:   91:	bool send = ptr_flag_check(ptr, PTR_FLAGS_SEND);
    #####:   92:	Ptr ret = fam_alloc(size, send);
    #####:   93:	if (ret) {
    #####:   94:		unsigned int len = $len(ptr);
    #####:   95:		if (len > size)
    #####:   96:			len = size;
    #####:   97:		memcpy($(ret), $(ptr), len);
        -:   98:	}
        -:   99:
    #####:  100:	return ret;
        -:  101:}
        -:  102:
       17:  103:void fam_release(Ptr *ptr) {
       17:  104:	if (nil(*ptr)) {
    #####:  105:		panic("fam_free on nil ptr!");
       17:  106:	} else if (ptr_flag_check(*ptr, PTR_FLAGS_DIRECT)) {
    #####:  107:		ptr_direct_release(*ptr);
       17:  108:	} else if (ptr_flag_check(*ptr, PTR_FLAGS_SEND)) {
    #####:  109:		pthread_mutex_lock(&global_allocator_lock);
    #####:  110:		slab_allocator_free(global_slab_allocator, *ptr);
    #####:  111:		pthread_mutex_unlock(&global_allocator_lock);
        -:  112:	} else
       17:  113:		slab_allocator_free(tl_slab_allocator, *ptr);
       17:  114:}
        -:  115:
        7:  116:void fam_alloc_thread_local_cleanup() {
        7:  117:	slab_allocator_cleanup(&tl_slab_allocator);
        7:  118:}
        -:  119:
        -:  120:#ifdef TEST
        7:  121:void fam_alloc_global_cleanup() {
        7:  122:	slab_allocator_cleanup(&global_slab_allocator);
        7:  123:}
        -:  124:
        7:  125:int64 fam_alloc_count_tl_slab_allocator() {
        7:  126:	if (tl_slab_allocator == NULL)
        4:  127:		return 0;
        3:  128:	return slab_allocator_cur_slabs_allocated(tl_slab_allocator);
        -:  129:}
        7:  130:int64 fam_alloc_count_global_allocator() {
        7:  131:	if (global_slab_allocator == NULL)
        4:  132:		return 0;
        3:  133:	return slab_allocator_cur_slabs_allocated(global_slab_allocator);
        -:  134:}
        -:  135:#endif // TEST
        -:    0:Source:fam_err.c
        -:    0:Graph:fam_err.gcno
        -:    0:Data:fam_err.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/macro_util.h>
        -:   17:#include <base/os.h>
        -:   18:// #include <base/print_util.h>
        -:   19:#include <base/string.h>
        -:   20:
        -:   21:_Thread_local byte fam_err_last[ERR_LEN + 1] = {""};
        -:   22:
        -:   23:_Thread_local int64 fam_err = NoErrors;
        -:   24://_Thread_local Backtrace thread_local_bt__;
        -:   25:
    #####:   26:const byte *get_err() {
        -:   27:	// return strncpy(fam_err_last, FamErrText[fam_err], ERR_LEN);
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
    #####:   31:void print_err(const byte *text) {
        -:   32:	// println("{}: {}", FamErrText[fam_err], text);
        -:   33:	// backtrace_print(&thread_local_bt__);
    #####:   34:}
        -:   35:
        -:   36:// void do_backtrace_generate(Backtrace *bt) {
        -:   37:// if (env("CBACKTRACE") != NULL) {
        -:   38://  backtrace_generate(bt);
        -:   39://	}
        -:   40://}
        -:    0:Source:object.c
        -:    0:Graph:object.gcno
        -:    0:Data:object.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/object.h>
        -:   18:#include <base/osdef.h>
        -:   19:#include <base/string.h>
        -:   20:
        -:   21:#include <stdio.h>
        -:   22:
        -:   23:#define OBJECT_FLAG_FAM_ALLOC_RESERVED1 0
        -:   24:#define OBJECT_FLAG_FAM_ALLOC_RESERVED2 1
        -:   25:#define OBJECT_FLAG_TYPE0 2
        -:   26:#define OBJECT_FLAG_TYPE1 3
        -:   27:#define OBJECT_FLAG_TYPE2 4
        -:   28:
        9:   29:unsigned int object_get_size(ObjectType type) {
        9:   30:	if (type == ObjectTypeInt64)
        3:   31:		return sizeof(int64);
        6:   32:	else if (type == ObjectTypeByte)
    #####:   33:		return sizeof(byte);
        6:   34:	else if (type == ObjectTypeBool)
    #####:   35:		return sizeof(bool);
        6:   36:	else if (type == ObjectTypeFloat)
    #####:   37:		return sizeof(float64);
        6:   38:	else if (type == ObjectTypeInt32)
        3:   39:		return sizeof(int);
        3:   40:	else if (type == ObjectTypeWeak)
        2:   41:		return sizeof(int64);
        1:   42:	else if (type == ObjectTypeBox)
        1:   43:		return sizeof(int64);
        -:   44:
    #####:   45:	return 0;
        -:   46:}
        -:   47:
       24:   48:void object_set_ptr_flag(Ptr ptr, unsigned long long flag, bool value) {
       24:   49:	int64 *aux = ptr_aux(ptr);
       24:   50:	if (value)
       17:   51:		*aux |= (0x1ULL << (unsigned long long)flag) << 56;
        -:   52:	else
        7:   53:		*aux &= ~((0x1ULL << (unsigned long long)flag) << 56);
       24:   54:}
        -:   55:
      102:   56:bool object_get_ptr_flag(Ptr ptr, unsigned long long flag) {
      102:   57:	int64 *aux = ptr_aux(ptr);
      102:   58:	return ((0x1ULL << (unsigned long long)flag) << 56) & *aux;
        -:   59:}
        -:   60:
        8:   61:void object_set_ptr_type(Ptr ptr, ObjectType type) {
        8:   62:	if (type == ObjectTypeInt64) {
        2:   63:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        2:   64:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
        2:   65:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
        6:   66:	} else if (type == ObjectTypeInt32) {
        3:   67:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        3:   68:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
        3:   69:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
        3:   70:	} else if (type == ObjectTypeWeak) {
        2:   71:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        2:   72:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
        2:   73:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
        1:   74:	} else if (type == ObjectTypeBox) {
        1:   75:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, true);
        1:   76:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
        1:   77:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
    #####:   78:	} else if (type == ObjectTypeFloat) {
    #####:   79:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
    #####:   80:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
    #####:   81:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
    #####:   82:	} else if (type == ObjectTypeBool) {
    #####:   83:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
    #####:   84:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, true);
    #####:   85:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, false);
    #####:   86:	} else if (type == ObjectTypeByte) {
    #####:   87:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE0, false);
    #####:   88:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE1, false);
    #####:   89:		object_set_ptr_flag(ptr, OBJECT_FLAG_TYPE2, true);
        -:   90:	}
        8:   91:}
        -:   92:
        7:   93:Object object_create(ObjectType type, const void *value) {
        7:   94:	if (value == NULL || type < 0 || type >= __ObjectTypeCount__) {
    #####:   95:		SetErr(IllegalArgument);
    #####:   96:		return NULL;
        -:   97:	}
        -:   98:
        7:   99:	unsigned int size = object_get_size(type);
        7:  100:	Ptr ret = fam_alloc(size, false);
        7:  101:	if (ret == NULL)
    #####:  102:		return ret;
        -:  103:
        7:  104:	memcpy($(ret), value, size);
        7:  105:	object_set_ptr_type(ret, type);
        7:  106:	int64 *aux = ptr_aux(ret);
        -:  107:	// set strong count to 1
        7:  108:	(*aux)++;
        -:  109:
        7:  110:	return ret;
        -:  111:}
        -:  112:
        1:  113:Object object_create_box(unsigned int size) {
        1:  114:	unsigned int box_size = object_get_size(ObjectTypeBox);
        1:  115:	Ptr ret = fam_alloc(box_size, false);
        1:  116:	if (ret == NULL)
    #####:  117:		return ret;
        1:  118:	Ptr ptr = fam_alloc(size, false);
        1:  119:	if (ptr == NULL) {
    #####:  120:		fam_release(&ret);
    #####:  121:		return NULL;
        -:  122:	}
        1:  123:	memcpy($(ret), &ptr, box_size);
        1:  124:	object_set_ptr_type(ret, ObjectTypeBox);
        1:  125:	int64 *aux = ptr_aux(ret);
        -:  126:
        -:  127:	// set strong count to 1
        1:  128:	(*aux)++;
        -:  129:
        1:  130:	return ret;
        -:  131:}
        -:  132:
       14:  133:const void *object_value_of(const Object obj) {
       14:  134:	if (nil(obj)) {
    #####:  135:		SetErr(ObjectConsumed);
    #####:  136:		return NULL;
        -:  137:	}
       14:  138:	return $(obj);
        -:  139:}
        -:  140:
       34:  141:ObjectType object_type(const Object obj) {
       34:  142:	if (nil(obj)) {
    #####:  143:		SetErr(ObjectConsumed);
    #####:  144:		return -1;
        -:  145:	}
       34:  146:	if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE0)) {
       34:  147:		if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE1)) {
       25:  148:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
        8:  149:				return ObjectTypeInt64;
       17:  150:			return ObjectTypeInt32;
        -:  151:		} else {
        9:  152:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
        7:  153:				return ObjectTypeWeak;
        -:  154:			else
        2:  155:				return ObjectTypeBox;
        -:  156:		}
        -:  157:	} else {
    #####:  158:		if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE1)) {
    #####:  159:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
    #####:  160:				return ObjectTypeFloat;
        -:  161:			else
    #####:  162:				return ObjectTypeBool;
        -:  163:		} else {
    #####:  164:			if (object_get_ptr_flag(obj, OBJECT_FLAG_TYPE2))
    #####:  165:				return ObjectTypeByte;
        -:  166:		}
        -:  167:	}
    #####:  168:	return ObjectTypeBool;
        -:  169:}
        1:  170:unsigned int object_size(const Object obj) {
        1:  171:	return object_get_size(object_type(obj));
        -:  172:}
        -:  173:
        1:  174:int object_mutate(Object obj, const void *value) {
        1:  175:	if (nil(obj)) {
    #####:  176:		SetErr(ObjectConsumed);
    #####:  177:		return -1;
        -:  178:	}
        1:  179:	if (object_type(obj) == ObjectTypeWeak) {
    #####:  180:		SetErr(IllegalArgument);
    #####:  181:		return -1;
        -:  182:	}
        -:  183:
        1:  184:	unsigned int size = object_size(obj);
        1:  185:	if (size)
        1:  186:		memcpy($(obj), value, size);
        1:  187:	return 0;
        -:  188:}
        -:  189:
    #####:  190:int object_set_property(Object obj, const char *key, const Object value) {
    #####:  191:	return 0;
        -:  192:}
    #####:  193:Object object_delete_property(Object obj, const char *key) {
    #####:  194:	return NULL;
        -:  195:}
    #####:  196:Object object_get_property(const Object obj, const char *key) {
    #####:  197:	return NULL;
        -:  198:}
        -:  199:
        9:  200:int object_decrement_strong(Object obj) {
        9:  201:	int64 *aux = ptr_aux(obj);
        9:  202:	int64 count = *aux & 0xFFFFFF;
        9:  203:	int64 flags = *aux & 0xFFFFFFFFFF000000LL;
        9:  204:	count--;
        -:  205:
        9:  206:	if (count) {
        3:  207:		*aux = count | flags;
        3:  208:		return count;
        -:  209:
        -:  210:	} else {
        -:  211:		// set strong count to 0
        6:  212:		*aux = flags;
        -:  213:
        -:  214:		// return the weak count
        6:  215:		return *aux & 0xFFFFFF000000LL;
        -:  216:	}
        -:  217:}
        -:  218:
        3:  219:int object_increment_strong(Object obj) {
        -:  220:	// strong count is first three bytes. Mask it and ensure we're not overflowing
        3:  221:	int64 *aux = ptr_aux(obj);
        3:  222:	if ((*aux & 0xFFFFFF) == 0xFFFFFF) {
    #####:  223:		SetErr(Overflow);
    #####:  224:		return -1;
        -:  225:	}
        -:  226:
        3:  227:	(*aux)++;
        3:  228:	return 0;
        -:  229:}
        -:  230:
        2:  231:int object_decrement_weak(Object obj) {
        2:  232:	int64 *aux = ptr_aux(obj);
        2:  233:	int64 count = *aux & 0xFFFFFF000000LL;
        2:  234:	int64 flags = *aux & 0xFFFF000000FFFFFFLL;
        2:  235:	count -= (0x1 << 24);
        2:  236:	if (count) {
    #####:  237:		*aux = count | flags;
    #####:  238:		return count;
        -:  239:
        -:  240:	} else {
        2:  241:		*aux = flags;
        -:  242:		// return the strong count
        2:  243:		return *aux & 0xFFFFFF;
        -:  244:	}
        -:  245:}
        -:  246:
        2:  247:int object_increment_weak(Object obj) {
        -:  248:	// weak count is second three bytes. Mask it and ensure we're not overflowing
        2:  249:	int64 *aux = ptr_aux(obj);
        2:  250:	if ((*aux & 0xFFFFFF000000LL) == 0xFFFFFF000000LL) {
    #####:  251:		SetErr(Overflow);
    #####:  252:		return -1;
        -:  253:	}
        -:  254:
        2:  255:	(*aux) += (0x1 << 24);
        -:  256:
        2:  257:	return 0;
        -:  258:}
        -:  259:
        -:  260:// Functions that require override of const
        -:  261:#pragma clang diagnostic ignored "-Wincompatible-pointer-types-discards-qualifiers"
        -:  262:#pragma clang diagnostic ignored "-Wunknown-warning-option"
        -:  263:#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
        -:  264:
        1:  265:Object object_move(const Object src) {
        1:  266:	if (nil(src)) {
    #####:  267:		SetErr(ObjectConsumed);
    #####:  268:		return NULL;
        -:  269:	}
        1:  270:	if (object_type(src) == ObjectTypeWeak) {
    #####:  271:		SetErr(IllegalArgument);
    #####:  272:		return NULL;
        -:  273:	}
        1:  274:	if (nil(src)) {
    #####:  275:		SetErr(ObjectConsumed);
    #####:  276:		return NULL;
        -:  277:	}
        -:  278:
        1:  279:	ObjectNc ret = object_create(object_type(src), $(src));
        1:  280:	Object_cleanup(&src);
        1:  281:	return ret;
        -:  282:}
        3:  283:Object object_ref(const Object src) {
        3:  284:	if (nil(src)) {
    #####:  285:		SetErr(ObjectConsumed);
    #####:  286:		return NULL;
        -:  287:	}
        3:  288:	if (object_type(src) == ObjectTypeWeak) {
    #####:  289:		SetErr(IllegalArgument);
    #####:  290:		return NULL;
        -:  291:	}
        -:  292:
        3:  293:	if (object_increment_strong(src))
    #####:  294:		return NULL;
        -:  295:
        3:  296:	ObjectNc ret = src;
        3:  297:	return ret;
        -:  298:}
        -:  299:
        2:  300:Object object_weak(const Object src) {
        2:  301:	if (nil(src)) {
    #####:  302:		SetErr(ObjectConsumed);
    #####:  303:		return NULL;
        -:  304:	}
        2:  305:	if (object_type(src) == ObjectTypeWeak) {
    #####:  306:		SetErr(IllegalArgument);
    #####:  307:		return NULL;
        -:  308:	}
        2:  309:	unsigned long long v = (unsigned long long)src;
        2:  310:	ObjectNc weak = object_create(ObjectTypeWeak, &v);
        2:  311:	if (object_increment_weak(src))
    #####:  312:		return NULL;
        -:  313:
        2:  314:	return weak;
        -:  315:}
        -:  316:
        3:  317:Object object_upgrade(const Object src) {
        3:  318:	if (nil(src)) {
    #####:  319:		SetErr(ObjectConsumed);
    #####:  320:		return NULL;
        -:  321:	}
        3:  322:	if (object_type(src) != ObjectTypeWeak) {
    #####:  323:		SetErr(IllegalArgument);
    #####:  324:		return NULL;
        -:  325:	}
        3:  326:	unsigned long long *target = object_value_of(src);
        3:  327:	ObjectNc w = (ObjectNc)*target;
        3:  328:	int64 *aux = ptr_aux(w);
        3:  329:	int64 strong_count = *aux & 0xFFFFFF;
        3:  330:	if (!strong_count)
        1:  331:		return NULL;
        -:  332:
        -:  333:	// there are remaining strong references we can upgrade
        2:  334:	return object_ref(w);
        -:  335:}
        -:  336:
       12:  337:void Object_cleanup(const Object *obj) {
       12:  338:	if (!nil(*obj)) {
        -:  339:		// deallocate the pointer
       11:  340:		if (object_type(*obj) == ObjectTypeBox) {
        1:  341:			Ptr inner = *(Ptr *)object_value_of(*obj);
        1:  342:			fam_release(&inner);
        -:  343:		}
       11:  344:		if (object_type(*obj) == ObjectTypeWeak) {
        2:  345:			unsigned long long *target = object_value_of(*obj);
        2:  346:			ObjectNc w = (ObjectNc)*target;
        -:  347:
        2:  348:			int odwval = object_decrement_weak(w);
        2:  349:			if (!odwval) {
        1:  350:				fam_release(&w);
        -:  351:			}
        2:  352:			fam_release(obj);
        -:  353:		} else {
        9:  354:			int odsval = object_decrement_strong(*obj);
        9:  355:			if (!odsval) {
        5:  356:				fam_release(obj);
        -:  357:			}
        -:  358:		}
        -:  359:	}
       12:  360:}
        -:    0:Source:os.c
        -:    0:Graph:os.gcno
        -:    0:Data:os.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/os.h>
        -:   17:#include <base/osdef.h>
        -:   18:
        -:   19:_Thread_local ResourceStats THREAD_LOCAL_RESOURCE_STATS = {0, 0, 0, 0, 0};
        -:   20:
       73:   21:void *alloc(int64 size, int64 zeroed) {
       73:   22:	if (!size) {
    #####:   23:		SetErr(IllegalArgument);
    #####:   24:		return NULL;
        -:   25:	}
        -:   26:	void *ret;
       73:   27:	ret = malloc(size);
        -:   28:
       73:   29:	if (ret) {
       73:   30:		THREAD_LOCAL_RESOURCE_STATS.alloc_sum += 1;
       73:   31:		if (zeroed)
    #####:   32:			memset(ret, 0, size);
        -:   33:	} else {
    #####:   34:		SetErr(AllocErr);
        -:   35:	}
        -:   36:
       73:   37:	return ret;
        -:   38:}
       64:   39:void *resize(void *ptr, int64 size) {
       64:   40:	if (!ptr || !size) {
    #####:   41:		SetErr(IllegalArgument);
    #####:   42:		return NULL;
        -:   43:	}
        -:   44:	void *ret;
       64:   45:	ret = realloc(ptr, size);
        -:   46:
       64:   47:	if (ret) {
       64:   48:		THREAD_LOCAL_RESOURCE_STATS.resize_sum += 1;
        -:   49:	} else {
    #####:   50:		SetErr(AllocErr);
        -:   51:	}
       64:   52:	return ret;
        -:   53:}
        -:   54:
       73:   55:void release(void *ptr) {
       73:   56:	if (!ptr) {
    #####:   57:		SetErr(IllegalArgument);
    #####:   58:		return;
        -:   59:	}
       73:   60:	THREAD_LOCAL_RESOURCE_STATS.release_sum += 1;
       73:   61:	free(ptr);
        -:   62:}
        -:   63:
       14:   64:int64 alloc_sum() {
       14:   65:	return THREAD_LOCAL_RESOURCE_STATS.alloc_sum;
        -:   66:}
    #####:   67:int64 resize_sum() {
    #####:   68:	return THREAD_LOCAL_RESOURCE_STATS.resize_sum;
        -:   69:}
       14:   70:int64 release_sum() {
       14:   71:	return THREAD_LOCAL_RESOURCE_STATS.release_sum;
        -:   72:}
        -:   73:
        -:   74:char *getenv(const char *name);
        -:   75:
    #####:   76:byte *env(const byte *name) {
    #####:   77:	return getenv(name);
        -:   78:}
        -:    0:Source:print_util.c
        -:    0:Graph:print_util.gcno
        -:    0:Data:print_util.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <stdarg.h>
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
    #####:   18:void __attribute__((no_return)) panic(const char *fmt, ...) {
        -:   19:	char buf[1024];
        -:   20:	va_list args;
    #####:   21:	fprintf(stderr, "Panic: ");
    #####:   22:	va_start(args, fmt);
    #####:   23:	vfprintf(stderr, fmt, args);
    #####:   24:	vsnprintf(buf, 1024, fmt, args);
    #####:   25:	va_end(args);
    #####:   26:	fprintf(stderr, "\n");
        -:   27:
    #####:   28:	exit(-1);
        -:   29:}
        -:   30:
        -:   31:/*
        -:   32:#include <base/fam_err.h>
        -:   33:#include <base/macro_util.h>
        -:   34:#include <base/os.h>
        -:   35:#include <base/print_util.h>
        -:   36:#include <base/string.h>
        -:   37:
        -:   38:#define BUF_LEN 64
        -:   39:
        -:   40:// get the va functionality (with GCC/Clang use the builtin version, otherwise use stdarg)
        -:   41:#if defined(__GNUC__) || defined(__clang__)
        -:   42:typedef __builtin_va_list va_list;
        -:   43:#define va_start(ap, param) __builtin_va_start(ap, param)
        -:   44:#define va_end(ap) __builtin_va_end(ap)
        -:   45:#define va_arg(ap, type) __builtin_va_arg(ap, type)
        -:   46:#else // __GNUC__ or __clang__
        -:   47:#include <stdarg.h>
        -:   48:#endif // __GNUC__ or __clang__
        -:   49:
        -:   50:i32 write_loop(const Stream *strm, u8 *s, i32 *cur, i32 limit, const u8 *buf, u64 len) {
        -:   51:	if (s) {
        -:   52:		if (strm->handle == -1) {
        -:   53:			// length only
        -:   54:			*cur += len;
        -:   55:		} else if (*cur < limit) {
        -:   56:			u8 *res;
        -:   57:			if (*cur == 0) {
        -:   58:				res = strncpy(s, buf, len);
        -:   59:				if (res == NULL)
        -:   60:					return -1;
        -:   61:			} else {
        -:   62:				res = strncat(s, buf, len);
        -:   63:				if (res == NULL)
        -:   64:					return -1;
        -:   65:			}
        -:   66:
        -:   67:			i32 l = strlen(buf);
        -:   68:			*cur = l;
        -:   69:		}
        -:   70:	} else {
        -:   71:		while (len > 0) {
        -:   72:			i64 w = strm_write(strm, buf, len);
        -:   73:			if (w < 0) {
        -:   74:				SetErr(IO);
        -:   75:				return w;
        -:   76:			}
        -:   77:
        -:   78:			len -= w;
        -:   79:		}
        -:   80:	}
        -:   81:	return 0;
        -:   82:}
        -:   83:
        -:   84:i32 print_impl(const Stream *strm, u8 *s, i32 capacity, bool nl, bool do_exit, i32 code,
        -:   85:			   const u8 *prefix, const u8 *fmt, ...) {
        -:   86:	int ret = 0;
        -:   87:	if (capacity < 0 && s) {
        -:   88:		SetErr(IllegalArgument);
        -:   89:		ret = -1;
        -:   90:	}
        -:   91:	if (s) {
        -:   92:		memset(s, '\0', capacity);
        -:   93:	}
        -:   94:	va_list args;
        -:   95:	va_start(args, fmt);
        -:   96:	i32 max = capacity;
        -:   97:	capacity = 0;
        -:   98:
        -:   99:	if (prefix && ret != -1) {
        -:  100:		if (write_loop(strm, s, &capacity, max, prefix, strlen(prefix)))
        -:  101:			ret = -1;
        -:  102:	}
        -:  103:
        -:  104:	while (ret != -1) {
        -:  105:		bool is_hex = false;
        -:  106:		const u8 *next = strstr(fmt, "{}");
        -:  107:		const u8 *next_hex = strstr(fmt, "{hex}");
        -:  108:		if ((next_hex && !next) || (next_hex && next_hex < next)) {
        -:  109:			next = next_hex;
        -:  110:			is_hex = true;
        -:  111:		}
        -:  112:
        -:  113:		if (next == NULL) {
        -:  114:			if (write_loop(strm, s, &capacity, max, fmt, strlen(fmt))) {
        -:  115:				ret = -1;
        -:  116:				break;
        -:  117:			}
        -:  118:			if (nl)
        -:  119:				if (write_loop(strm, s, &capacity, max, "\n", 1)) {
        -:  120:					ret = -1;
        -:  121:					break;
        -:  122:				}
        -:  123:			break;
        -:  124:		} else {
        -:  125:			u64 diff = next - fmt;
        -:  126:			u8 buf[1 + diff];
        -:  127:			memset(buf, '\0', 1 + diff);
        -:  128:			strncpy(buf, fmt, diff);
        -:  129:			if (write_loop(strm, s, &capacity, max, buf, diff)) {
        -:  130:				ret = -1;
        -:  131:				break;
        -:  132:			}
        -:  133:		}
        -:  134:
        -:  135:		PrintPair arg = va_arg(args, PrintPair);
        -:  136:
        -:  137:		if (arg.type == PrintTypeTerm) {
        -:  138:			if (next) {
        -:  139:				if (write_loop(strm, s, &capacity, max, next, strlen(next))) {
        -:  140:					ret = -1;
        -:  141:					break;
        -:  142:				}
        -:  143:				if (nl)
        -:  144:					if (write_loop(strm, s, &capacity, max, "\n", 1)) {
        -:  145:						ret = -1;
        -:  146:						break;
        -:  147:					}
        -:  148:			}
        -:  149:			break;
        -:  150:		} else if (arg.type == PrintTypeBool) {
        -:  151:			bool value;
        -:  152:			memcpy(&value, arg.buf, sizeof(bool));
        -:  153:			u8 buf[BUF_LEN];
        -:  154:			if (value)
        -:  155:				strncpy(buf, "true", 5);
        -:  156:			else
        -:  157:				strncpy(buf, "false", 6);
        -:  158:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  159:				ret = -1;
        -:  160:				break;
        -:  161:			}
        -:  162:		} else if (arg.type == PrintTypeF64) {
        -:  163:			f64 value;
        -:  164:			memcpy(&value, arg.buf, sizeof(f64));
        -:  165:			u8 buf[BUF_LEN];
        -:  166:			strcpy(buf, "");
        -:  167:			snprintf(buf, BUF_LEN - 1, "%lf", value);
        -:  168:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  169:				ret = -1;
        -:  170:				break;
        -:  171:			}
        -:  172:		} else if (arg.type == PrintTypeF32) {
        -:  173:			f32 value;
        -:  174:			memcpy(&value, arg.buf, sizeof(f32));
        -:  175:			u8 buf[BUF_LEN];
        -:  176:			strcpy(buf, "");
        -:  177:			snprintf(buf, BUF_LEN - 1, "%f", value);
        -:  178:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  179:				ret = -1;
        -:  180:				break;
        -:  181:			}
        -:  182:		} else if (arg.type == PrintTypeI64) {
        -:  183:			i64 value;
        -:  184:			memcpy(&value, arg.buf, sizeof(i64));
        -:  185:			u8 buf[BUF_LEN];
        -:  186:			strcpy(buf, "");
        -:  187:			if (is_hex)
        -:  188:				snprintf(buf, BUF_LEN - 1, "%llX", value);
        -:  189:			else
        -:  190:				snprintf(buf, BUF_LEN - 1, "%lli", value);
        -:  191:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  192:				ret = -1;
        -:  193:				break;
        -:  194:			}
        -:  195:		} else if (arg.type == PrintTypeU64) {
        -:  196:			u64 value;
        -:  197:			memcpy(&value, arg.buf, sizeof(u64));
        -:  198:			u8 buf[BUF_LEN];
        -:  199:			strcpy(buf, "");
        -:  200:			if (is_hex)
        -:  201:				snprintf(buf, BUF_LEN - 1, "%llx", value);
        -:  202:			else
        -:  203:				snprintf(buf, BUF_LEN - 1, "%llu", value);
        -:  204:
        -:  205:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  206:				ret = -1;
        -:  207:				break;
        -:  208:			}
        -:  209:		} else if (arg.type == PrintTypeI32) {
        -:  210:			i32 value;
        -:  211:			memcpy(&value, arg.buf, sizeof(i32));
        -:  212:			u8 buf[BUF_LEN];
        -:  213:			strcpy(buf, "");
        -:  214:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  215:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  216:				ret = -1;
        -:  217:				break;
        -:  218:			}
        -:  219:		} else if (arg.type == PrintTypeU32) {
        -:  220:			u32 value;
        -:  221:			memcpy(&value, arg.buf, sizeof(u32));
        -:  222:			u8 buf[BUF_LEN];
        -:  223:			strcpy(buf, "");
        -:  224:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  225:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  226:				ret = -1;
        -:  227:				break;
        -:  228:			}
        -:  229:		} else if (arg.type == PrintTypeI16) {
        -:  230:			i16 value;
        -:  231:			memcpy(&value, arg.buf, sizeof(i16));
        -:  232:			u8 buf[BUF_LEN];
        -:  233:			strcpy(buf, "");
        -:  234:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  235:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  236:				ret = -1;
        -:  237:				break;
        -:  238:			}
        -:  239:		} else if (arg.type == PrintTypeU16) {
        -:  240:			u16 value;
        -:  241:			memcpy(&value, arg.buf, sizeof(u16));
        -:  242:			u8 buf[BUF_LEN];
        -:  243:			strcpy(buf, "");
        -:  244:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  245:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  246:				ret = -1;
        -:  247:				break;
        -:  248:			}
        -:  249:		} else if (arg.type == PrintTypeI8) {
        -:  250:			i8 value;
        -:  251:			memcpy(&value, arg.buf, sizeof(i8));
        -:  252:			u8 buf[BUF_LEN];
        -:  253:			strcpy(buf, "");
        -:  254:			snprintf(buf, BUF_LEN - 1, "%i", value);
        -:  255:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  256:				ret = -1;
        -:  257:				break;
        -:  258:			}
        -:  259:		} else if (arg.type == PrintTypeU8) {
        -:  260:			u8 value;
        -:  261:			memcpy(&value, arg.buf, sizeof(u8));
        -:  262:			u8 buf[BUF_LEN];
        -:  263:			strcpy(buf, "");
        -:  264:			snprintf(buf, BUF_LEN - 1, "%u", value);
        -:  265:			if (write_loop(strm, s, &capacity, max, buf, strlen(buf))) {
        -:  266:				ret = -1;
        -:  267:				break;
        -:  268:			}
        -:  269:		} else if (arg.type == PrintTypeString) {
        -:  270:			if (write_loop(strm, s, &capacity, max, arg.data, strlen(arg.data))) {
        -:  271:				ret = -1;
        -:  272:				break;
        -:  273:			}
        -:  274:		}
        -:  275:		if (is_hex)
        -:  276:			fmt = next + 5;
        -:  277:		else
        -:  278:			fmt = next + 2;
        -:  279:	}
        -:  280:
        -:  281:	va_end(args);
        -:  282:
        -:  283:	if (do_exit) {
        -:  284:		Backtrace bt;
        -:  285:		backtrace_generate(&bt);
        -:  286:		backtrace_print(&bt);
        -:  287:
        -:  288:		exit(code);
        -:  289:	}
        -:  290:
        -:  291:	if (ret == -1)
        -:  292:		return ret;
        -:  293:	return capacity;
        -:  294:}
        -:  295:*/
        -:    0:Source:slabs.c
        -:    0:Graph:slabs.gcno
        -:    0:Data:slabs.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_err.h>
        -:   16:#include <base/os.h>
        -:   17:#include <base/print_util.h>
        -:   18:#include <base/slabs.h>
        -:   19:#include <stdio.h>
        -:   20:
        -:   21:#define MAX_SLAB_TYPES 256
        -:   22:#define SLAB_SIZES 257
        -:   23:#define SLABS_PER_RESIZE 128
        -:   24:#define INITIAL_CHUNKS 0
        -:   25:
        -:   26:typedef struct Type {
        -:   27:	// slab id used internally by sa
        -:   28:	unsigned int id;
        -:   29:	// len of slab
        -:   30:	unsigned int len;
        -:   31:	int64 aux; // aux data can be used by caller as desired
        -:   32:	// user data
        -:   33:	byte data[];
        -:   34:} Type;
        -:   35:
        -:   36:const Type null_impl = {.id = 0, .len = UINT32_MAX};
        -:   37:const struct Type *null = &null_impl;
        -:   38:
        -:   39:#define SLAB_OVERHEAD sizeof(Type)
        -:   40:
    22181:   41:unsigned int ptr_len(const Ptr ptr) {
    22181:   42:	return ptr->len;
        -:   43:}
        -:   44:
     9217:   45:unsigned int ptr_id(const Ptr ptr) {
     9217:   46:	return ptr->id;
        -:   47:}
        -:   48:
        -:   49:// reutrn pointer to slab data
     9019:   50:void *ptr_data(const Ptr ptr) {
     9019:   51:	return ptr->data;
        -:   52:}
        -:   53:
      279:   54:void *ptr_aux(const Ptr ptr) {
      279:   55:	return &ptr->aux;
        -:   56:}
        -:   57:
        -:   58:// Direct alloc (len not used)
    #####:   59:Ptr ptr_direct_alloc(unsigned int size) {
        -:   60:	if (size < 0) {
        -:   61:		SetErr(IllegalArgument);
        -:   62:		return NULL;
        -:   63:	}
    #####:   64:	Ptr ret = alloc(size, false);
    #####:   65:	ret->len = size;
    #####:   66:	return ret;
        -:   67:}
    #####:   68:void ptr_direct_release(Ptr ptr) {
    #####:   69:	release(ptr);
    #####:   70:}
        -:   71:
        -:   72:// Slab Type definition
        -:   73:typedef struct SlabType {
        -:   74:	unsigned int slab_size;
        -:   75:	unsigned int slabs_per_resize;
        -:   76:	unsigned int initial_chunks;
        -:   77:	unsigned int max_slabs;
        -:   78:} SlabType;
        -:   79:
        -:   80:typedef struct SlabData {
        -:   81:	SlabType type;
        -:   82:	byte **data;
        -:   83:	unsigned int *free_list;
        -:   84:	unsigned int cur_chunks;
        -:   85:	unsigned int cur_slabs;
        -:   86:	unsigned int free_list_head;
        -:   87:} SlabData;
        -:   88:
        -:   89:typedef struct SlabAllocatorImpl {
        -:   90:	int64 sd_count;
        -:   91:	SlabData sd_arr[];
        -:   92:} SlabAllocatorImpl;
        -:   93:
       18:   94:void slab_allocator_cleanup(SlabAllocator *ptr) {
       18:   95:	SlabAllocatorNc sa = *ptr;
       18:   96:	if (sa) {
       10:   97:		if (sa->sd_count) {
     2580:   98:			for (int i = 0; i < sa->sd_count; i++) {
     2570:   99:				SlabData *sd = &sa->sd_arr[i];
     2570:  100:				if (sd->cur_chunks) {
       10:  101:					release(sd->free_list);
       52:  102:					for (int64 j = 0; j < sd->cur_chunks; j++)
       42:  103:						release(sd->data[j]);
       10:  104:					release(sd->data);
       10:  105:					sd->cur_chunks = 0;
        -:  106:				}
        -:  107:			}
        -:  108:		}
       10:  109:		release(sa);
       10:  110:		*ptr = NULL;
        -:  111:	}
       18:  112:}
        -:  113:
     4633:  114:int64 slab_allocator_slab_data_index(SlabData *sd, int64 id) {
     4633:  115:	return id / sd->type.slabs_per_resize;
        -:  116:}
        -:  117:
     4633:  118:int64 slab_allocator_slab_data_offset(SlabData *sd, int64 id) {
     4633:  119:	return (id % sd->type.slabs_per_resize) * (SLAB_OVERHEAD + sd->type.slab_size);
        -:  120:}
        -:  121:
       42:  122:void slab_allocator_init_free_list(SlabData *sd, int64 chunks) {
       42:  123:	sd->free_list_head = sd->cur_chunks * sd->type.slabs_per_resize;
       42:  124:	int64 count = chunks * (int64)sd->type.slabs_per_resize;
     5418:  125:	for (int64 i = 0; i < count; i++) {
     5376:  126:		if (i == count - 1) {
       42:  127:			sd->free_list[i + sd->free_list_head] = UINT32_MAX;
        -:  128:		} else {
     5334:  129:			sd->free_list[i + sd->free_list_head] = 1 + i + sd->free_list_head;
        -:  130:		}
        -:  131:	}
       42:  132:}
        -:  133:
       42:  134:int slab_allocator_increase_chunks(SlabData *sd, int64 chunks) {
       42:  135:	if (sd->cur_chunks == 0) {
       10:  136:		sd->free_list = alloc(chunks * sd->type.slabs_per_resize * sizeof(unsigned int), false);
       10:  137:		if (sd->free_list == NULL)
    #####:  138:			return -1;
       10:  139:		sd->data = alloc(chunks * sizeof(byte *), false);
       10:  140:		if (sd->data == NULL) {
    #####:  141:			release(sd->free_list);
    #####:  142:			return -1;
        -:  143:		}
       20:  144:		for (int64 i = 0; i < chunks; i++) {
       20:  145:			sd->data[i] =
       10:  146:				alloc(sd->type.slabs_per_resize * (SLAB_OVERHEAD + sd->type.slab_size), false);
       10:  147:			if (sd->data[i] == NULL) {
    #####:  148:				release(sd->free_list);
    #####:  149:				for (int64 j = i - 1; j >= 0; j--) {
    #####:  150:					release(sd->data[j]);
        -:  151:				}
    #####:  152:				release(sd->data);
    #####:  153:				return -1;
        -:  154:			}
        -:  155:		}
        -:  156:	} else {
       32:  157:		if ((chunks + (int64)sd->cur_chunks) * (int64)sd->type.slabs_per_resize >
       32:  158:			sd->type.max_slabs) {
    #####:  159:			SetErr(Overflow);
    #####:  160:			return -1;
        -:  161:		}
       32:  162:		void *tmp = resize(sd->free_list, (chunks + sd->cur_chunks) * sd->type.slabs_per_resize *
        -:  163:											  sizeof(unsigned int));
       32:  164:		if (tmp == NULL)
    #####:  165:			return -1;
       32:  166:		sd->free_list = tmp;
       32:  167:		void *tmp2 = resize(sd->data, (chunks + sd->cur_chunks) * sizeof(byte *));
       32:  168:		if (tmp2 == NULL) {
    #####:  169:			release(sd->free_list);
    #####:  170:			return -1;
        -:  171:		}
       32:  172:		sd->data = tmp2;
       64:  173:		for (int64 i = 0; i < chunks; i++) {
       64:  174:			sd->data[i + sd->cur_chunks] =
       32:  175:				alloc(sd->type.slabs_per_resize * (SLAB_OVERHEAD + sd->type.slab_size), false);
       32:  176:			if (sd->data[i + sd->cur_chunks] == NULL) {
    #####:  177:				release(sd->free_list);
    #####:  178:				for (int64 j = i - 1; j >= 0; j--) {
    #####:  179:					release(sd->data[j + sd->cur_chunks]);
        -:  180:				}
    #####:  181:				release(sd->data);
    #####:  182:				return -1;
        -:  183:			}
        -:  184:		}
        -:  185:	}
        -:  186:
       42:  187:	slab_allocator_init_free_list(sd, chunks);
       42:  188:	sd->cur_chunks += chunks;
       42:  189:	return 0;
        -:  190:}
        -:  191:
     2570:  192:int slab_allocator_init_data(SlabData *sd) {
     2570:  193:	sd->cur_slabs = 0;
     2570:  194:	sd->cur_chunks = 0;
     2570:  195:	sd->free_list_head = UINT32_MAX;
     2570:  196:	sd->free_list = NULL;
     2570:  197:	sd->data = NULL;
        -:  198:
     2570:  199:	if (sd->type.initial_chunks) {
    #####:  200:		if (slab_allocator_increase_chunks(sd, sd->type.initial_chunks))
    #####:  201:			return -1;
        -:  202:	}
     2570:  203:	return 0;
        -:  204:}
        -:  205:
       10:  206:int slab_allocator_init_state(SlabAllocator sa) {
     2580:  207:	for (int i = 0; i < sa->sd_count; i++) {
     2570:  208:		if (slab_allocator_init_data(&sa->sd_arr[i]))
    #####:  209:			return -1;
        -:  210:	}
        -:  211:
       10:  212:	return 0;
        -:  213:}
        -:  214:
       10:  215:SlabAllocator slab_allocator_create() {
       10:  216:	SlabAllocatorNc ret = (SlabAllocatorImpl *)alloc(
        -:  217:		sizeof(SlabAllocatorImpl) + SLAB_SIZES * sizeof(SlabData), false);
       10:  218:	if (ret == NULL)
    #####:  219:		return NULL;
       10:  220:	ret->sd_count = SLAB_SIZES;
     2580:  221:	for (int i = 0; i < ret->sd_count; i++) {
     2570:  222:		SlabData *sd = &ret->sd_arr[i];
     2570:  223:		sd->type = (const SlabType) {.slab_size = i * 16,
        -:  224:									 .slabs_per_resize = SLABS_PER_RESIZE,
        -:  225:									 .initial_chunks = INITIAL_CHUNKS,
        -:  226:									 .max_slabs = UINT32_MAX};
     2570:  227:		sd->cur_chunks = 0;
        -:  228:	}
        -:  229:
       10:  230:	if (slab_allocator_init_state(ret)) {
    #####:  231:		slab_allocator_cleanup(&ret);
    #####:  232:		return NULL;
        -:  233:	}
       10:  234:	return ret;
        -:  235:}
        -:  236:
     9261:  237:int slab_allocator_index(SlabAllocator sa, unsigned int size) {
     9261:  238:	int ret = (15 + size) / 16;
     9261:  239:	if (size < 0 || ret >= SLAB_SIZES)
        1:  240:		return -1;
     9260:  241:	return ret;
        -:  242:}
        -:  243:
     4633:  244:Ptr slab_allocator_allocate_sd(SlabData *sd) {
     4633:  245:	if (sd->free_list_head == UINT32_MAX) {
       42:  246:		if (slab_allocator_increase_chunks(sd, 1)) {
    #####:  247:			return NULL;
        -:  248:		}
       42:  249:		if (sd->free_list_head == UINT32_MAX) {
    #####:  250:			SetErr(CapacityExceeded);
    #####:  251:			return NULL;
        -:  252:		}
        -:  253:	}
     4633:  254:	int64 index = slab_allocator_slab_data_index(sd, sd->free_list_head);
     4633:  255:	int64 offset = slab_allocator_slab_data_offset(sd, sd->free_list_head);
     4633:  256:	Ptr ptr = (Type *)(sd->data[index] + offset);
     4633:  257:	ptr->id = sd->free_list_head;
     4633:  258:	ptr->len = sd->type.slab_size;
     4633:  259:	sd->free_list_head = sd->free_list[ptr->id];
     4633:  260:	sd->cur_slabs++;
        -:  261:
     4633:  262:	return ptr;
        -:  263:}
        -:  264:
     4627:  265:void slab_allocator_data_free(SlabData *sd, int64 id) {
     4627:  266:	sd->free_list[id] = sd->free_list_head;
     4627:  267:	sd->free_list_head = id;
     4627:  268:	sd->cur_slabs--;
     4627:  269:}
        -:  270:
     4634:  271:Ptr slab_allocator_allocate(SlabAllocator sa, unsigned int size) {
     4634:  272:	int index = slab_allocator_index(sa, size);
     4634:  273:	if (index < 0)
        1:  274:		return NULL;
        -:  275:
     4633:  276:	return slab_allocator_allocate_sd(&sa->sd_arr[index]);
        -:  277:}
        -:  278:
     4627:  279:void slab_allocator_free(SlabAllocator sa, Ptr ptr) {
     4627:  280:	if (ptr == NULL || sa == NULL) {
    #####:  281:		panic("Invalid ptr sent to slab_allocator free!");
        -:  282:	}
     4627:  283:	unsigned int len = ptr_len(ptr);
     4627:  284:	int index = slab_allocator_index(sa, len);
     4627:  285:	if (index < 0) {
    #####:  286:		panic("Invalid ptr sent to slab_allocator free! Unknown size %lli.", len);
        -:  287:	}
     4627:  288:	if (sa->sd_arr[index].type.slab_size != len) {
    #####:  289:		panic("Invalid ptr sent to slab_allocator free! Size mismatch %lli vs. %lli.",
        -:  290:			  sa->sd_arr[index].type.slab_size, len);
        -:  291:	}
        -:  292:
     4627:  293:	slab_allocator_data_free(&sa->sd_arr[index], ptr->id);
        -:  294:
     4627:  295:	*ptr = null_impl;
     4627:  296:}
       16:  297:int64 slab_allocator_cur_slabs_allocated(const SlabAllocator sa) {
       16:  298:	int64 slabs = 0;
     4128:  299:	for (int i = 0; i < sa->sd_count; i++) {
     4112:  300:		SlabData *sd = &sa->sd_arr[i];
     4112:  301:		slabs += sd->cur_slabs;
        -:  302:	}
       16:  303:	return slabs;
        -:  304:}
        -:    0:Source:string.c
        -:    0:Graph:string.gcno
        -:    0:Data:string.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/fam_alloc.h>
        -:   16:#include <base/fam_err.h>
        -:   17:#include <base/os.h>
        -:   18:#include <base/osdef.h>
        -:   19:#include <base/slabs.h>
        -:   20:#include <base/string.h>
        -:   21:
        -:   22:#include <stdio.h>
        -:   23:
        4:   24:int64 cstring_len(const byte *S) {
        4:   25:	if (S == NULL) {
    #####:   26:		SetErr(IllegalArgument);
    #####:   27:		return -1;
        -:   28:	}
        4:   29:	int64 ret = 0;
       21:   30:	while (*S != '\0') {
       17:   31:		S++;
       17:   32:		ret++;
        -:   33:	}
        4:   34:	return ret;
        -:   35:}
        -:   36:
        1:   37:string string_ref(const string src) {
        1:   38:	if (nil(src)) {
    #####:   39:		SetErr(IllegalArgument);
    #####:   40:		return NULL;
        -:   41:	}
        -:   42:
        1:   43:	int64 *aux = ptr_aux(src);
        1:   44:	int64 refc = (*aux & 0x00FFFFFF00000000) >> 32;
        1:   45:	refc++;
        1:   46:	*aux = (*aux & 0xFF000000FFFFFFFF) | (refc << 32);
        1:   47:	stringNc ret = src;
        -:   48:
        1:   49:	return ret;
        -:   50:}
        -:   51:
        4:   52:byte *cstring(const string s) {
        4:   53:	return $(s);
        -:   54:}
        -:   55:
    #####:   56:string string_create() {
    #####:   57:	return string_create_b("", 0);
        -:   58:}
        4:   59:string string_create_cs(const char *s) {
        4:   60:	if (s == NULL) {
    #####:   61:		SetErr(IllegalArgument);
    #####:   62:		return NULL;
        -:   63:	}
        4:   64:	return string_create_b(s, cstring_len(s));
        -:   65:}
        5:   66:string string_create_b(const byte *s, unsigned int len) {
        5:   67:	if (s == NULL) {
    #####:   68:		SetErr(IllegalArgument);
    #####:   69:		return NULL;
        -:   70:	}
        -:   71:	if (len > UINT32_MAX) {
        -:   72:		SetErr(Overflow);
        -:   73:		return NULL;
        -:   74:	}
        5:   75:	Ptr ret = fam_alloc(len + 1, false);
        5:   76:	if (ret == NULL) {
    #####:   77:		return NULL;
        -:   78:	}
        5:   79:	int64 *aux = ptr_aux(ret);
        5:   80:	int64 flags = *aux & 0xFF00000000000000LL;
        5:   81:	int64 refc = 0x1LL << 32; // set reference counter to 1
        5:   82:	*aux = flags | len | refc;
        5:   83:	refc = (*aux & 0x00FFFFFF00000000) >> 32;
        5:   84:	memcpy($(ret), s, len);
        5:   85:	((byte *)$(ret))[len] = '\0';
        5:   86:	return ret;
        -:   87:}
        -:   88:
    #####:   89:string string_clone(string s) {
    #####:   90:	if (nil(s)) {
    #####:   91:		SetErr(IllegalArgument);
    #####:   92:		return NULL;
        -:   93:	}
    #####:   94:	return string_create_b(cstring(s), string_len(s));
        -:   95:}
        1:   96:string string_append_bytes(const string s, const byte *bytes, unsigned int len) {
        1:   97:	if (nil(s) || bytes == NULL) {
    #####:   98:		SetErr(IllegalArgument);
    #####:   99:		return NULL;
        -:  100:	}
        1:  101:	unsigned int slen = string_len(s);
        1:  102:	int64 nlen = (int64)len + (int64)slen;
        1:  103:	if (nlen > UINT32_MAX) {
    #####:  104:		SetErr(Overflow);
    #####:  105:		return NULL;
        -:  106:	}
        1:  107:	Ptr ret = fam_alloc(nlen + 1, false);
        1:  108:	if (ret == NULL)
    #####:  109:		return ret;
        1:  110:	int64 *aux = ptr_aux(ret);
        1:  111:	int64 refc = 0x1LL << 32; // set reference counter to 1
        1:  112:	int64 flags = *aux & 0xFFFFFFFF00000000LL;
        1:  113:	*aux = flags | nlen | refc;
        1:  114:	memcpy($(ret), $(s), slen);
        1:  115:	memcpy($(ret) + slen, bytes, len);
        1:  116:	((byte *)$(ret))[nlen] = '\0';
        -:  117:
        1:  118:	return ret;
        -:  119:}
    #####:  120:string string_append_cstring(const string s, const char *bytes) {
    #####:  121:	return string_append_bytes(s, bytes, cstring_len(bytes));
        -:  122:}
        1:  123:string string_append_string(const string s, const string s2) {
        1:  124:	return string_append_bytes(s, cstring(s2), string_len(s2));
        -:  125:}
       27:  126:int64 string_len(const string s) {
       27:  127:	if (nil(s)) {
    #####:  128:		SetErr(IllegalArgument);
    #####:  129:		return -1;
        -:  130:	}
       27:  131:	int64 *aux = ptr_aux(s);
       27:  132:	return (*aux & 0xFFFFFFFF);
        -:  133:}
    #####:  134:int64 string_index_of(const string s1, const string s2) {
        -:  135:	// TODO: look into optimization with Boyer-Moore or KMP
    #####:  136:	if (nil(s1) || nil(s2)) {
    #####:  137:		SetErr(IllegalArgument);
    #####:  138:		return -1;
        -:  139:	}
    #####:  140:	const char *si1 = $(s1);
    #####:  141:	const char *si2 = $(s2);
        -:  142:
    #####:  143:	unsigned int s1len = string_len(s1);
    #####:  144:	unsigned int s2len = string_len(s2);
        -:  145:
    #####:  146:	if (s2len > s1len)
    #####:  147:		return -1;
        -:  148:
    #####:  149:	if (s2len == 0)
    #####:  150:		return 0;
        -:  151:
    #####:  152:	unsigned int max = 1 + (s1len - s2len);
    #####:  153:	for (unsigned int i = 0; i < max; i++) {
    #####:  154:		if (!memcmp(si1 + i, si2, s2len))
    #####:  155:			return i;
        -:  156:	}
        -:  157:
    #####:  158:	return -1;
        -:  159:}
    #####:  160:int64 string_last_index_of(const string s1, const string s2) {
        -:  161:	// TODO: look into optimization with Boyer-Moore or KMP
    #####:  162:	if (nil(s1) || nil(s2)) {
    #####:  163:		SetErr(IllegalArgument);
    #####:  164:		return -1;
        -:  165:	}
    #####:  166:	const char *si1 = $(s1);
    #####:  167:	const char *si2 = $(s2);
        -:  168:
    #####:  169:	unsigned int s1len = string_len(s1);
    #####:  170:	unsigned int s2len = string_len(s2);
        -:  171:
    #####:  172:	if (s2len > s1len)
    #####:  173:		return -1;
        -:  174:
    #####:  175:	if (s2len == 0)
    #####:  176:		return 0;
        -:  177:
    #####:  178:	int64 max = s1len - s2len;
    #####:  179:	for (unsigned int i = max; i >= 0; i--) {
    #####:  180:		if (!memcmp(si1 + i, si2, s2len))
    #####:  181:			return i;
        -:  182:	}
        -:  183:	return -1;
        -:  184:}
    #####:  185:string string_substring(const string src, unsigned int start) {
    #####:  186:	return string_substring_s(src, start, string_len(src));
        -:  187:}
        1:  188:string string_substring_s(const string src, unsigned int start, unsigned int end) {
        1:  189:	if (nil(src) || end < start) {
    #####:  190:		SetErr(IllegalArgument);
    #####:  191:		return NULL;
        -:  192:	}
        -:  193:
        1:  194:	if (end > string_len(src)) {
    #####:  195:		SetErr(IndexOutOfBounds);
    #####:  196:		return NULL;
        -:  197:	}
        -:  198:
        1:  199:	return string_create_b($(src) + start, end - start);
        -:  200:}
       11:  201:byte string_char_at(const string s, unsigned int index) {
       11:  202:	if (nil(s)) {
    #####:  203:		SetErr(IllegalArgument);
    #####:  204:		return '\0';
        -:  205:	}
        -:  206:
       11:  207:	if (index >= string_len(s)) {
        1:  208:		SetErr(IndexOutOfBounds);
        1:  209:		return '\0';
        -:  210:	}
        -:  211:
       10:  212:	return ((char *)$(s))[index];
        -:  213:}
    #####:  214:bool string_equal(const string s1, const string s2) {
    #####:  215:	if (nil(s1) && nil(s2))
    #####:  216:		return true;
    #####:  217:	if (nil(s1) || nil(s2))
    #####:  218:		return false;
        -:  219:
    #####:  220:	int64 len = string_len(s1);
    #####:  221:	if (len != string_len(s2))
    #####:  222:		return false;
        -:  223:
    #####:  224:	const char *si1 = $(s1);
    #####:  225:	const char *si2 = $(s2);
        -:  226:
    #####:  227:	for (int64 i = 0; i < len; i++) {
    #####:  228:		if (si1[i] != si2[i])
    #####:  229:			return false;
        -:  230:	}
        -:  231:
    #####:  232:	return true;
        -:  233:}
        -:  234:
    #####:  235:int string_compare(const string s1, const string s2) {
    #####:  236:	if (nil(s1) && nil(s2))
    #####:  237:		return 0;
    #####:  238:	if (nil(s1))
    #####:  239:		return -1;
    #####:  240:	if (nil(s2))
    #####:  241:		return 1;
    #####:  242:	const char *s1c = $(s1);
    #####:  243:	const char *s2c = $(s2);
    #####:  244:	unsigned int s1len = string_len(s1);
    #####:  245:	unsigned int s2len = string_len(s2);
        -:  246:	unsigned int len;
    #####:  247:	if (s1len < s2len)
    #####:  248:		len = s1len;
        -:  249:	else
    #####:  250:		len = s2len;
    #####:  251:	unsigned int i = 0;
        -:  252:
    #####:  253:	while (i < len) {
    #####:  254:		if (s1c[i] != s2c[i]) {
    #####:  255:			if (s1c[i] < s2c[i])
    #####:  256:				return -1;
        -:  257:			else
    #####:  258:				return 1;
        -:  259:		}
    #####:  260:		i++;
        -:  261:	}
    #####:  262:	if (s2len > s1len)
    #####:  263:		return 1;
    #####:  264:	else if (s2len < s1len)
    #####:  265:		return -1;
    #####:  266:	return 0;
        -:  267:}
        -:  268:
        -:  269:// Functions that require override of const
        -:  270:#pragma clang diagnostic ignored "-Wincompatible-pointer-types-discards-qualifiers"
        -:  271:#pragma clang diagnostic ignored "-Wunknown-warning-option"
        -:  272:#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
        7:  273:void string_cleanup(const string *ptr) {
        7:  274:	if (!nil(*ptr)) {
        7:  275:		int64 *aux = ptr_aux(*ptr);
        7:  276:		int64 refc = (*aux & 0x00FFFFFF00000000) >> 32;
        7:  277:		refc--;
        7:  278:		*aux = (*aux & 0xFF000000FFFFFFFF) | (refc << 32);
        -:  279:
        7:  280:		if (refc == 0) {
        6:  281:			fam_release(ptr);
        -:  282:		}
        -:  283:	}
        7:  284:}
        -:    0:Source:types.c
        -:    0:Graph:types.gcno
        -:    0:Data:types.gcda
        -:    0:Runs:10
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <base/osdef.h>
        -:   16:#include <base/print_util.h>
        -:   17:#include <base/types.h>
        -:   18:#include <stdio.h>
        -:   19:
       10:   20:void __attribute__((constructor)) __check_64bit_arch__() {
        -:   21:#if !defined(__x86_64__) && !defined(_M_X64) && !defined(__aarch64__)
        -:   22:	panic("Supported architectures: __x86_64__, _M_X64, and __aarch64__");
        -:   23:#endif // arch
        -:   24:
        -:   25:	// check size_t
        -:   26:	if (__SIZEOF_SIZE_T__ != 8)
        -:   27:		panic("size_t must be 8 bytes. Invalid arch!");
        -:   28:	// check primitive types
        -:   29:	if (sizeof(byte) != 1)
        -:   30:		panic("byte must be 1 byte. Invalid arch!");
        -:   31:
        -:   32:	if (sizeof(int64) != 8)
        -:   33:		panic("must be 8 bytes. Invalid arch!");
        -:   34:
        -:   35:	if (sizeof(int) != 4)
        -:   36:		panic("int must be 4 bytes. Invalid arch!");
        -:   37:
        -:   38:	if (sizeof(float64) != 8)
        -:   39:		panic("float64 must be 8 bytes. Invalid arch!");
        -:   40:
        -:   41:	if (sizeof(bool) != 1)
        -:   42:		panic("bool must be 1 byte. Invalid arch!");
        -:   43:
        -:   44:	if (sizeof(aint64) != 8)
        -:   45:		panic("aint64 must be 8 bytes. Invalid arch!");
        -:   46:
        -:   47:	if (sizeof(abool) != 1)
        -:   48:		panic("abool must be 1 byte. Invalid arch!");
        -:   49:
        -:   50:	// little endian check
       10:   51:	int test = 0x1;
       10:   52:	if (*(byte *)&test != 0x1) {
    #####:   53:		panic("Big endian is not supported!");
        -:   54:	}
       10:   55:}
        -:    0:Source:real_main.c
        -:    0:Graph:real_main.gcno
        -:    0:Data:real_main.gcda
        -:    0:Runs:2
        -:    1:// Copyright (c) 2024, The MyFamily Developers
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#include <main/main.h>
        -:   16:
    #####:   17:int real_main(int argc, char **argv) {
    #####:   18:	return 0;
        -:   19:}
