Animal {
	// ok test
	void speak(&s);
	/// doc test
	u32 fn2(&me, u32 x) {
		/* some comments
		 * here
		 */
		
		10
	}
}

#[derive(Something)]
Cat {
	#[something("ok", "ok")]
	Cat new() {
		Cat {}
	}
}

Cat::Animal {
	void speak(&s) {
		// cat speak
	}
}

Dog {
	Dog new() {
		Dog {}
	}
}

Dog::Animal {
	void speak(&s) {
		// dog speak
	}
}

Main {
	i32 main(char [][] argv) {
		Dog dog = Dog::new();
		dog.speak();
	}
}

// return type can be a type as above, a tuple (i32, u32) for example or an array char[][] or Dog[] for example.
// Also a reference is possible &Dog for instance. Also muts &mut Cat, etc.
// Parameter list: (&self, &mut Dog mydog, Cat mycat, char[][] char_array)

